//ELASTIC3D.edp
//董灏：2016年9月1日添加
//拟周期性质的单胞函数需要插值的方法进行求解每个点上的单胞函数值
//双曲扁壳的单胞函数和均匀化系数之和变量alpha3即z相关壳的单胞函数和均匀化系数之和变量alpha3即z相关
//********************************************FEstart***************************************
//********************************************FEstart***************************************
//一阶单胞函数、均匀化系数、二阶单胞函数有限元求解程序
load "msh3"
load "Morley"
load "UMFPACK64"
load "medit"
include "cube.idp" 
include "../Nonlinear-material-structure/MeshFile/MeshFunc3D.edp"
include "../Nonlinear-material-structure/MeshFile/MeshFunc2D.edp"
//1.复合材料材料参数设置(可选择各项异性或各项同性)
//参考初始温度
real intiT=373.15;
//******************************************************
//*****************5*5*5算例数据************************
real Ma1=250.0e-2, Ma2=8.0e-2, Mb1=0.02728e-2, Mb2=0.02535e-2, Mc1=0.0, Mc2=0.0;                //M:热传导系数
real Ea1 = 350.0e5, nu1=0.25, Eb1 =-3.0435e3, Ec1=0.0;                         //E,nu杨氏模量和泊松比
real Ea2 = 220.0e5, nu2=0.20, Eb2 =-1.1018e1, Ec2=0.0;  //其中a代表线性增长关系的常数项,b表示线性关系中的一次项系数,c代表二次关系中的二次项系数
real lambda1 = Ea1*nu1/(1-nu1^2), lambdb1 = Eb1*nu1/(1-nu1^2), lambdc1 = Ec1*nu1/(1-nu1^2); //lambda,mu两个拉梅常数 
real mua1 = Ea1/(2*(1+nu1)), mub1 = Eb1/(2*(1+nu1)), muc1 = Ec1/(2*(1+nu1));
real lambda2 = Ea2*nu2/(1-nu2^2), lambdb2 = Eb2*nu2/(1-nu2^2), lambdc2 = Ec2*nu2/(1-nu2^2);
real mua2 = Ea2/(2*(1+nu2)), mub2 = Eb2/(2*(1+nu2)), muc2 = Ec2/(2*(1+nu2));
//real beta1=147.00, beta2=113.67, betb1=1.2460, betb2=-57.53e-4, betc1=-10.8808e-4, betc2=0.0817e-4;         //热模量
//real deta1=147.00*intiT, deta2=113.67*intiT, detb1=1.2460*intiT, detb2=-57.53e-4*intiT, detc1=-10.8808e-4*intiT, detc2=0.0817e-4*intiT;         //双向耦合模量
//real beta1=3.5e2, beta2=0.9273e6, betb1=0.0, betb2=-57.53e2, betc1=0.0, betc2=0.0817e2;         //热模量
//real deta1=beta1*intiT, deta2=beta2*intiT, detb1=betb1*intiT, detb2=betb2*intiT, detc1=betc1*intiT, detc2=betc2*intiT;
real beta1=3.5e-4, beta2=0.9273, betb1=0.0, betb2=-57.53e-4, betc1=0.0, betc2=0.0817e-4;         //热模量
real deta1=beta1*intiT, deta2=beta2*intiT, detb1=betb1*intiT, detb2=betb2*intiT, detc1=betc1*intiT, detc2=betc2*intiT;
real pca1=2.1186, pca2=1.2496, pcb1=2.9073e-3*2.1144, pcb2=3.8808e-3*0.8078, pcc1=-2.2637e-6*2.1144, pcc2=-4.3051e-6*0.8078;              //pc:两种材料的密度和比热乘积rho*c,热传导方程需要                
real rho1=3.21e-3, rho2=1.76e-3; 
//********二次函数材料系数宏*********
macro material(a,b,c,RET) (a+b*RET+c*RET*RET)//
//******************************************************
//******************************************************
//2.定义三维弹性本构矩阵（柔度矩阵）
//各向异性材料柔度矩阵
macro H(Ee11,Ee22,Ee33,v12,v23,v31,Gg12,Gg23,Gg31)[[1.0/Ee11, (-1.0)*v12/Ee11, (-1.0)*v31/Ee33 , 0.0, 0.0, 0.0],
                                                      [(-1.0)*v12/Ee11, 1.0/Ee22 ,(-1.0)*v23/Ee22, 0.0 ,0.0 ,0.0],
                                                        [(-1.0)*v31/Ee33 ,(-1.0)*v23/Ee22, 1.0/Ee33 ,0.0, 0.0 ,0.0],
					                                       [0.0, 0.0, 0.0, 1.0/Gg12, 0.0, 0.0],
								                              [0.0, 0.0, 0.0, 0.0, 1.0/Gg23,0 ],
                                                                [0.0, 0.0, 0.0, 0.0, 0.0 ,1.0/Gg31]]//
//对于各向同性材料有E=E11=E22=E33,v=Nu12=Nu23=Nu31,G=G12=G23=G31=E/2(1+v);
macro HH(E,V)[[1.0/E, (-1.0)*V/E, (-1.0)*V/E , 0, 0, 0],
                                                      [(-1.0)*V/E, 1.0/E ,(-1.0)*V/E, 0.0 ,0.0 ,0.0],
                                                        [(-1.0)*V/E ,(-1.0)*V/E, 1.0/E ,0.0, 0.0 ,0.0],
					                                       [0.0, 0.0, 0.0, 2.0*(1+V)/E, 0.0, 0.0],
								                              [0.0, 0.0, 0.0, 0.0, 2.0*(1+V)/E,0.0 ],
                                                                [0.0, 0.0, 0.0, 0.0, 0.0 ,2.0*(1+V)/E]]//

//2.将柔度矩阵通过矩阵求逆转化为刚度矩阵
//矩阵求逆函数
func real[int,int] inverse(real[int,int] &vec)
{
	
	//vec为已生成的柔度矩阵为对称正定矩阵
    //利用已有算法求逆矩阵
	int stRank = 6;
	real[int] b(6);
	for(int k=0; k<stRank; k++)
	{
		real w= vec(0,0);
		int m = stRank - k -1;
		for(int i=1; i<stRank; i++)
		{
			real g = vec(i,0);
			b[i] = g / w;
			if (i<=m)
			{
				b(i) = -b(i);
			}
			for(int j=1; j<=i; j++)
			{
				vec(i-1,j-1)= vec(i,j) + g * b(j);
			}
		}
		vec(stRank-1,stRank-1) = 1.0 / w;
		for(int i= 1; i<stRank; i++)
		{
			vec(stRank-1,i-1) =  b(i);
		}
	}
	for(int i=0; i<stRank-1; i++)
	{
		for(int j = i+1; j<stRank; j++)
		{
			vec(i,j) = vec(j,i);
		}
	}

	real[int,int] cmatrix = vec;
	return cmatrix;
}
/* real[int,int] Ma1=HH(E1,nu1);
Ma1=inverse(Ma1);
cout << "1.Based material Constitute Matrix M1: " << endl;
cout << Ma1 << endl;
real[int,int] Ma2=HH(E2,nu2);
Ma2=inverse(Ma2);
cout << "2.Reinforced material Constitute Matrix M2: " << endl;
cout << Ma2 << endl; */
//R1、R2为中面两个方向曲率半径
//A1、A2为中面两个方向拉梅系数
//alpha1、alpha2、alpha3分别代表宏观坐标x、y、z
macro strain(u1,u2,u3,alpha3,R1,R2) [1.0/(R1+alpha3)*dx(u1)+u3/(R1+alpha3),1.0/(R2+alpha3)*dy(u2)+u3/(R2+alpha3),dz(u3),1.0/(R1+alpha3)*dx(u2)+1.0/(R2+alpha3)*dy(u1),1.0/(R2+alpha3)*dy(u3)+dz(u2)-u2/(R2+alpha3),1.0/(R1+alpha3)*dx(u3)+dz(u1)-u1/(R1+alpha3)]//
macro C(k11,k12,k13,k21,k22,k23,k31,k32,k33,k44,k55,k66)
[[k11,k12,k13,0.0,0.0,0.0],
   [k21,k22,k23,0.0,0.0,0.0],
       [k31,k32,k33,0.0,0.0,0.0],
            [0.0,0.0,0.0,k44,0.0,0.0],
               [0.0,0.0,0.0,0.0,k55,0.0],
                  [0.0,0.0,0.0,0.0,0.0,k66]]//
//生成刚度矩阵每一行的宏命令
//各向异性材料和各向同性材料为相同的宏命令
macro C1(k11,k12,k13,k21,k22,k23,k31,k32,k33,k44,k55,k66)
[k11,k12,k13,0.0,0.0,0.0]//
macro C2(k11,k12,k13,k21,k22,k23,k31,k32,k33,k44,k55,k66)
[k21,k22,k23,0.0,0.0,0.0]//
macro C3(k11,k12,k13,k21,k22,k23,k31,k32,k33,k44,k55,k66)
[k31,k32,k33,0.0,0.0,0.0]//
macro C4(k11,k12,k13,k21,k22,k23,k31,k32,k33,k44,k55,k66)
[0.0,0.0,0.0,k44,0.0,0.0]//
macro C5(k11,k12,k13,k21,k22,k23,k31,k32,k33,k44,k55,k66)
[0.0,0.0,0.0,0.0,k55,0.0]//
macro C6(k11,k12,k13,k21,k22,k23,k31,k32,k33,k44,k55,k66)
[0.0,0.0,0.0,0.0,0.0,k66]//
//***************************************************************************************

//3.读取已生成的单胞几何模型及有限元网格
int n =108;
real epsilon = pi/n;
//a.导入单胞网格文件
mesh3 plateCell("platecell8.mesh");
fespace Cellvh(plateCell,P1);
fespace Cellvh0(plateCell,P0);
//b.导入宏观均匀化网格文件
mesh3 HomoTh("Homo8.mesh");
fespace Homovh(HomoTh,P1);
int RM1 = plateCell(0.01, 0.01, 0.01).region;
int RM2 = plateCell(0.5, 0.5, 0.5).region;
plot(plateCell);
cout<<plateCell.nv<<"***"<<plateCell.nt<<endl;
//c.导入宏观网格文件,组装细网格固定截面上的均匀化解、一阶双尺度解、二阶双尺度解
//********************计算板中面上的温度场、位移场，其余截面和此类似****************************
mesh MacroTh("MBall8.msh");
fespace Macrovh(MacroTh,P1);

//单胞上线性常数部分参数
Cellvh0 rho= rho1*(region==RM1) + rho2*(region==RM2);
Cellvh0 nu = nu1*(region==RM1) + nu2*(region==RM2);
Cellvh0 aa = Ma1*(region==RM1) + Ma2*(region==RM2);
//CellVh0 lambda = lambda1*(region==RM1) + lambda2*(region==RM2);
//CellVh0 mua = mua1*(region==RM1) + mua2*(region==RM2);
//CellVh0 Ea = Ea1*(region==RM1) + Ea2*(region==RM2);
Cellvh0 ba = beta1*(region==RM1) + beta2*(region==RM2);
Cellvh0 pca= pca1*(region==RM1) + pca2*(region==RM2);
Cellvh0 da = deta1*(region==RM1) + deta2*(region==RM2);//热传导方程中的双向耦合模量
//单胞上线性一次项部分参数
Cellvh0 ab = Mb1*(region==RM1) + Mb2*(region==RM2);
//CellVh0 lambdb= lambdb1*(region==RM1) + lambdb2*(region==RM2);
//CellVh0 mub = mub1*(region==RM1) + mub2*(region==RM2);
//CellVh0 Eb = Eb1*(region==RM1) + Eb2*(region==RM2);
Cellvh0 bb = betb1*(region==RM1) + betb2*(region==RM2);
Cellvh0 pcb= pcb1*(region==RM1) + pcb2*(region==RM2);
Cellvh0 db = detb1*(region==RM1) + detb2*(region==RM2);//热传导方程中的双向耦合模量
//单胞上非线性二次项部分参数
Cellvh0 ac = Mc1*(region==RM1) + Mc2*(region==RM2);
//CellVh0 lambdc= lambdc1*(region==RM1) + lambdc2*(region==RM2);
//CellVh0 muc = muc1*(region==RM1) + muc2*(region==RM2);
//CellVh0 Ec = Ec1*(region==RM1) + Ec2*(region==RM2);
Cellvh0 bc = betc1*(region==RM1) + betc2*(region==RM2);
Cellvh0 pcc= pcc1*(region==RM1) + pcc2*(region==RM2);
Cellvh0 dc = detc1*(region==RM1) + detc2*(region==RM2);//热传导方程中的双向耦合模量
real E1=material(Ea1,Eb1,Ec1,intiT);
real E2=material(Ea2,Eb2,Ec2,intiT);
real[int,int] MMa1=HH(E1,nu1);
MMa1=inverse(MMa1);
cout << "1.Based material Constitute Matrix M1: " << endl;
cout << MMa1 << endl;
real[int,int] MMa2=HH(E2,nu2);
MMa2=inverse(MMa2);
cout << "2.Reinforced material Constitute Matrix M2: " << endl;
cout << MMa2 << endl;
//单胞函数刚度系数定义
func kc11 = MMa1(0,0)*(region==RM1) + MMa2(0,0)*(region==RM2);
func kc12 = MMa1(0,1)*(region==RM1) + MMa2(0,1)*(region==RM2);
func kc13 = MMa1(0,2)*(region==RM1) + MMa2(0,2)*(region==RM2);
func kc21 = MMa1(1,0)*(region==RM1) + MMa2(1,0)*(region==RM2);
func kc22 = MMa1(1,1)*(region==RM1) + MMa2(1,1)*(region==RM2);
func kc23 = MMa1(1,2)*(region==RM1) + MMa2(1,2)*(region==RM2);
func kc31 = MMa1(2,0)*(region==RM1) + MMa2(2,0)*(region==RM2);
func kc32 = MMa1(2,1)*(region==RM1) + MMa2(2,1)*(region==RM2);
func kc33 = MMa1(2,2)*(region==RM1) + MMa2(2,2)*(region==RM2);
func kc44 = MMa1(3,3)*(region==RM1) + MMa2(3,3)*(region==RM2);
func kc55 = MMa1(4,4)*(region==RM1) + MMa2(4,4)*(region==RM2);
func kc66 = MMa1(5,5)*(region==RM1) + MMa2(5,5)*(region==RM2);

real dE1=material(Eb1,2*Ec1,0,intiT);
real dE2=material(Eb2,2*Ec2,0,intiT);
real[int,int] dMMa1=HH(dE1,nu1);
dMMa1=inverse(dMMa1);
cout << "1.Based material Constitute Matrix M1: " << endl;
cout << dMMa1 << endl;
real[int,int] dMMa2=HH(dE2,nu2);
dMMa2=inverse(dMMa2);
cout << "2.Reinforced material Constitute Matrix M2: " << endl;
cout << dMMa2 << endl;
func dk11 = dMMa1(0,0)*(region==RM1) + dMMa2(0,0)*(region==RM2);
func dk12 = dMMa1(0,1)*(region==RM1) + dMMa2(0,1)*(region==RM2);
func dk13 = dMMa1(0,2)*(region==RM1) + dMMa2(0,2)*(region==RM2);
func dk21 = dMMa1(1,0)*(region==RM1) + dMMa2(1,0)*(region==RM2);
func dk22 = dMMa1(1,1)*(region==RM1) + dMMa2(1,1)*(region==RM2);
func dk23 = dMMa1(1,2)*(region==RM1) + dMMa2(1,2)*(region==RM2);
func dk31 = dMMa1(2,0)*(region==RM1) + dMMa2(2,0)*(region==RM2);
func dk32 = dMMa1(2,1)*(region==RM1) + dMMa2(2,1)*(region==RM2);
func dk33 = dMMa1(2,2)*(region==RM1) + dMMa2(2,2)*(region==RM2);
func dk44 = dMMa1(3,3)*(region==RM1) + dMMa2(3,3)*(region==RM2);
func dk55 = dMMa1(4,4)*(region==RM1) + dMMa2(4,4)*(region==RM2);
func dk66 = dMMa1(5,5)*(region==RM1) + dMMa2(5,5)*(region==RM2);

//定义每个均匀化空间上自由度的宏观量
Homovh aH=z;
//求解均匀化系数
Homovh homoK11,homoK22,homoK33;//均匀化空间上自由度的热传导系数
Homovh homoC1111,homoC1122,homoC1133,homoC2222,homoC2233,homoC3333;//均匀化空间上自由度的刚度系数
Homovh homoC1212,homoC2323,homoC3131;//利用刚度矩阵对称性减少计算量
Homovh homobeta11,homobeta22,homobeta33;//均匀化空间上自由度的热模量系数
Homovh homodeta11,homodeta22,homodeta33;
Homovh homorho;
Homovh homoS;//密度*热容系数
//mesh MacroTh("MBall.msh");
//fespace Macrovh(MacroTh,P1);

//4.定义一阶单胞问题
real RHT; //定义单胞函数中的宏观变量均匀化温度T0
real R1,R2;//alpha1,alpha2、x,y方向曲率半径
real alpha3;//z变量的插值代表坐标符号
//单胞所需弹性应变宏
macro Cstrain(u1,u2,u3,alpha3,R1,R2) [dx(u1)/(R1+alpha3),dy(u2)/(R2+alpha3),dz(u3),dx(u2)/(R1+alpha3)+dy(u1)/(R2+alpha3),dy(u3)/(R2+alpha3)+dz(u2),dx(u3)/(R1+alpha3)+dz(u1)]//
//力学问题
Cellvh u11,v11,w11,uu,vv,ww;
problem Cellpro11([u11,v11,w11],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
      int3d(plateCell)(Cstrain(u11,v11,w11,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
      +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66))        
+on(1,2,3,4,5,6,u11=0,v11=0,w11=0);

Cellvh u22,v22,w22;
problem Cellpro22([u22,v22,w22],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
      int3d(plateCell)(Cstrain(u22,v22,w22,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
      +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66))        
+on(1,2,3,4,5,6,u22=0,v22=0,w22=0);

Cellvh u33,v33,w33;
problem Cellpro33([u33,v33,w33],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
      int3d(plateCell)(Cstrain(u33,v33,w33,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
      +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66))        
      +on(1,2,3,4,5,6,u33=0,v33=0,w33=0);
	  
Cellvh u12,v12,w12;	  
problem Cellpro12([u12,v12,w12],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(u12,v12,w12,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66))        
        +on(1,2,3,4,5,6,u12=0,v12=0,w12=0);	 
		
Cellvh u23,v23,w23;
problem Cellpro23([u23,v23,w23],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(u23,v23,w23,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66))        
        +on(1,2,3,4,5,6,u23=0,v23=0,w23=0);
		
Cellvh u31,v31,w31;
problem Cellpro31([u31,v31,w31],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(u31,v31,w31,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66))        
        +on(1,2,3,4,5,6,u31=0,v31=0,w31=0);  
		
//热学问题
Cellvh M1, v;
problem CellM1(M1, v,solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)((material(aa,ab,ac,RHT))*(dx(M1)/(R1+alpha3)*dx(v)/(R1+alpha3)+dy(M1)/(R2+alpha3)*dy(v)/(R2+alpha3)+dz(M1)*dz(v)))
        +int3d(plateCell)((material(aa,ab,ac,RHT))*dx(v)/(R1+alpha3))
        +on(1,2,3,4,5,6,M1=0);
Cellvh M2;
problem CellM2(M2, v,solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)((material(aa,ab,ac,RHT))*(dx(M2)/(R1+alpha3)*dx(v)/(R1+alpha3)+dy(M2)/(R2+alpha3)*dy(v)/(R2+alpha3)+dz(M2)*dz(v)))
        +int3d(plateCell)((material(aa,ab,ac,RHT))*dy(v)/(R2+alpha3))
        +on(1,2,3,4,5,6,M2=0);
Cellvh M3;
problem CellM3(M3, v,solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)((material(aa,ab,ac,RHT))*(dx(M3)/(R1+alpha3)*dx(v)/(R1+alpha3)+dy(M3)/(R2+alpha3)*dy(v)/(R2+alpha3)+dz(M3)*dz(v)))
        +int3d(plateCell)((material(aa,ab,ac,RHT))*dz(v))
        +on(1,2,3,4,5,6,M3=0);
		
//热模量问题
Cellvh uP, vP, wP;
problem CellBeta([uP, vP, wP], [uu, vv, ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(uP,vP,wP,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc31,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
        +int3d(plateCell)((material(ba,bb,bc,RHT))*(dx(uu)/(R1+alpha3)+dy(vv)/(R2+alpha3)+dz(ww)))                      
        +on(1, 2, 3, 4, 5, 6, uP=0, vP=0, wP=0);
		
//5.定义二阶单胞问题
//力学问题
real valhomoC1111,valhomoC1122,valhomoC1133;
real valhomoC2211,valhomoC2222,valhomoC2233;
real valhomoC3311,valhomoC3322,valhomoC3333;
real valhomoC1212,valhomoC2323,valhomoC3131;
//a.以1开头的六个二阶单胞函数
//a.以1开头的六个二阶单胞函数
Cellvh u111,v111,w111;
problem Cellpro111([u111,v111,w111],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(u111,v111,w111,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
        //三个均匀化常数的积分      
        -int3d(plateCell)((kc11-valhomoC1111)*uu)
        //一阶单胞函数解作为伪位移
        -int3d(plateCell)(Cstrain(u11,v11,w11,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu)
        -int3d(plateCell)(Cstrain(u11,v11,w11,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv)
        -int3d(plateCell)(Cstrain(u11,v11,w11,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww)
        //虚位移作为伪位移
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*u11)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*v11)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*w11)        
        +on(1,2,3,4,5,6,u111=0,v111=0,w111=0);
     
Cellvh u122,v122,w122;
problem Cellpro122([u122,v122,w122],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(u122,v122,w122,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
        //三个均匀化常数的积分      
        -int3d(plateCell)((kc12-valhomoC1122)*uu)
        //一阶单胞函数解作为伪位移
        -int3d(plateCell)(Cstrain(u22,v22,w22,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu)
        -int3d(plateCell)(Cstrain(u22,v22,w22,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv)
        -int3d(plateCell)(Cstrain(u22,v22,w22,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww)
        //虚位移作为伪位移
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*u22)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*v22)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*w22)       
        +on(1,2,3,4,5,6,u122=0,v122=0,w122=0);
     
Cellvh u133,v133,w133;
problem Cellpro133([u133,v133,w133],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(u133,v133,w133,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
        //三个均匀化常数的积分      
        -int3d(plateCell)((kc13-valhomoC1133)*uu)
        //一阶单胞函数解作为伪位移
        -int3d(plateCell)(Cstrain(u33,v33,w33,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu)
        -int3d(plateCell)(Cstrain(u33,v33,w33,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv)
        -int3d(plateCell)(Cstrain(u33,v33,w33,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww)
        //虚位移作为伪位移
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*u33)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*v33)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*w33)        
        +on(1,2,3,4,5,6,u133=0,v133=0,w133=0);
     
Cellvh u112,v112,w112;
problem Cellpro112([u112,v112,w112],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(u112,v112,w112,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
        //三个均匀化常数的积分      
        -int3d(plateCell)((kc44-valhomoC1212)*vv)
        //一阶单胞函数解作为伪位移
        -int3d(plateCell)(Cstrain(u12,v12,w12,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu)
        -int3d(plateCell)(Cstrain(u12,v12,w12,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv)
        -int3d(plateCell)(Cstrain(u12,v12,w12,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww)
        //虚位移作为伪位移
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*u12)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*v12)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*w12)        
        +on(1,2,3,4,5,6,u112=0,v112=0,w112=0);
    
Cellvh u123,v123,w123;
problem Cellpro123([u123,v123,w123],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(u123,v123,w123,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
        //三个均匀化常数的积分        
        //一阶单胞函数解作为伪位移
        -int3d(plateCell)(Cstrain(u23,v23,w23,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu)
        -int3d(plateCell)(Cstrain(u23,v23,w23,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv)
        -int3d(plateCell)(Cstrain(u23,v23,w23,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww)
        //虚位移作为伪位移
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*u23)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*v23)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*w23)        
        +on(1,2,3,4,5,6,u123=0,v123=0,w123=0);
    
Cellvh u131,v131,w131;
problem Cellpro131([u131,v131,w131],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(u131,v131,w131,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
        //三个均匀化常数的积分      
        -int3d(plateCell)((kc66-valhomoC3131)*ww)
        //一阶单胞函数解作为伪位移
        -int3d(plateCell)(Cstrain(u31,v31,w31,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu)
        -int3d(plateCell)(Cstrain(u31,v31,w31,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv)
        -int3d(plateCell)(Cstrain(u31,v31,w31,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww)
        //虚位移作为伪位移
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*u31)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*v31)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*w31)        
        +on(1,2,3,4,5,6,u131=0,v131=0,w131=0);
     

//b.以2开头的六个二阶单胞函数
Cellvh u211,v211,w211;
problem Cellpro211([u211,v211,w211],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(u211,v211,w211,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
        //三个均匀化常数的积分      
        -int3d(plateCell)((kc21-valhomoC2211)*vv)
        //一阶单胞函数解作为伪位移
        -int3d(plateCell)(Cstrain(u11,v11,w11,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu)
        -int3d(plateCell)(Cstrain(u11,v11,w11,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv)
        -int3d(plateCell)(Cstrain(u11,v11,w11,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww)
        //虚位移作为伪位移
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*u11)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*v11)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*w11)       
        +on(1,2,3,4,5,6,u211=0,v211=0,w211=0);
     
Cellvh u222,v222,w222;
problem Cellpro222([u222,v222,w222],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(u222,v222,w222,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
        //三个均匀化常数的积分      
        -int3d(plateCell)((kc22-valhomoC2222)*vv)
        //一阶单胞函数解作为伪位移
        -int3d(plateCell)(Cstrain(u22,v22,w22,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu)
        -int3d(plateCell)(Cstrain(u22,v22,w22,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv)
        -int3d(plateCell)(Cstrain(u22,v22,w22,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww)
        //虚位移作为伪位移
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*u22)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*v22)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*w22)        
        +on(1,2,3,4,5,6,u222=0,v222=0,w222=0);
     
Cellvh u233,v233,w233;
problem Cellpro233([u233,v233,w233],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(u233,v233,w233,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
        //三个均匀化常数的积分      
        -int3d(plateCell)((kc23-valhomoC2233)*vv)
        //一阶单胞函数解作为伪位移
        -int3d(plateCell)(Cstrain(u33,v33,w33,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu)
        -int3d(plateCell)(Cstrain(u33,v33,w33,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv)
        -int3d(plateCell)(Cstrain(u33,v33,w33,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww)
        //虚位移作为伪位移
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*u33)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*v33)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*w33)        
        +on(1,2,3,4,5,6,u233=0,v233=0,w233=0);
    
Cellvh u212,v212,w212;
problem Cellpro212([u212,v212,w212],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(u212,v212,w212,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
        //三个均匀化常数的积分      
        -int3d(plateCell)((kc44-valhomoC1212)*uu)
        //一阶单胞函数解作为伪位移
        -int3d(plateCell)(Cstrain(u12,v12,w12,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu)
        -int3d(plateCell)(Cstrain(u12,v12,w12,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv)
        -int3d(plateCell)(Cstrain(u12,v12,w12,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww)
        //虚位移作为伪位移
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*u12)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*v12)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*w12)        
        +on(1,2,3,4,5,6,u212=0,v212=0,w212=0);
    
Cellvh u223,v223,w223;
problem Cellpro223([u223,v223,w223],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(u223,v223,w223,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
        //三个均匀化常数的积分      
        -int3d(plateCell)((kc55-valhomoC2323)*ww)
        //一阶单胞函数解作为伪位移
        -int3d(plateCell)(Cstrain(u23,v23,w23,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu)
        -int3d(plateCell)(Cstrain(u23,v23,w23,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv)
        -int3d(plateCell)(Cstrain(u23,v23,w23,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww)
        //虚位移作为伪位移
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*u23)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*v23)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*w23)        
        +on(1,2,3,4,5,6,u223=0,v223=0,w223=0);
     
Cellvh u231,v231,w231;
problem Cellpro231([u231,v231,w231],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(u231,v231,w231,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
        //三个均匀化常数的积分      
        //一阶单胞函数解作为伪位移
        -int3d(plateCell)(Cstrain(u31,v31,w31,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu)
        -int3d(plateCell)(Cstrain(u31,v31,w31,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv)
        -int3d(plateCell)(Cstrain(u31,v31,w31,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww)
        //虚位移作为伪位移
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*u31)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*v31)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*w31)       
        +on(1,2,3,4,5,6,u231=0,v231=0,w231=0);     

//c.以3开头的六个二阶单胞函数
Cellvh u311,v311,w311;
problem Cellpro311([u311,v311,w311],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(u311,v311,w311,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
        //三个均匀化常数的积分      
        -int3d(plateCell)((kc31-valhomoC3311)*ww)
        //一阶单胞函数解作为伪位移
        -int3d(plateCell)(Cstrain(u11,v11,w11,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu)
        -int3d(plateCell)(Cstrain(u11,v11,w11,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv)
        -int3d(plateCell)(Cstrain(u11,v11,w11,alpha3,R1,R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww)
        //虚位移作为伪位移
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*u11)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*v11)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*w11)        
        +on(1,2,3,4,5,6,u311=0,v311=0,w311=0);
    
Cellvh u322,v322,w322;
problem Cellpro322([u322,v322,w322],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(u322,v322,w322,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
        //三个均匀化常数的积分      
        -int3d(plateCell)((kc32-valhomoC3322)*ww)
        //一阶单胞函数解作为伪位移
        -int3d(plateCell)(Cstrain(u22,v22,w22,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu)
        -int3d(plateCell)(Cstrain(u22,v22,w22,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv)
        -int3d(plateCell)(Cstrain(u22,v22,w22,alpha3,R1,R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww)
        //虚位移作为伪位移
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*u22)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*v22)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*w22)        
        +on(1,2,3,4,5,6,u322=0,v322=0,w322=0);
    
Cellvh u333,v333,w333;
problem Cellpro333([u333,v333,w333],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(u333,v333,w333,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
        //三个均匀化常数的积分      
        -int3d(plateCell)((kc33-valhomoC3333)*ww)
        //一阶单胞函数解作为伪位移
        -int3d(plateCell)(Cstrain(u33,v33,w33,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu)
        -int3d(plateCell)(Cstrain(u33,v33,w33,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv)
        -int3d(plateCell)(Cstrain(u33,v33,w33,alpha3,R1,R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww)
        //虚位移作为伪位移
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*u33)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*v33)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*w33)        
        +on(1,2,3,4,5,6,u333=0,v333=0,w333=0);
    
Cellvh u312,v312,w312;
problem Cellpro312([u312,v312,w312],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(u312,v312,w312,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
        //三个均匀化常数的积分      
        //一阶单胞函数解作为伪位移
        -int3d(plateCell)(Cstrain(u12,v12,w12,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu)
        -int3d(plateCell)(Cstrain(u12,v12,w12,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv)
        -int3d(plateCell)(Cstrain(u12,v12,w12,alpha3,R1,R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww)
        //虚位移作为伪位移
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*u12)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*v12)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*w12)        
        +on(1,2,3,4,5,6,u312=0,v312=0,w312=0);
    
Cellvh u323,v323,w323;
problem Cellpro323([u323,v323,w323],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(u323,v323,w323,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
        //三个均匀化常数的积分      
        -int3d(plateCell)((kc55-valhomoC2323)*vv)
        //一阶单胞函数解作为伪位移
        -int3d(plateCell)(Cstrain(u23,v23,w23,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu)
        -int3d(plateCell)(Cstrain(u23,v23,w23,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv)
        -int3d(plateCell)(Cstrain(u23,v23,w23,alpha3,R1,R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww)
        //虚位移作为伪位移
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*u23)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*v23)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*w23)        
        +on(1,2,3,4,5,6,u323=0,v323=0,w323=0);
     
Cellvh u331,v331,w331;
problem Cellpro331([u331,v331,w331],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(u331,v331,w331,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
        //三个均匀化常数的积分      
        -int3d(plateCell)((kc66-valhomoC3131)*uu)
        //一阶单胞函数解作为伪位移
        -int3d(plateCell)(Cstrain(u31,v31,w31,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu)
        -int3d(plateCell)(Cstrain(u31,v31,w31,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv)
        -int3d(plateCell)(Cstrain(u31,v31,w31,alpha3,R1,R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww)
        //虚位移作为伪位移
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*u31)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*v31)
        +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*w31)        
        +on(1,2,3,4,5,6,u331=0,v331=0,w331=0);
		
//位移中的温度导数项单胞函数
real valhomobeta11, valhomobeta22, valhomobeta33;
Cellvh Hu1,Hv1,Hw1;
problem CellH1([Hu1, Hv1, Hw1], [uu, vv, ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(Hu1, Hv1, Hw1, alpha3, R1, R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
        +int3d(plateCell)((material(ba,bb,bc,RHT)-valhomobeta11)*uu)
        +int3d(plateCell)(Cstrain(uP, vP, wP, alpha3, R1, R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu)
        +int3d(plateCell)(Cstrain(uP, vP, wP, alpha3, R1, R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv)
		+int3d(plateCell)(Cstrain(uP, vP, wP, alpha3, R1, R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww)
        -int3d(plateCell)(Cstrain(uu, vv, ww, alpha3, R1, R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uP)
        -int3d(plateCell)(Cstrain(uu, vv, ww, alpha3, R1, R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vP)
		-int3d(plateCell)(Cstrain(uu, vv, ww, alpha3, R1, R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*wP)
        -int3d(plateCell)(material(ba,bb,bc,RHT)*(dx(uu)/(R1+alpha3)+dy(vv)/(R2+alpha3)+dz(ww))*M1)
        +on(1, 2, 3, 4, 5, 6, Hu1=0, Hv1=0, Hw1=0);
		
Cellvh Hu2,Hv2,Hw2;	
problem CellH2([Hu2, Hv2, Hw2], [uu, vv, ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(Hu2, Hv2, Hw2, alpha3, R1, R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
        +int3d(plateCell)((material(ba,bb,bc,RHT)-valhomobeta22)*vv)
        +int3d(plateCell)(Cstrain(uP, vP, wP, alpha3, R1, R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu)
        +int3d(plateCell)(Cstrain(uP, vP, wP, alpha3, R1, R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv)
		+int3d(plateCell)(Cstrain(uP, vP, wP, alpha3, R1, R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww)
        -int3d(plateCell)(Cstrain(uu, vv, ww, alpha3, R1, R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uP)
        -int3d(plateCell)(Cstrain(uu, vv, ww, alpha3, R1, R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vP)
		-int3d(plateCell)(Cstrain(uu, vv, ww, alpha3, R1, R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*wP)
        -int3d(plateCell)(material(ba,bb,bc,RHT)*(dx(uu)/(R1+alpha3)+dy(vv)/(R2+alpha3)+dz(ww))*M2)
        +on(1, 2, 3, 4, 5, 6, Hu2=0, Hv2=0, Hw2=0);
		
Cellvh Hu3,Hv3,Hw3;
problem CellH3([Hu3, Hv3, Hw3], [uu, vv, ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(Hu3, Hv3, Hw3, alpha3, R1, R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
        +int3d(plateCell)((material(ba,bb,bc,RHT)-valhomobeta33)*ww)
        +int3d(plateCell)(Cstrain(uP, vP, wP, alpha3, R1, R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu)
        +int3d(plateCell)(Cstrain(uP, vP, wP, alpha3, R1, R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv)
		+int3d(plateCell)(Cstrain(uP, vP, wP, alpha3, R1, R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww)
        -int3d(plateCell)(Cstrain(uu, vv, ww, alpha3, R1, R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uP)
        -int3d(plateCell)(Cstrain(uu, vv, ww, alpha3, R1, R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vP)
		-int3d(plateCell)(Cstrain(uu, vv, ww, alpha3, R1, R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*wP)
        -int3d(plateCell)(material(ba,bb,bc,RHT)*(dx(uu)/(R1+alpha3)+dy(vv)/(R2+alpha3)+dz(ww))*M3)
        +on(1, 2, 3, 4, 5, 6, Hu3=0, Hv3=0, Hw3=0);			

		
//热传导系数影响消除函数
real valhomoK11,valhomoK22,valhomoK33;
Cellvh M11;
problem CellM11(M11, v,solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(material(aa,ab,ac,RHT)*(dx(M11)/(R1+alpha3)*dx(v)/(R1+alpha3)+dy(M11)/(R2+alpha3)*dy(v)/(R2+alpha3)+dz(M11)*dz(v)))
        +int3d(plateCell)(valhomoK11*v)
		-int3d(plateCell)(material(aa,ab,ac,RHT)*v)
		+int3d(plateCell)(material(aa,ab,ac,RHT)*M1*dx(v)/(R1+alpha3))
		-int3d(plateCell)(material(aa,ab,ac,RHT)*dx(M1)/(R1+alpha3)*v)
        +on(1,2,3,4,5,6,M11=0);
		
Cellvh M22;
problem CellM22(M22, v,solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(material(aa,ab,ac,RHT)*(dx(M22)/(R1+alpha3)*dx(v)/(R1+alpha3)+dy(M22)/(R2+alpha3)*dy(v)/(R2+alpha3)+dz(M22)*dz(v)))
        +int3d(plateCell)(valhomoK22*v)
		-int3d(plateCell)(material(aa,ab,ac,RHT)*v)
		+int3d(plateCell)(material(aa,ab,ac,RHT)*M2*dy(v)/(R2+alpha3))
		-int3d(plateCell)(material(aa,ab,ac,RHT)*dy(M2)/(R2+alpha3)*v)
        +on(1,2,3,4,5,6,M22=0);
		
Cellvh M33;
problem CellM33(M33, v,solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(material(aa,ab,ac,RHT)*(dx(M33)/(R1+alpha3)*dx(v)/(R1+alpha3)+dy(M33)/(R2+alpha3)*dy(v)/(R2+alpha3)+dz(M33)*dz(v)))
        +int3d(plateCell)(valhomoK33*v)
		-int3d(plateCell)(material(aa,ab,ac,RHT)*v)
		+int3d(plateCell)(material(aa,ab,ac,RHT)*M3*dz(v))
		-int3d(plateCell)(material(aa,ab,ac,RHT)*dz(M3)*v)
        +on(1,2,3,4,5,6,M33=0);		
		
Cellvh M12;
problem CellM12(M12, v,solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(material(aa,ab,ac,RHT)*(dx(M12)/(R1+alpha3)*dx(v)/(R1+alpha3)+dy(M12)/(R2+alpha3)*dy(v)/(R2+alpha3)+dz(M12)*dz(v)))
        +int3d(plateCell)(material(aa,ab,ac,RHT)*M2*dx(v)/(R1+alpha3))
		-int3d(plateCell)(material(aa,ab,ac,RHT)*dx(M2)/(R1+alpha3)*v)
        +on(1,2,3,4,5,6,M12=0);
		
Cellvh M21;
problem CellM21(M21, v,solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(material(aa,ab,ac,RHT)*(dx(M21)/(R1+alpha3)*dx(v)/(R1+alpha3)+dy(M21)/(R2+alpha3)*dy(v)/(R2+alpha3)+dz(M21)*dz(v)))
        +int3d(plateCell)(material(aa,ab,ac,RHT)*M1*dy(v)/(R2+alpha3))
		-int3d(plateCell)(material(aa,ab,ac,RHT)*dy(M1)/(R2+alpha3)*v)
        +on(1,2,3,4,5,6,M21=0);		
		
Cellvh M23;
problem CellM23(M23, v,solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(material(aa,ab,ac,RHT)*(dx(M23)/(R1+alpha3)*dx(v)/(R1+alpha3)+dy(M23)/(R2+alpha3)*dy(v)/(R2+alpha3)+dz(M23)*dz(v)))
        +int3d(plateCell)(material(aa,ab,ac,RHT)*M3*dy(v)/(R2+alpha3))
		-int3d(plateCell)(material(aa,ab,ac,RHT)*dy(M3)/(R2+alpha3)*v)
        +on(1,2,3,4,5,6,M23=0);
		
Cellvh M32;
problem CellM32(M32, v,solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(material(aa,ab,ac,RHT)*(dx(M32)/(R1+alpha3)*dx(v)/(R1+alpha3)+dy(M32)/(R2+alpha3)*dy(v)/(R2+alpha3)+dz(M32)*dz(v)))
        +int3d(plateCell)(material(aa,ab,ac,RHT)*M2*dz(v))
		-int3d(plateCell)(material(aa,ab,ac,RHT)*dz(M2)*v)
        +on(1,2,3,4,5,6,M32=0);		
		
Cellvh M31;
problem CellM31(M31, v,solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(material(aa,ab,ac,RHT)*(dx(M31)/(R1+alpha3)*dx(v)/(R1+alpha3)+dy(M31)/(R2+alpha3)*dy(v)/(R2+alpha3)+dz(M31)*dz(v)))
        +int3d(plateCell)(material(aa,ab,ac,RHT)*M1*dz(v))
		-int3d(plateCell)(material(aa,ab,ac,RHT)*dz(M1)*v)
        +on(1,2,3,4,5,6,M31=0);	

Cellvh M13;
problem CellM13(M13, v,solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(material(aa,ab,ac,RHT)*(dx(M13)/(R1+alpha3)*dx(v)/(R1+alpha3)+dy(M13)/(R2+alpha3)*dy(v)/(R2+alpha3)+dz(M13)*dz(v)))
        +int3d(plateCell)(material(aa,ab,ac,RHT)*M3*dx(v)/(R1+alpha3))
		-int3d(plateCell)(material(aa,ab,ac,RHT)*dx(M3)/(R1+alpha3)*v)
        +on(1,2,3,4,5,6,M13=0);
		
//相比于薄板，双曲扁壳由于单胞函数的拟周期特性产生的新的单胞函数
//力学问题
//------------------------------------
real dx1ValHomoC1111, dx2ValHomoC1111, dx3ValHomoC1111;
real dx1ValHomoC1122, dx2ValHomoC1122, dx3ValHomoC1122;
real dx1ValHomoC1133, dx2ValHomoC1133, dx3ValHomoC1133;
real dx1ValHomoC2222, dx2ValHomoC2222, dx3ValHomoC2222;
real dx1ValHomoC2233, dx2ValHomoC2233, dx3ValHomoC2233;
real dx1ValHomoC3333, dx2ValHomoC3333, dx3ValHomoC3333;
real dx1ValHomoC1212, dx2ValHomoC1212, dx3ValHomoC1212;
real dx1ValHomoC2323, dx2ValHomoC2323, dx3ValHomoC2323;
real dx1ValHomoC3131, dx2ValHomoC3131, dx3ValHomoC3131;
//------------------------------------
Cellvh D1111, D1122, D1133, D1112, D1123, D1131;  
Cellvh D2211, D2222, D2233, D2212, D2223, D2231;  
Cellvh D3311, D3322, D3333, D3312, D3323, D3331;
Cellvh D1211, D1222, D1233, D1212, D1223, D1231;
Cellvh D2311, D2322, D2333, D2312, D2323, D2331;
Cellvh D3111, D3122, D3133, D3112, D3123, D3131;
//------------------------------------
Cellvh dx111sita11, dx211sita12, dx311sita13, dx111sita21, dx211sita22, dx311sita23, dx111sita31, dx211sita32, dx311sita33;//u11,v11
Cellvh dx122sita11, dx222sita12, dx322sita13, dx122sita21, dx222sita22, dx322sita23, dx122sita31, dx222sita32, dx322sita33;//u22,v22
Cellvh dx133sita11, dx233sita12, dx333sita13, dx133sita21, dx233sita22, dx333sita23, dx133sita31, dx233sita32, dx333sita33;//u33,v33
Cellvh dx112sita11, dx212sita12, dx312sita13, dx112sita21, dx212sita22, dx312sita23, dx112sita31, dx212sita32, dx312sita33;//u12,v12
Cellvh dx123sita11, dx223sita12, dx323sita13, dx123sita21, dx223sita22, dx323sita23, dx123sita31, dx223sita32, dx323sita33;//u23,v23
Cellvh dx131sita11, dx231sita12, dx331sita13, dx131sita21, dx231sita22, dx331sita23, dx131sita31, dx231sita32, dx331sita33;//u31,v31

Cellvh Wu11,Wv11,Ww11;
problem CellproW11([Wu11,Wv11,Ww11],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
      int3d(plateCell)(Cstrain(Wu11,Wv11,Ww11,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
      +int3d(plateCell)(dx1ValHomoC1111*uu+dx2ValHomoC1122*vv+dx3ValHomoC1133*ww)
	  +int3d(plateCell)(valhomoC1133*ww/(R1+alpha3)+valhomoC1133*ww/(R2+alpha3))
	  //psi1(H2H3)=0,psi2(H1H3)=0,psi3(H1H2)=1.
	  -int3d(plateCell)(kc13*ww/(R1+alpha3)+kc13*ww/(R2+alpha3))
	  -int3d(plateCell)(dx111sita11*uu+dx211sita12*uu+dx311sita13*uu+dx111sita21*vv+dx211sita22*vv+dx311sita23*vv+dx111sita31*ww+dx211sita32*ww+dx311sita33*ww)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D1111)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D1122)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D1133)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D1112)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D1112)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D1123)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D1131)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D1112)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D1123)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D1131)
+on(1,2,3,4,5,6,Wu11=0,Wv11=0,Ww11=0);

Cellvh Wu22,Wv22,Ww22;
problem CellproW22([Wu22,Wv22,Ww22],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
      int3d(plateCell)(Cstrain(Wu22,Wv22,Ww22,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
      +int3d(plateCell)(dx1ValHomoC1122*uu+dx2ValHomoC2222*vv+dx3ValHomoC2233*ww)
	  +int3d(plateCell)(valhomoC2233*ww/(R1+alpha3)+valhomoC2233*ww/(R2+alpha3))
	  //psi1(H2H3)=0,psi2(H1H3)=0,psi3(H1H2)=1.
	  -int3d(plateCell)(kc23*ww/(R1+alpha3)+kc23*ww/(R2+alpha3))
	  -int3d(plateCell)(dx122sita11*uu+dx222sita12*uu+dx322sita13*uu+dx122sita21*vv+dx222sita22*vv+dx322sita23*vv+dx122sita31*ww+dx222sita32*ww+dx322sita33*ww)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D2211)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D2222)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D2233)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D2212)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D2223)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D2231)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D2212)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D2223)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D2231)
+on(1,2,3,4,5,6,Wu22=0,Wv22=0,Ww22=0);

Cellvh Wu33,Wv33,Ww33;
problem CellproW33([Wu33,Wv33,Ww33],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
      int3d(plateCell)(Cstrain(Wu33,Wv33,Ww33,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
      +int3d(plateCell)(dx1ValHomoC1133*uu+dx2ValHomoC2233*vv+dx3ValHomoC3333*ww)
	  +int3d(plateCell)(valhomoC3333*ww/(R1+alpha3)+valhomoC3333*ww/(R2+alpha3))
	  //psi1(H2H3)=0,psi2(H1H3)=0,psi3(H1H2)=1.
	  -int3d(plateCell)(kc33*ww/(R1+alpha3)+kc33*ww/(R2+alpha3))
	  -int3d(plateCell)(dx133sita11*uu+dx233sita12*uu+dx333sita13*uu+dx133sita21*vv+dx233sita22*vv+dx333sita23*vv+dx133sita31*ww+dx233sita32*ww+dx333sita33*ww)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D3311)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D3322)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D3333)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D3312)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D3323)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D3331)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D3312)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D3323)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D3331)
+on(1,2,3,4,5,6,Wu33=0,Wv33=0,Ww33=0);

Cellvh Wu12,Wv12,Ww12;
problem CellproW12([Wu12,Wv12,Ww12],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
      int3d(plateCell)(Cstrain(Wu12,Wv12,Ww12,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
      +int3d(plateCell)(dx2ValHomoC1212*uu+dx1ValHomoC1212*vv)
	  //psi1(H2H3)=0,psi2(H1H3)=0,psi3(H1H2)=1.
	  -int3d(plateCell)(dx112sita11*uu+dx212sita12*uu+dx312sita13*uu+dx112sita21*vv+dx212sita22*vv+dx312sita23*vv+dx112sita31*ww+dx212sita32*ww+dx312sita33*ww)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D1211)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D1222)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D1233)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D1212)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D1223)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D1231)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D1212)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D1223)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D1231)
+on(1,2,3,4,5,6,Wu12=0,Wv12=0,Ww12=0);

Cellvh Wu23,Wv23,Ww23;
problem CellproW23([Wu23,Wv23,Ww23],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
      int3d(plateCell)(Cstrain(Wu23,Wv23,Ww23,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
      +int3d(plateCell)(dx3ValHomoC2323*vv+dx2ValHomoC2323*ww)
	  +int3d(plateCell)(valhomoC2323*vv/(R1+alpha3)+valhomoC2323*vv/(R2+alpha3))
	  //psi1(H2H3)=0,psi2(H1H3)=0,psi3(H1H2)=1.	  
	  -int3d(plateCell)(kc55*vv/(R1+alpha3)+kc55*vv/(R2+alpha3))
	  -int3d(plateCell)(dx123sita11*uu+dx223sita12*uu+dx323sita13*uu+dx123sita21*vv+dx223sita22*vv+dx323sita23*vv+dx123sita31*ww+dx223sita32*ww+dx323sita33*ww)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D2311)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D2322)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D2333)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D2312)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D2323)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D2331)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D2312)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D2323)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D2331)
+on(1,2,3,4,5,6,Wu23=0,Wv23=0,Ww23=0);

Cellvh Wu31,Wv31,Ww31;
problem CellproW31([Wu31,Wv31,Ww31],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
      int3d(plateCell)(Cstrain(Wu31,Wv31,Ww31,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
      +int3d(plateCell)(dx3ValHomoC3131*uu+dx1ValHomoC3131*ww)
	  +int3d(plateCell)(valhomoC3131*uu/(R1+alpha3)+valhomoC3131*uu/(R2+alpha3))
	  //psi1(H2H3)=0,psi2(H1H3)=0,psi3(H1H2)=1.	  
	  -int3d(plateCell)(kc66*uu/(R1+alpha3)+kc66*uu/(R2+alpha3))
	  -int3d(plateCell)(dx131sita11*uu+dx231sita12*uu+dx331sita13*uu+dx131sita21*vv+dx231sita22*vv+dx331sita23*vv+dx131sita31*ww+dx231sita32*ww+dx331sita33*ww)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D3111)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D3122)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D3133)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D3112)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D3123)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D3131)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D3112)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D3123)
	  +int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*D3131)
+on(1,2,3,4,5,6,Wu31=0,Wv31=0,Ww31=0);

//力学问题二阶单胞函数分离后需要添加的新的二阶单胞函数
Cellvh ZWu11,ZWv11,ZWw11;
problem CellproZW11([ZWu11,ZWv11,ZWw11],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
      int3d(plateCell)(Cstrain(ZWu11,ZWv11,ZWw11,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
      +int3d(plateCell)(kc11*ww/(R1+alpha3)-valhomoC1111*ww/(R1+alpha3))
	  +int3d(plateCell)(kc21*ww/(R2+alpha3)-valhomoC2211*ww/(R2+alpha3))
	  +int3d(plateCell)(Cstrain(u11,v11,w11,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww/(R1+alpha3))
	  +int3d(plateCell)(Cstrain(u11,v11,w11,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww/(R2+alpha3))
	  -int3d(plateCell)(Cstrain(u11,v11,w11,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu/(R1+alpha3))
	  -int3d(plateCell)(Cstrain(u11,v11,w11,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv/(R2+alpha3))	  
+on(1,2,3,4,5,6,ZWu11=0,ZWv11=0,ZWw11=0);

Cellvh ZWu22,ZWv22,ZWw22;
problem CellproZW22([ZWu22,ZWv22,ZWw22],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
      int3d(plateCell)(Cstrain(ZWu22,ZWv22,ZWw22,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
      +int3d(plateCell)(kc12*ww/(R1+alpha3)-valhomoC1122*ww/(R1+alpha3))
	  +int3d(plateCell)(kc22*ww/(R2+alpha3)-valhomoC2222*ww/(R2+alpha3))
	  +int3d(plateCell)(Cstrain(u22,v22,w22,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww/(R1+alpha3))
	  +int3d(plateCell)(Cstrain(u22,v22,w22,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww/(R2+alpha3))
	  -int3d(plateCell)(Cstrain(u22,v22,w22,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu/(R1+alpha3))
	  -int3d(plateCell)(Cstrain(u22,v22,w22,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv/(R2+alpha3))
+on(1,2,3,4,5,6,ZWu22=0,ZWv22=0,ZWw22=0);

Cellvh ZWu33,ZWv33,ZWw33;
problem CellproZW33([ZWu33,ZWv33,ZWw33],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
      int3d(plateCell)(Cstrain(ZWu33,ZWv33,ZWw33,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
      +int3d(plateCell)(kc13*ww/(R1+alpha3)-valhomoC1133*ww/(R1+alpha3))
	  +int3d(plateCell)(kc23*ww/(R2+alpha3)-valhomoC2233*ww/(R2+alpha3))
	  +int3d(plateCell)(Cstrain(u33,v33,w33,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww/(R1+alpha3))
	  +int3d(plateCell)(Cstrain(u33,v33,w33,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww/(R2+alpha3))
	  -int3d(plateCell)(Cstrain(u33,v33,w33,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu/(R1+alpha3))
	  -int3d(plateCell)(Cstrain(u33,v33,w33,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv/(R2+alpha3))
+on(1,2,3,4,5,6,ZWu33=0,ZWv33=0,ZWw33=0);

Cellvh ZWu12,ZWv12,ZWw12;
problem CellproZW12([ZWu12,ZWv12,ZWw12],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
      int3d(plateCell)(Cstrain(ZWu12,ZWv12,ZWw12,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
      +int3d(plateCell)(Cstrain(u12,v12,w12,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww/(R1+alpha3))
	  +int3d(plateCell)(Cstrain(u12,v12,w12,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww/(R2+alpha3))
	  -int3d(plateCell)(Cstrain(u12,v12,w12,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu/(R1+alpha3))
	  -int3d(plateCell)(Cstrain(u12,v12,w12,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv/(R2+alpha3))
+on(1,2,3,4,5,6,ZWu12=0,ZWv12=0,ZWw12=0);	

Cellvh ZWu23,ZWv23,ZWw23;
problem CellproZW23([ZWu23,ZWv23,ZWw23],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
      int3d(plateCell)(Cstrain(ZWu23,ZWv23,ZWw23,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
      +int3d(plateCell)(Cstrain(u23,v23,w23,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww/(R1+alpha3))
	  +int3d(plateCell)(Cstrain(u23,v23,w23,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww/(R2+alpha3))
	  -int3d(plateCell)(kc55*vv/(R2+alpha3)-valhomoC2323*vv/(R2+alpha3))	  
	  -int3d(plateCell)(Cstrain(u23,v23,w23,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu/(R1+alpha3))
	  -int3d(plateCell)(Cstrain(u23,v23,w23,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv/(R2+alpha3))
+on(1,2,3,4,5,6,ZWu23=0,ZWv23=0,ZWw23=0);

Cellvh ZWu31,ZWv31,ZWw31;
problem CellproZW31([ZWu31,ZWv31,ZWw31],[uu,vv,ww],solver=GMRES,eps=1.0e-10)=
      int3d(plateCell)(Cstrain(ZWu31,ZWv31,ZWw31,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
      +int3d(plateCell)(Cstrain(u31,v31,w31,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww/(R1+alpha3))
	  +int3d(plateCell)(Cstrain(u31,v31,w31,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww/(R2+alpha3))
	  -int3d(plateCell)(kc66*uu/(R1+alpha3)-valhomoC3131*uu/(R1+alpha3))	  
	  -int3d(plateCell)(Cstrain(u31,v31,w31,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu/(R1+alpha3))
	  -int3d(plateCell)(Cstrain(u31,v31,w31,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv/(R2+alpha3))
+on(1,2,3,4,5,6,ZWu31=0,ZWv31=0,ZWw31=0);	

//热弹性问题二阶单胞函数   
Cellvh E11, E22, E33, E12, E23, E31; 
Cellvh dx1sita11, dx2sita12, dx3sita13, dx1sita21, dx2sita22, dx3sita23, dx1sita31, dx2sita32, dx3sita33;//Q1,Q2
real dx1ValHomobeta11, dx2ValHomobeta22, dx3ValHomobeta33;
Cellvh Q1,Q2,Q3;
problem CellQ([Q1, Q2, Q3], [uu, vv, ww])=
        int3d(plateCell)(Cstrain(Q1,Q2,Q3,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
       +int3d(plateCell)(dx1sita11*uu+dx2sita12*uu+dx3sita13*uu+dx1sita21*vv+dx2sita22*vv+dx3sita23*vv+dx1sita31*ww+dx2sita32*ww+dx3sita33*ww)
	   +int3d(plateCell)(material(ba,bb,bc,RHT)*ww/(R1+alpha3)+material(ba,bb,bc,RHT)*ww/(R2+alpha3))
	   -int3d(plateCell)(valhomobeta33*ww/(R1+alpha3)+valhomobeta33*ww/(R2+alpha3))
	   -int3d(plateCell)(dx1ValHomobeta11*uu+dx2ValHomobeta22*vv+dx3ValHomobeta33*vv)	   
	   -int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*E11)
       -int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*E22)
	   -int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*E33)
       -int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*E12)
       -int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*E23)
	   -int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*E31)
	   -int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*E12)
       -int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*E23)
	   -int3d(plateCell)(Cstrain(uu,vv,ww,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*E31)
       +on(1, 2, 3, 4, 5, 6, Q1=0, Q2=0, Q3=0);
	   
//热弹性问题二阶单胞函数分离后需要添加的新的二阶单胞函数
Cellvh ZQ1,ZQ2,ZQ3;
problem CellZQ([ZQ1, ZQ2, ZQ3], [uu, vv, ww])=
        int3d(plateCell)(Cstrain(ZQ1,ZQ2,ZQ3,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu,vv,ww,alpha3,R1,R2))
       +int3d(plateCell)(Cstrain(uP,vP,wP,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*uu/(R1+alpha3))
	   +int3d(plateCell)(Cstrain(uP,vP,wP,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*vv/(R2+alpha3))
	   -int3d(plateCell)(material(ba,bb,bc,RHT)*ww/(R1+alpha3)-valhomobeta11*ww/(R1+alpha3))
	   -int3d(plateCell)(material(ba,bb,bc,RHT)*ww/(R2+alpha3)-valhomobeta22*ww/(R2+alpha3))
	   -int3d(plateCell)(Cstrain(uP,vP,wP,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww/(R1+alpha3))
	   -int3d(plateCell)(Cstrain(uP,vP,wP,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*ww/(R2+alpha3))
       +on(1, 2, 3, 4, 5, 6, ZQ1=0, ZQ2=0, ZQ3=0);	     
	   
//热传导二阶单胞问题
Cellvh RR1, dx1kijDM1, dx2kijDM1, dx3kijDM1, dx1M1, dx2M1, dx3M1;
//dx1N1, dx2N1为一阶单胞函数N1关于两个方向宏观变量求偏导数
//dx1AijDN1, dx2AijDN1为一阶单胞函数的微观变量导数再关于宏观变量求导数
//特别注意关于y的导数时必须乘以1/r这个拟周期宏观变量
real dx1ValHomok11;//均匀化系数在固定点的值
problem CellRR1(RR1, v) = 
        int3d(plateCell)(material(aa,ab,ac,RHT)*dx(RR1)/(R1+alpha3)*dx(v)/(R1+alpha3)+material(aa,ab,ac,RHT)*dy(RR1)/(R2+alpha3)*dy(v)/(R2+alpha3)+material(aa,ab,ac,RHT)*dz(RR1)*dz(v))
       +int3d(plateCell)(dx1ValHomok11*v)
       -int3d(plateCell)(dx1kijDM1*v)
       -int3d(plateCell)(dx2kijDM1*v)
	   -int3d(plateCell)(dx3kijDM1*v)
       +int3d(plateCell)(material(aa,ab,ac,RHT)*dx1M1*dx(v)/(R1+alpha3))
       +int3d(plateCell)(material(aa,ab,ac,RHT)*dx2M1*dy(v)/(R2+alpha3))
	   +int3d(plateCell)(material(aa,ab,ac,RHT)*dx3M1*dz(v))
	   +on(1,2,3,4,5,6, RR1=0);	

Cellvh RR2, dx1kijDM2, dx2kijDM2, dx3kijDM2, dx1M2, dx2M2, dx3M2;
real dx2ValHomok22;
problem CellRR2(RR2, v) = 
        int3d(plateCell)(material(aa,ab,ac,RHT)*dx(RR2)/(R1+alpha3)*dx(v)/(R1+alpha3)+material(aa,ab,ac,RHT)*dy(RR2)/(R2+alpha3)*dy(v)/(R2+alpha3)+material(aa,ab,ac,RHT)*dz(RR2)*dz(v))
       +int3d(plateCell)(dx2ValHomok22*v)
       -int3d(plateCell)(dx1kijDM2*v)
       -int3d(plateCell)(dx2kijDM2*v)
	   -int3d(plateCell)(dx3kijDM2*v)
       +int3d(plateCell)(material(aa,ab,ac,RHT)*dx1M2*dx(v)/(R1+alpha3))
       +int3d(plateCell)(material(aa,ab,ac,RHT)*dx2M2*dy(v)/(R2+alpha3))
	   +int3d(plateCell)(material(aa,ab,ac,RHT)*dx3M2*dz(v))
	   +on(1,2,3,4,5,6, RR2=0);
	   
Cellvh RR3, dx1kijDM3, dx2kijDM3, dx3kijDM3, dx1M3, dx2M3, dx3M3;
real dx3ValHomok33;
problem CellRR3(RR3, v) = 
        int3d(plateCell)(material(aa,ab,ac,RHT)*dx(RR3)/(R1+alpha3)*dx(v)/(R1+alpha3)+material(aa,ab,ac,RHT)*dy(RR3)/(R2+alpha3)*dy(v)/(R2+alpha3)+material(aa,ab,ac,RHT)*dz(RR3)*dz(v))
       +int3d(plateCell)(dx3ValHomok33*v)
	   +int3d(plateCell)(valhomoK33*v/(R1+alpha3)+valhomoK33*v/(R2+alpha3))
	   -int3d(plateCell)(material(aa,ab,ac,RHT)*v/(R1+alpha3)+material(aa,ab,ac,RHT)*v/(R2+alpha3))
       -int3d(plateCell)(dx1kijDM3*v)
       -int3d(plateCell)(dx2kijDM3*v)
	   -int3d(plateCell)(dx3kijDM3*v)
       +int3d(plateCell)(material(aa,ab,ac,RHT)*dx1M3*dx(v)/(R1+alpha3))
       +int3d(plateCell)(material(aa,ab,ac,RHT)*dx2M3*dy(v)/(R2+alpha3))
	   +int3d(plateCell)(material(aa,ab,ac,RHT)*dx3M3*dz(v))
	   +on(1,2,3,4,5,6, RR3=0);	
	   
Cellvh ZRR1;
problem CellZRR1(ZRR1, v,solver=GMRES,eps=1.0e-10) = 
        int3d(plateCell)(material(aa,ab,ac,RHT)*dx(ZRR1)*dx(v)+material(aa,ab,ac,RHT)*dy(ZRR1)/(R2+alpha3)*dy(v)/(R2+alpha3)+material(aa,ab,ac,RHT)*dz(ZRR1)*dz(v))
       //-int3d(plateCell)(material(aa,ab,ac,RHT)*dx(M1)*v/(R2+alpha3))
       //-int3d(plateCell)(material(aa,ab,ac,RHT)*dy(M1)/(R2+alpha3)*v/(R2+alpha3))
	   -int3d(plateCell)(material(aa,ab,ac,RHT)*dz(M1)*v/(R1+alpha3))
	   -int3d(plateCell)(material(aa,ab,ac,RHT)*dz(M1)*v/(R2+alpha3))
	   +on(1,2,3,4,5,6, ZRR1=0);	

Cellvh ZRR2;
problem CellZRR2(ZRR2, v,solver=GMRES,eps=1.0e-10) = 
        int3d(plateCell)(material(aa,ab,ac,RHT)*dx(ZRR2)*dx(v)+material(aa,ab,ac,RHT)*dy(ZRR2)/(R2+alpha3)*dy(v)/(R2+alpha3)+material(aa,ab,ac,RHT)*dz(ZRR2)*dz(v))
       //-int3d(plateCell)(material(aa,ab,ac,RHT)*dx(M2)*v/(R2+alpha3))
       //-int3d(plateCell)(material(aa,ab,ac,RHT)*dy(M2)/(R2+alpha3)*v/(R2+alpha3))
	   -int3d(plateCell)(material(aa,ab,ac,RHT)*dz(M2)*v/(R1+alpha3))
	   -int3d(plateCell)(material(aa,ab,ac,RHT)*dz(M2)*v/(R2+alpha3))
	   +on(1,2,3,4,5,6, ZRR2=0);
	   
Cellvh ZRR3;
problem CellZRR3(ZRR3, v,solver=GMRES,eps=1.0e-10) = 
        int3d(plateCell)(material(aa,ab,ac,RHT)*dx(ZRR3)*dx(v)+material(aa,ab,ac,RHT)*dy(ZRR3)/(R2+alpha3)*dy(v)/(R2+alpha3)+material(aa,ab,ac,RHT)*dz(ZRR3)*dz(v))
       +int3d(plateCell)(valhomoK33*v/(R1+alpha3))
	   +int3d(plateCell)(valhomoK33*v/(R2+alpha3))
	   -int3d(plateCell)(material(aa,ab,ac,RHT)*v/(R1+alpha3))
	   -int3d(plateCell)(material(aa,ab,ac,RHT)*v/(R2+alpha3))
       //-int3d(plateCell)(material(aa,ab,ac,RHT)*dx(M3)*v/(R2+alpha3))
       //-int3d(plateCell)(material(aa,ab,ac,RHT)*dy(M3)/(R2+alpha3)*v/(R2+alpha3))
	   -int3d(plateCell)(material(aa,ab,ac,RHT)*dz(M3)*v/(R1+alpha3))
	   -int3d(plateCell)(material(aa,ab,ac,RHT)*dz(M3)*v/(R2+alpha3))
	   +on(1,2,3,4,5,6, ZRR3=0);

	   
//动力学方程中密度影响消除单胞函数	
real valhomorho;
Cellvh Fu1, Fv1, Fw1;
problem CellF1([Fu1, Fv1, Fw1], [uu, vv, ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(Fu1,Fv1,Fw1,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
        +int3d(plateCell)((rho-valhomorho)*uu)                      
        +on(1, 2, 3, 4, 5, 6, Fu1=0, Fv1=0, Fw1=0);
		
Cellvh Fu2, Fv2, Fw2;
problem CellF2([Fu2, Fv2, Fw2], [uu, vv, ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(Fu2,Fv2,Fw2,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
        +int3d(plateCell)((rho-valhomorho)*vv)                      
        +on(1, 2, 3, 4, 5, 6, Fu2=0, Fv2=0, Fw2=0); 
		
Cellvh Fu3, Fv3, Fw3;
problem CellF3([Fu3, Fv3, Fw3], [uu, vv, ww],solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(Cstrain(Fu3,Fv3,Fw3,alpha3,R1,R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
        +int3d(plateCell)((rho-valhomorho)*ww)                      
        +on(1, 2, 3, 4, 5, 6, Fu3=0, Fv3=0, Fw3=0); 

//密度乘以热容影响消除单胞函数
Cellvh S;
real valhomoS;
problem CellS(S,v,solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(material(aa,ab,ac,RHT)*(dx(S)/(R1+alpha3)*dx(v)/(R1+alpha3)+dy(S)/(R2+alpha3)*dy(v)/(R2+alpha3)+dz(S)*dz(v)))
        +int3d(plateCell)(material(pca,pcb,pcc,RHT)*v)
		-int3d(plateCell)(valhomoS*v)
		-int3d(plateCell)(material(da,db,dc,RHT)*(dx(uP)/(R1+alpha3)+dy(vP)/(R2+alpha3)+dz(wP))*v)
        +on(1,2,3,4,5,6,S=0);

//热模量乘以初始温度的影响消除单胞函数
real valhomodeta11, valhomodeta22, valhomodeta33; 
Cellvh G11;
problem CellG11(G11, v,solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(material(aa,ab,ac,RHT)*(dx(G11)/(R1+alpha3)*dx(v)/(R1+alpha3)+dy(G11)/(R2+alpha3)*dy(v)/(R2+alpha3)+dz(G11)*dz(v)))
        +int3d(plateCell)(valhomodeta11*v)
		-int3d(plateCell)(material(da,db,dc,RHT)*v)
		-int3d(plateCell)(material(da,db,dc,RHT)*(dx(u11)/(R1+alpha3)+dy(v11)/(R2+alpha3)+dz(w11))*v)
        +on(1,2,3,4,5,6,G11=0);
		
Cellvh G22;
problem CellG22(G22, v,solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(material(aa,ab,ac,RHT)*(dx(G22)/(R1+alpha3)*dx(v)/(R1+alpha3)+dy(G22)/(R2+alpha3)*dy(v)/(R2+alpha3)+dz(G22)*dz(v)))
        +int3d(plateCell)(valhomodeta22*v)
		-int3d(plateCell)(material(da,db,dc,RHT)*v)
		-int3d(plateCell)(material(da,db,dc,RHT)*(dx(u22)/(R1+alpha3)+dy(v22)/(R2+alpha3)+dz(w22))*v)
        +on(1,2,3,4,5,6,G22=0);
		
Cellvh G33;
problem CellG33(G33, v,solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(material(aa,ab,ac,RHT)*(dx(G33)/(R1+alpha3)*dx(v)/(R1+alpha3)+dy(G33)/(R2+alpha3)*dy(v)/(R2+alpha3)+dz(G33)*dz(v)))
        +int3d(plateCell)(valhomodeta33*v)
		-int3d(plateCell)(material(da,db,dc,RHT)*v)
		-int3d(plateCell)(material(da,db,dc,RHT)*(dx(u33)/(R1+alpha3)+dy(v33)/(R2+alpha3)+dz(w33))*v)
        +on(1,2,3,4,5,6,G33=0);
		
Cellvh G12;
problem CellG12(G12, v,solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(material(aa,ab,ac,RHT)*(dx(G12)/(R1+alpha3)*dx(v)/(R1+alpha3)+dy(G12)/(R2+alpha3)*dy(v)/(R2+alpha3)+dz(G12)*dz(v)))
        -int3d(plateCell)(material(da,db,dc,RHT)*(dx(u12)/(R1+alpha3)+dy(v12)/(R2+alpha3)+dz(w12))*v)
        +on(1,2,3,4,5,6,G12=0);	
		
Cellvh G23;
problem CellG23(G23, v,solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(material(aa,ab,ac,RHT)*(dx(G23)/(R1+alpha3)*dx(v)/(R1+alpha3)+dy(G23)/(R2+alpha3)*dy(v)/(R2+alpha3)+dz(G23)*dz(v)))
        -int3d(plateCell)(material(da,db,dc,RHT)*(dx(u23)/(R1+alpha3)+dy(v23)/(R2+alpha3)+dz(w23))*v)
        +on(1,2,3,4,5,6,G23=0);
		
Cellvh G31;
problem CellG31(G31, v,solver=GMRES,eps=1.0e-10)=
        int3d(plateCell)(material(aa,ab,ac,RHT)*(dx(G31)/(R1+alpha3)*dx(v)/(R1+alpha3)+dy(G31)/(R2+alpha3)*dy(v)/(R2+alpha3)+dz(G31)*dz(v)))
        -int3d(plateCell)(material(da,db,dc,RHT)*(dx(u31)/(R1+alpha3)+dy(v31)/(R2+alpha3)+dz(w31))*v)
        +on(1,2,3,4,5,6,G31=0);			   

//不同于传统柱坐标系的由于非线性产生的两种新的单胞函数	 
//添加d(T)*Cstrain对应的二阶单胞函数
Cellvh wu111, wv111, ww111;
problem CellProW111([wu111, wv111, ww111], [uu, vv, ww], solver=GMRES, eps=1.0e-10)=
        int3d(plateCell)(Cstrain(wu111, wv111, ww111, alpha3, R1, R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
	   +int3d(plateCell)(M1*Cstrain(uu, vv, ww, alpha3, R1, R2)'*C1(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66))
	   +int3d(plateCell)(M1*Cstrain(u11, v11, w11, alpha3, R1, R2)'*C(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
       +on(1, 2, 3, 4, 5, 6, wu111=0, wv111=0, ww111=0);

Cellvh wu112, wv112, ww112;
problem CellProW112([wu112, wv112, ww112], [uu, vv, ww], solver=GMRES, eps=1.0e-10)=
        int3d(plateCell)(Cstrain(wu112, wv112, ww112, alpha3, R1, R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
	   +int3d(plateCell)(M1*Cstrain(uu, vv, ww, alpha3, R1, R2)'*C4(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66))
	   +int3d(plateCell)(M1*Cstrain(u12, v12, w12, alpha3, R1, R2)'*C(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
       +on(1, 2, 3, 4, 5, 6, wu112=0, wv112=0, ww112=0);

Cellvh wu122, wv122, ww122;
problem CellProW122([wu122, wv122, ww122], [uu, vv, ww], solver=GMRES, eps=1.0e-10)=
        int3d(plateCell)(Cstrain(wu122, wv122, ww122, alpha3, R1, R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
	   +int3d(plateCell)(M1*Cstrain(uu, vv, ww, alpha3, R1, R2)'*C2(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66))
	   +int3d(plateCell)(M1*Cstrain(u22, v22, w22, alpha3, R1, R2)'*C(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
       +on(1, 2, 3, 4, 5, 6, wu122=0, wv122=0, ww122=0);
 
Cellvh wu133, wv133, ww133;
problem CellProW133([wu133, wv133, ww133], [uu, vv, ww], solver=GMRES, eps=1.0e-10)=
        int3d(plateCell)(Cstrain(wu133, wv133, ww133, alpha3, R1, R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
	   +int3d(plateCell)(M1*Cstrain(uu, vv, ww, alpha3, R1, R2)'*C3(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66))
	   +int3d(plateCell)(M1*Cstrain(u33, v33, w33, alpha3, R1, R2)'*C(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
       +on(1, 2, 3, 4, 5, 6, wu133=0, wv133=0, ww133=0);

Cellvh wu123, wv123, ww123;
problem CellProW123([wu123, wv123, ww123], [uu, vv, ww], solver=GMRES, eps=1.0e-10)=
        int3d(plateCell)(Cstrain(wu123, wv123, ww123, alpha3, R1, R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
	   +int3d(plateCell)(M1*Cstrain(uu, vv, ww, alpha3, R1, R2)'*C5(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66))
	   +int3d(plateCell)(M1*Cstrain(u23, v23, w23, alpha3, R1, R2)'*C(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
       +on(1, 2, 3, 4, 5, 6, wu123=0, wv123=0, ww123=0);

Cellvh wu131, wv131, ww131;
problem CellProW131([wu131, wv131, ww131], [uu, vv, ww], solver=GMRES, eps=1.0e-10)=
        int3d(plateCell)(Cstrain(wu131, wv131, ww131, alpha3, R1, R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
	   +int3d(plateCell)(M1*Cstrain(uu, vv, ww, alpha3, R1, R2)'*C6(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66))
	   +int3d(plateCell)(M1*Cstrain(u31, v31, w31, alpha3, R1, R2)'*C(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
       +on(1, 2, 3, 4, 5, 6, wu131=0, wv131=0, ww131=0);
	   
Cellvh wu211, wv211, ww211;
problem CellProW211([wu211, wv211, ww211], [uu, vv, ww], solver=GMRES, eps=1.0e-10)=
        int3d(plateCell)(Cstrain(wu211, wv211, ww211, alpha3, R1, R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
	   +int3d(plateCell)(M2*Cstrain(uu, vv, ww, alpha3, R1, R2)'*C1(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66))
	   +int3d(plateCell)(M2*Cstrain(u11, v11, w11, alpha3, R1, R2)'*C(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
       +on(1, 2, 3, 4, 5, 6, wu211=0, wv211=0, ww211=0);

Cellvh wu212, wv212, ww212;
problem CellProW212([wu212, wv212, ww212], [uu, vv, ww], solver=GMRES, eps=1.0e-10)=
        int3d(plateCell)(Cstrain(wu212, wv212, ww212, alpha3, R1, R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
	   +int3d(plateCell)(M2*Cstrain(uu, vv, ww, alpha3, R1, R2)'*C4(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66))
	   +int3d(plateCell)(M2*Cstrain(u12, v12, w12, alpha3, R1, R2)'*C(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
       +on(1, 2, 3, 4, 5, 6, wu212=0, wv212=0, ww212=0);

Cellvh wu222, wv222, ww222;
problem CellProW222([wu222, wv222, ww222], [uu, vv, ww], solver=GMRES, eps=1.0e-10)=
        int3d(plateCell)(Cstrain(wu222, wv222, ww222, alpha3, R1, R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
	   +int3d(plateCell)(M2*Cstrain(uu, vv, ww, alpha3, R1, R2)'*C2(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66))
	   +int3d(plateCell)(M2*Cstrain(u22, v22, w22, alpha3, R1, R2)'*C(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
       +on(1, 2, 3, 4, 5, 6, wu222=0, wv222=0, ww222=0);

Cellvh wu233, wv233, ww233;
problem CellProW233([wu233, wv233, ww233], [uu, vv, ww], solver=GMRES, eps=1.0e-10)=
        int3d(plateCell)(Cstrain(wu233, wv233, ww233, alpha3, R1, R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
	   +int3d(plateCell)(M2*Cstrain(uu, vv, ww, alpha3, R1, R2)'*C3(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66))
	   +int3d(plateCell)(M2*Cstrain(u33, v33, w33, alpha3, R1, R2)'*C(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
       +on(1, 2, 3, 4, 5, 6, wu233=0, wv233=0, ww233=0);

Cellvh wu223, wv223, ww223;
problem CellProW223([wu223, wv223, ww223], [uu, vv, ww], solver=GMRES, eps=1.0e-10)=
        int3d(plateCell)(Cstrain(wu223, wv223, ww223, alpha3, R1, R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
	   +int3d(plateCell)(M2*Cstrain(uu, vv, ww, alpha3, R1, R2)'*C5(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66))
	   +int3d(plateCell)(M2*Cstrain(u23, v23, w23, alpha3, R1, R2)'*C(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
       +on(1, 2, 3, 4, 5, 6, wu223=0, wv223=0, ww223=0);

Cellvh wu231, wv231, ww231;
problem CellProW231([wu231, wv231, ww231], [uu, vv, ww], solver=GMRES, eps=1.0e-10)=
        int3d(plateCell)(Cstrain(wu231, wv231, ww231, alpha3, R1, R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
	   +int3d(plateCell)(M2*Cstrain(uu, vv, ww, alpha3, R1, R2)'*C6(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66))
	   +int3d(plateCell)(M2*Cstrain(u31, v31, w31, alpha3, R1, R2)'*C(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
       +on(1, 2, 3, 4, 5, 6, wu231=0, wv231=0, ww231=0);	
	   
Cellvh wu311, wv311, ww311;
problem CellProW311([wu311, wv311, ww311], [uu, vv, ww], solver=GMRES, eps=1.0e-10)=
        int3d(plateCell)(Cstrain(wu311, wv311, ww311, alpha3, R1, R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
	   +int3d(plateCell)(M3*Cstrain(uu, vv, ww, alpha3, R1, R2)'*C1(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66))
	   +int3d(plateCell)(M3*Cstrain(u11, v11, w11, alpha3, R1, R2)'*C(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
       +on(1, 2, 3, 4, 5, 6, wu311=0, wv311=0, ww311=0);

Cellvh wu312, wv312, ww312;
problem CellProW312([wu312, wv312, ww312], [uu, vv, ww], solver=GMRES, eps=1.0e-10)=
        int3d(plateCell)(Cstrain(wu312, wv312, ww312, alpha3, R1, R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
	   +int3d(plateCell)(M3*Cstrain(uu, vv, ww, alpha3, R1, R2)'*C4(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66))
	   +int3d(plateCell)(M3*Cstrain(u12, v12, w12, alpha3, R1, R2)'*C(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
       +on(1, 2, 3, 4, 5, 6, wu312=0, wv312=0, ww312=0);

Cellvh wu322, wv322, ww322;
problem CellProW322([wu322, wv322, ww322], [uu, vv, ww], solver=GMRES, eps=1.0e-10)=
        int3d(plateCell)(Cstrain(wu322, wv322, ww322, alpha3, R1, R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
	   +int3d(plateCell)(M3*Cstrain(uu, vv, ww, alpha3, R1, R2)'*C2(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66))
	   +int3d(plateCell)(M3*Cstrain(u22, v22, w22, alpha3, R1, R2)'*C(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
       +on(1, 2, 3, 4, 5, 6, wu322=0, wv322=0, ww322=0);

Cellvh wu333, wv333, ww333;
problem CellProW333([wu333, wv333, ww333], [uu, vv, ww], solver=GMRES, eps=1.0e-10)=
        int3d(plateCell)(Cstrain(wu333, wv333, ww333, alpha3, R1, R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
	   +int3d(plateCell)(M3*Cstrain(uu, vv, ww, alpha3, R1, R2)'*C3(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66))
	   +int3d(plateCell)(M3*Cstrain(u33, v33, w33, alpha3, R1, R2)'*C(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
       +on(1, 2, 3, 4, 5, 6, wu333=0, wv333=0, ww333=0);

Cellvh wu323, wv323, ww323;
problem CellProW323([wu323, wv323, ww323], [uu, vv, ww], solver=GMRES, eps=1.0e-10)=
        int3d(plateCell)(Cstrain(wu323, wv323, ww323, alpha3, R1, R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
	   +int3d(plateCell)(M3*Cstrain(uu, vv, ww, alpha3, R1, R2)'*C5(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66))
	   +int3d(plateCell)(M3*Cstrain(u23, v23, w23, alpha3, R1, R2)'*C(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
       +on(1, 2, 3, 4, 5, 6, wu323=0, wv323=0, ww323=0);

Cellvh wu331, wv331, ww331;
problem CellProW331([wu331, wv331, ww331], [uu, vv, ww], solver=GMRES, eps=1.0e-10)=
        int3d(plateCell)(Cstrain(wu331, wv331, ww331, alpha3, R1, R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
	   +int3d(plateCell)(M3*Cstrain(uu, vv, ww, alpha3, R1, R2)'*C6(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66))
	   +int3d(plateCell)(M3*Cstrain(u31, v31, w31, alpha3, R1, R2)'*C(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
       +on(1, 2, 3, 4, 5, 6, wu331=0, wv331=0, ww331=0);	  
//添加d(T)*(T0-T)对应的二阶单胞函数  
Cellvh X11, X12, X13;
	problem CellX1([X11, X12, X13], [uu, vv, ww], solver=GMRES, eps=1.0e-10)=
        int3d(plateCell)(Cstrain(X11, X12, X13, alpha3, R1, R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
	   +int3d(plateCell)(M1*(material(bb,2*bc,0,RHT))*(dx(uu)/(R1+alpha3)+dy(vv)/(R2+alpha3)+dz(ww)))
	   +int3d(plateCell)(M1*Cstrain(uP, vP, wP, alpha3, R1, R2)'*C(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
       +on(1, 2, 3, 4, 5, 6, X11=0, X12=0, X13=0); 

Cellvh X21, X22, X23;
	problem CellX2([X21, X22, X23], [uu, vv, ww], solver=GMRES, eps=1.0e-10)=
        int3d(plateCell)(Cstrain(X21, X22, X23, alpha3, R1, R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
	   +int3d(plateCell)(M2*(material(bb,2*bc,0,RHT))*(dx(uu)/(R1+alpha3)+dy(vv)/(R2+alpha3)+dz(ww)))
	   +int3d(plateCell)(M2*Cstrain(uP, vP, wP, alpha3, R1, R2)'*C(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
       +on(1, 2, 3, 4, 5, 6, X21=0, X22=0, X23=0);
	   
Cellvh X31, X32, X33;
	problem CellX3([X31, X32, X33], [uu, vv, ww], solver=GMRES, eps=1.0e-10)=
        int3d(plateCell)(Cstrain(X31, X32, X33, alpha3, R1, R2)'*C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
	   +int3d(plateCell)(M3*(material(bb,2*bc,0,RHT))*(dx(uu)/(R1+alpha3)+dy(vv)/(R2+alpha3)+dz(ww)))
	   +int3d(plateCell)(M3*Cstrain(uP, vP, wP, alpha3, R1, R2)'*C(dk11,dk12,dk13,dk21,dk22,dk23,dk31,dk32,dk33,dk44,dk55,dk66)*Cstrain(uu, vv, ww, alpha3, R1, R2))
       +on(1, 2, 3, 4, 5, 6, X31=0, X32=0, X33=0);
//添加d(T)*dy(T)对应的二阶单胞函数
Cellvh B11;
problem CellB11(B11, v, solver=GMRES, eps=1.0e-10) = 
        int3d(plateCell)((material(aa,ab,ac,RHT))*dx(B11)/(R1+alpha3)*dx(v)/(R1+alpha3)+(material(aa,ab,ac,RHT))*dy(B11)/(R2+alpha3)*dy(v)/(R2+alpha3)+(material(aa,ab,ac,RHT))*dz(B11)*dz(v))
		+int3d(plateCell)(M1*(material(ab,2*ac,0,RHT))*dx(v)/(R1+alpha3))	
		+int3d(plateCell)(M1*((material(ab,2*ac,0,RHT))*dx(M1)/(R1+alpha3)*dx(v)/(R1+alpha3)+(material(ab,2*ac,0,RHT))*dy(M1)/(R2+alpha3)*dy(v)/(R2+alpha3)+(material(ab,2*ac,0,RHT))*dz(M1)*dz(v)))
+on(1,2,3,4,5,6, B11=0);

Cellvh B12;
problem CellB12(B12, v, solver=GMRES, eps=1.0e-10) = 
        int3d(plateCell)((material(aa,ab,ac,RHT))*dx(B12)/(R1+alpha3)*dx(v)/(R1+alpha3)+(material(aa,ab,ac,RHT))*dy(B12)/(R2+alpha3)*dy(v)/(R2+alpha3)+(material(aa,ab,ac,RHT))*dz(B12)*dz(v))
		+int3d(plateCell)(M1*(material(ab,2*ac,0,RHT))*dy(v)/(R2+alpha3))
		+ int3d(plateCell)(M2*((material(ab,2*ac,0,RHT))*dx(M1)/(R1+alpha3)*dx(v)/(R1+alpha3)+(material(ab,2*ac,0,RHT))*dy(M1)/(R2+alpha3)*dy(v)/(R2+alpha3)+(material(ab,2*ac,0,RHT))*dz(M1)*dz(v)))
+on(1,2,3,4,5,6, B12=0);

Cellvh B21;
problem CellB21(B21, v, solver=GMRES, eps=1.0e-10) = 
        int3d(plateCell)((material(aa,ab,ac,RHT))*dx(B21)/(R1+alpha3)*dx(v)/(R1+alpha3)+(material(aa,ab,ac,RHT))*dy(B21)/(R2+alpha3)*dy(v)/(R2+alpha3)+(material(aa,ab,ac,RHT))*dz(B21)*dz(v))
		+int3d(plateCell)(M2*(material(ab,2*ac,0,RHT))*dx(v)/(R1+alpha3))
		+ int3d(plateCell)(M1*((material(ab,2*ac,0,RHT))*dx(M2)/(R1+alpha3)*dx(v)/(R1+alpha3)+(material(ab,2*ac,0,RHT))*dy(M2)/(R2+alpha3)*dy(v)/(R2+alpha3)+(material(ab,2*ac,0,RHT))*dz(M2)*dz(v)))
+on(1,2,3,4,5,6, B21=0);

Cellvh B22;
problem CellB22(B22, v, solver=GMRES, eps=1.0e-10) = 
        int3d(plateCell)((material(aa,ab,ac,RHT))*dx(B22)/(R1+alpha3)*dx(v)/(R1+alpha3)+(material(aa,ab,ac,RHT))*dy(B22)/(R2+alpha3)*dy(v)/(R2+alpha3)+(material(aa,ab,ac,RHT))*dz(B22)*dz(v))
		+int3d(plateCell)(M2*(material(ab,2*ac,0,RHT))*dy(v)/(R2+alpha3))
		+int3d(plateCell)(M2*((material(ab,2*ac,0,RHT))*dx(M2)/(R1+alpha3)*dx(v)/(R1+alpha3)+(material(ab,2*ac,0,RHT))*dy(M2)/(R2+alpha3)*dy(v)/(R2+alpha3)+(material(ab,2*ac,0,RHT))*dz(M2)*dz(v)))
+on(1,2,3,4,5,6, B22=0);

Cellvh B33;
problem CellB33(B33, v, solver=GMRES, eps=1.0e-10) = 
        int3d(plateCell)((material(aa,ab,ac,RHT))*dx(B33)/(R1+alpha3)*dx(v)/(R1+alpha3)+(material(aa,ab,ac,RHT))*dy(B33)/(R2+alpha3)*dy(v)/(R2+alpha3)+(material(aa,ab,ac,RHT))*dz(B33)*dz(v))
		+int3d(plateCell)(M3*(material(ab,2*ac,0,RHT))*dz(v))
		+int3d(plateCell)(M3*((material(ab,2*ac,0,RHT))*dx(M3)/(R1+alpha3)*dx(v)/(R1+alpha3)+(material(ab,2*ac,0,RHT))*dy(M3)/(R2+alpha3)*dy(v)/(R2+alpha3)+(material(ab,2*ac,0,RHT))*dz(M3)*dz(v)))
+on(1,2,3,4,5,6, B33=0);

Cellvh B23;
problem CellB23(B23, v, solver=GMRES, eps=1.0e-10) = 
        int3d(plateCell)((material(aa,ab,ac,RHT))*dx(B23)/(R1+alpha3)*dx(v)/(R1+alpha3)+(material(aa,ab,ac,RHT))*dy(B23)/(R2+alpha3)*dy(v)/(R2+alpha3)+(material(aa,ab,ac,RHT))*dz(B23)*dz(v))
		+int3d(plateCell)(M2*(material(ab,2*ac,0,RHT))*dz(v))
		+int3d(plateCell)(M3*((material(ab,2*ac,0,RHT))*dx(M2)/(R1+alpha3)*dx(v)/(R1+alpha3)+(material(ab,2*ac,0,RHT))*dy(M2)/(R2+alpha3)*dy(v)/(R2+alpha3)+(material(ab,2*ac,0,RHT))*dz(M2)*dz(v)))
+on(1,2,3,4,5,6, B23=0);

Cellvh B32;
problem CellB32(B32, v, solver=GMRES, eps=1.0e-10) = 
        int3d(plateCell)((material(aa,ab,ac,RHT))*dx(B32)/(R1+alpha3)*dx(v)/(R1+alpha3)+(material(aa,ab,ac,RHT))*dy(B32)/(R2+alpha3)*dy(v)/(R2+alpha3)+(material(aa,ab,ac,RHT))*dz(B32)*dz(v))
		+int3d(plateCell)(M3*(material(ab,2*ac,0,RHT))*dy(v)/(R2+alpha3))
		+int3d(plateCell)(M2*((material(ab,2*ac,0,RHT))*dx(M3)/(R1+alpha3)*dx(v)/(R1+alpha3)+(material(ab,2*ac,0,RHT))*dy(M3)/(R2+alpha3)*dy(v)/(R2+alpha3)+(material(ab,2*ac,0,RHT))*dz(M3)*dz(v)))
+on(1,2,3,4,5,6, B32=0);

Cellvh B31;
problem CellB31(B31, v, solver=GMRES, eps=1.0e-10) = 
        int3d(plateCell)((material(aa,ab,ac,RHT))*dx(B31)/(R1+alpha3)*dx(v)/(R1+alpha3)+(material(aa,ab,ac,RHT))*dy(B31)/(R2+alpha3)*dy(v)/(R2+alpha3)+(material(aa,ab,ac,RHT))*dz(B31)*dz(v))
		+int3d(plateCell)(M3*(material(ab,2*ac,0,RHT))*dx(v)/(R1+alpha3))
		+int3d(plateCell)(M1*((material(ab,2*ac,0,RHT))*dx(M3)/(R1+alpha3)*dx(v)/(R1+alpha3)+(material(ab,2*ac,0,RHT))*dy(M3)/(R2+alpha3)*dy(v)/(R2+alpha3)+(material(ab,2*ac,0,RHT))*dz(M3)*dz(v)))
+on(1,2,3,4,5,6, B31=0);

Cellvh B13;
problem CellB13(B13, v, solver=GMRES, eps=1.0e-10) = 
        int3d(plateCell)((material(aa,ab,ac,RHT))*dx(B13)/(R1+alpha3)*dx(v)/(R1+alpha3)+(material(aa,ab,ac,RHT))*dy(B13)/(R2+alpha3)*dy(v)/(R2+alpha3)+(material(aa,ab,ac,RHT))*dz(B13)*dz(v))
		+int3d(plateCell)(M1*(material(ab,2*ac,0,RHT))*dz(v))
		+int3d(plateCell)(M3*((material(ab,2*ac,0,RHT))*dx(M1)/(R1+alpha3)*dx(v)/(R1+alpha3)+(material(ab,2*ac,0,RHT))*dy(M1)/(R2+alpha3)*dy(v)/(R2+alpha3)+(material(ab,2*ac,0,RHT))*dz(M1)*dz(v)))
+on(1,2,3,4,5,6, B13=0);	  
	   
//6.求解一阶单胞函数值、均匀化复合材料系数、二阶单胞函数值
//6.1利用插值算法减少计算量，其中以alpha3为插值变量
real alphamin3=(-1.0)*pi/54;
real alphamax3=pi/54;
int kk1=5; //将[rmin,rmax]区间进行划分插值,如果精度不够可以继续加细
//每个单胞划分为9份
real delt1=(alphamax3-alphamin3)/kk1;
//***********数组存储均匀化系数***********
//求解插值节点上的均匀化系数
//6.2利用插值算法减少计算量，其中以温度T为插值变量
real Tmin=273.15;
real Tmax=973.15;
int kk2=14; //每隔0.5度设置一个区间,温度区间划分段数如果精度不够可以继续加细
real delt2=(Tmax-Tmin)/kk2;
//***********数组存储均匀化系数***********
//求解插值节点上的均匀化系数
real[int,int] K11(kk1+1,kk2+1),K22(kk1+1,kk2+1),K33(kk1+1,kk2+1);//插值节点上的热传导系数
real[int,int] C1111(kk1+1,kk2+1),C1122(kk1+1,kk2+1),C1133(kk1+1,kk2+1);
real[int,int] C2222(kk1+1,kk2+1),C2233(kk1+1,kk2+1),C3333(kk1+1,kk2+1);//插值节点上的刚度系数
real[int,int] C1212(kk1+1,kk2+1),C2323(kk1+1,kk2+1),C3131(kk1+1,kk2+1);//利用刚度矩阵对称性减少计算量
real[int,int] beta11(kk1+1,kk2+1),beta22(kk1+1,kk2+1),beta33(kk1+1,kk2+1);//插值节点上的热模量系数
real[int,int] deta11(kk1+1,kk2+1),deta22(kk1+1,kk2+1),deta33(kk1+1,kk2+1);
real[int,int] Hrho(kk1+1,kk2+1);
real[int,int] HS(kk1+1,kk2+1);
for (int i=0; i<kk1+1; i+=1)
{
   for (int j=0; j<kk2+1; j+=1)
   {
	cout<<"Start this procedure!"<<endl;
	alpha3=alphamin3+i*(alphamax3-alphamin3)/kk1;
	R1=pi;
	R2=pi;
	cout<<"Start this procedure!"<<endl;
	RHT=Tmin+j*(Tmax-Tmin)/kk2;
	//基体和夹杂刚度参数计算
	E1=material(Ea1,Eb1,Ec1,RHT);
    E2=material(Ea2,Eb2,Ec2,RHT);
    MMa1=HH(E1,nu1);
    MMa1=inverse(MMa1);
    MMa2=HH(E2,nu2);
    MMa2=inverse(MMa2);
    //单胞函数刚度系数定义
    func kc11 = MMa1(0,0)*(region==RM1) + MMa2(0,0)*(region==RM2);
    func kc12 = MMa1(0,1)*(region==RM1) + MMa2(0,1)*(region==RM2);
    func kc13 = MMa1(0,2)*(region==RM1) + MMa2(0,2)*(region==RM2);
    func kc21 = MMa1(1,0)*(region==RM1) + MMa2(1,0)*(region==RM2);
    func kc22 = MMa1(1,1)*(region==RM1) + MMa2(1,1)*(region==RM2);
    func kc23 = MMa1(1,2)*(region==RM1) + MMa2(1,2)*(region==RM2);
    func kc31 = MMa1(2,0)*(region==RM1) + MMa2(2,0)*(region==RM2);
    func kc32 = MMa1(2,1)*(region==RM1) + MMa2(2,1)*(region==RM2);
    func kc33 = MMa1(2,2)*(region==RM1) + MMa2(2,2)*(region==RM2);
    func kc44 = MMa1(3,3)*(region==RM1) + MMa2(3,3)*(region==RM2);
    func kc55 = MMa1(4,4)*(region==RM1) + MMa2(4,4)*(region==RM2);
    func kc66 = MMa1(5,5)*(region==RM1) + MMa2(5,5)*(region==RM2);
	//求解插值节点上的一阶单胞函数
	Cellpro11;
	Cellpro22;
	Cellpro33;
	Cellpro12;
	Cellpro23;
    Cellpro31;
	CellM1;
	CellM2;
	CellM3;
	CellBeta;
	cout << "macro interpolation variable:" << alpha3 <<endl; 
	//求解插值节点上的的均匀化材料系数
	K11(i,j)=int3d(plateCell)(material(aa,ab,ac,RHT)+material(aa,ab,ac,RHT)*dx(M1)/(R1+alpha3));
	K22(i,j)=int3d(plateCell)(material(aa,ab,ac,RHT)+material(aa,ab,ac,RHT)*dy(M2)/(R2+alpha3));
	K33(i,j)=int3d(plateCell)(material(aa,ab,ac,RHT)+material(aa,ab,ac,RHT)*dz(M3));
    C1111(i,j)=int3d(plateCell)(kc11+Cstrain(u11,v11,w11,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66));
	C1122(i,j)=int3d(plateCell)(kc12+Cstrain(u22,v22,w22,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66));
	C1133(i,j)=int3d(plateCell)(kc13+Cstrain(u33,v33,w33,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66));
	C2222(i,j)=int3d(plateCell)(kc22+Cstrain(u22,v22,w22,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66));
	C2233(i,j)=int3d(plateCell)(kc23+Cstrain(u33,v33,w33,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66));
	C3333(i,j)=int3d(plateCell)(kc33+Cstrain(u33,v33,w33,alpha3,R1,R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66));
    C1212(i,j)=int3d(plateCell)(kc44+Cstrain(u12,v12,w12,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66));
	C2323(i,j)=int3d(plateCell)(kc55+Cstrain(u23,v23,w23,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66));
	C3131(i,j)=int3d(plateCell)(kc66+Cstrain(u31,v31,w31,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66));
    beta11(i,j)=int3d(plateCell)(material(ba,bb,bc,RHT)+Cstrain(uP,vP,wP,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66));
	beta22(i,j)=int3d(plateCell)(material(ba,bb,bc,RHT)+Cstrain(uP,vP,wP,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66));
	beta33(i,j)=int3d(plateCell)(material(ba,bb,bc,RHT)+Cstrain(uP,vP,wP,alpha3,R1,R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66));
	Hrho(i,j)=int3d(plateCell)(rho);
	HS(i,j)=int3d(plateCell)(material(pca,pcb,pcc,RHT)-material(da,db,dc,RHT)*(dx(uP)/(R1+alpha3)+dy(vP)/(R2+alpha3)+dz(wP)));
	cout<<"We complete the evaluation of cell functions on interpolation variable!"<<endl;	
    //均匀化热传导方程双向耦合模量
	deta11(i,j)=int3d(plateCell)(material(da,db,dc,RHT)+material(da,db,dc,RHT)*dx(u11)/(R1+alpha3)+material(da,db,dc,RHT)*dy(v11)/(R2+alpha3)+material(da,db,dc,RHT)*dz(w11)); 
	deta22(i,j)=int3d(plateCell)(material(da,db,dc,RHT)+material(da,db,dc,RHT)*dx(u22)/(R1+alpha3)+material(da,db,dc,RHT)*dy(v22)/(R2+alpha3)+material(da,db,dc,RHT)*dz(w22)); 
    deta33(i,j)=int3d(plateCell)(material(da,db,dc,RHT)+material(da,db,dc,RHT)*dx(u33)/(R1+alpha3)+material(da,db,dc,RHT)*dy(v33)/(R2+alpha3)+material(da,db,dc,RHT)*dz(w33));
	}
}

//插值求解所有一阶单胞函数部分二阶单胞函数
Macrovh Tx = x;//宏观x坐标
Macrovh Ty = y;//宏观y坐标
real Tz = 0.0+pi/216;//宏观z坐标
Cellvh CTx=x;//细观x坐标
Cellvh CTy=y;//细观y坐标
Cellvh CTz=z;//细观z坐标
int mnode=Macrovh.ndof;//记录精细有限元网格节点数
int node=Cellvh.ndof;//记录单胞网格节点数
int ntriangle=plateCell.nt;

//一阶单胞函数
real[int,int] CM1(node,kk2+1),CM2(node,kk2+1),CM3(node,kk2+1);//热传导方程一阶单胞函数
real[int,int] Cu11(node,kk2+1),Cv11(node,kk2+1),Cw11(node,kk2+1);
real[int,int] Cu22(node,kk2+1),Cv22(node,kk2+1),Cw22(node,kk2+1);
real[int,int] Cu33(node,kk2+1),Cv33(node,kk2+1),Cw33(node,kk2+1);
real[int,int] Cu12(node,kk2+1),Cv12(node,kk2+1),Cw12(node,kk2+1);
real[int,int] Cu23(node,kk2+1),Cv23(node,kk2+1),Cw23(node,kk2+1);
real[int,int] Cu31(node,kk2+1),Cv31(node,kk2+1),Cw31(node,kk2+1);
real[int,int] CuP(node,kk2+1),CvP(node,kk2+1),CwP(node,kk2+1);//弹性方程一阶单胞函数
//二阶单胞函数
real[int,int] Cu111(node,kk2+1),Cv111(node,kk2+1),Cw111(node,kk2+1);
real[int,int] Cu122(node,kk2+1),Cv122(node,kk2+1),Cw122(node,kk2+1);
real[int,int] Cu133(node,kk2+1),Cv133(node,kk2+1),Cw133(node,kk2+1);
real[int,int] Cu112(node,kk2+1),Cv112(node,kk2+1),Cw112(node,kk2+1);
real[int,int] Cu123(node,kk2+1),Cv123(node,kk2+1),Cw123(node,kk2+1);
real[int,int] Cu131(node,kk2+1),Cv131(node,kk2+1),Cw131(node,kk2+1);
real[int,int] Cu211(node,kk2+1),Cv211(node,kk2+1),Cw211(node,kk2+1);
real[int,int] Cu222(node,kk2+1),Cv222(node,kk2+1),Cw222(node,kk2+1);
real[int,int] Cu233(node,kk2+1),Cv233(node,kk2+1),Cw233(node,kk2+1);
real[int,int] Cu212(node,kk2+1),Cv212(node,kk2+1),Cw212(node,kk2+1);
real[int,int] Cu223(node,kk2+1),Cv223(node,kk2+1),Cw223(node,kk2+1);
real[int,int] Cu231(node,kk2+1),Cv231(node,kk2+1),Cw231(node,kk2+1);
real[int,int] Cu311(node,kk2+1),Cv311(node,kk2+1),Cw311(node,kk2+1);
real[int,int] Cu322(node,kk2+1),Cv322(node,kk2+1),Cw322(node,kk2+1);
real[int,int] Cu333(node,kk2+1),Cv333(node,kk2+1),Cw333(node,kk2+1);
real[int,int] Cu312(node,kk2+1),Cv312(node,kk2+1),Cw312(node,kk2+1);
real[int,int] Cu323(node,kk2+1),Cv323(node,kk2+1),Cw323(node,kk2+1);
real[int,int] Cu331(node,kk2+1),Cv331(node,kk2+1),Cw331(node,kk2+1);
real[int,int] CHu1(node,kk2+1),CHv1(node,kk2+1),CHw1(node,kk2+1);
real[int,int] CHu2(node,kk2+1),CHv2(node,kk2+1),CHw2(node,kk2+1);
real[int,int] CHu3(node,kk2+1),CHv3(node,kk2+1),CHw3(node,kk2+1);
real[int,int] CM11(node,kk2+1),CM22(node,kk2+1),CM33(node,kk2+1);
real[int,int] CM12(node,kk2+1),CM21(node,kk2+1),CM23(node,kk2+1);
real[int,int] CM32(node,kk2+1),CM31(node,kk2+1),CM13(node,kk2+1);
real[int,int] CB11(node,kk2+1),CB22(node,kk2+1),CB33(node,kk2+1);
real[int,int] CB12(node,kk2+1),CB21(node,kk2+1),CB23(node,kk2+1);
real[int,int] CB32(node,kk2+1),CB31(node,kk2+1),CB13(node,kk2+1);
real[int,int] CX11(node,kk2+1),CX22(node,kk2+1),CX33(node,kk2+1);
real[int,int] CX12(node,kk2+1),CX21(node,kk2+1),CX23(node,kk2+1);
real[int,int] CX32(node,kk2+1),CX31(node,kk2+1),CX13(node,kk2+1);
//圆柱壳比薄板多的二阶单胞函数
real[int,int] CWu11(node,kk2+1),CWv11(node,kk2+1),CWw11(node,kk2+1);
real[int,int] CWu22(node,kk2+1),CWv22(node,kk2+1),CWw22(node,kk2+1);
real[int,int] CWu33(node,kk2+1),CWv33(node,kk2+1),CWw33(node,kk2+1);
real[int,int] CWu12(node,kk2+1),CWv12(node,kk2+1),CWw12(node,kk2+1);
real[int,int] CWu23(node,kk2+1),CWv23(node,kk2+1),CWw23(node,kk2+1);
real[int,int] CWu31(node,kk2+1),CWv31(node,kk2+1),CWw31(node,kk2+1);
real[int,int] CZWu11(node,kk2+1),CZWv11(node,kk2+1),CZWw11(node,kk2+1);
real[int,int] CZWu22(node,kk2+1),CZWv22(node,kk2+1),CZWw22(node,kk2+1);
real[int,int] CZWu33(node,kk2+1),CZWv33(node,kk2+1),CZWw33(node,kk2+1);
real[int,int] CZWu12(node,kk2+1),CZWv12(node,kk2+1),CZWw12(node,kk2+1);
real[int,int] CZWu23(node,kk2+1),CZWv23(node,kk2+1),CZWw23(node,kk2+1);
real[int,int] CZWu31(node,kk2+1),CZWv31(node,kk2+1),CZWw31(node,kk2+1);
real[int,int] CQ1(node,kk2+1),CQ2(node,kk2+1),CQ3(node,kk2+1);
real[int,int] CZQ1(node,kk2+1),CZQ2(node,kk2+1),CZQ3(node,kk2+1);
real[int,int] CRR1(node,kk2+1),CRR2(node,kk2+1),CRR3(node,kk2+1);
real[int,int] CZRR1(node,kk2+1),CZRR2(node,kk2+1),CZRR3(node,kk2+1);
real[int,int] CFu1(node,kk2+1),CFv1(node,kk2+1),CFw1(node,kk2+1);
real[int,int] CFu2(node,kk2+1),CFv2(node,kk2+1),CFw2(node,kk2+1);
real[int,int] CFu3(node,kk2+1),CFv3(node,kk2+1),CFw3(node,kk2+1);
real[int,int] CS(node,kk2+1);
real[int,int] CG11(node,kk2+1),CG22(node,kk2+1),CG33(node,kk2+1);
real[int,int] CG12(node,kk2+1),CG23(node,kk2+1),CG31(node,kk2+1);
//6.2均匀化网格上的均匀化系数通过插值方法求解
//记录单胞网格单元信息即每个四面体的三个顶点编号
int[int,int] information(ntriangle,4);
for (int i=0;i<ntriangle;i++)
{
	information(i,0)=plateCell[i][0];
	information(i,1)=plateCell[i][1];
	information(i,2)=plateCell[i][2];
	information(i,3)=plateCell[i][3];	
}

real diff = 0.0005;//计算均匀化系数求导时插值距离
//故单胞函数只需计算一次即可，以中面中点为计算点
for (int i=0; i<kk2+1; i+=1)
{		
	//单胞函数计算前预处理数据
	alpha3=pi/72;//圆柱壳中面的上面位置
	R1=pi;
	R2=pi;//中面alpha2方向曲率半径值
	cout<<"Start this procedure!"<<endl;
	RHT=Tmin+i*(Tmax-Tmin)/kk2;
	//基体和夹杂刚度参数计算
	E1=material(Ea1,Eb1,Ec1,RHT);
    E2=material(Ea2,Eb2,Ec2,RHT);
    MMa1=HH(E1,nu1);
    MMa1=inverse(MMa1);
    MMa2=HH(E2,nu2);
    MMa2=inverse(MMa2);
    //单胞函数刚度系数定义
    func kc11 = MMa1(0,0)*(region==RM1) + MMa2(0,0)*(region==RM2);
    func kc12 = MMa1(0,1)*(region==RM1) + MMa2(0,1)*(region==RM2);
    func kc13 = MMa1(0,2)*(region==RM1) + MMa2(0,2)*(region==RM2);
    func kc21 = MMa1(1,0)*(region==RM1) + MMa2(1,0)*(region==RM2);
    func kc22 = MMa1(1,1)*(region==RM1) + MMa2(1,1)*(region==RM2);
    func kc23 = MMa1(1,2)*(region==RM1) + MMa2(1,2)*(region==RM2);
    func kc31 = MMa1(2,0)*(region==RM1) + MMa2(2,0)*(region==RM2);
    func kc32 = MMa1(2,1)*(region==RM1) + MMa2(2,1)*(region==RM2);
    func kc33 = MMa1(2,2)*(region==RM1) + MMa2(2,2)*(region==RM2);
    func kc44 = MMa1(3,3)*(region==RM1) + MMa2(3,3)*(region==RM2);
    func kc55 = MMa1(4,4)*(region==RM1) + MMa2(4,4)*(region==RM2);
    func kc66 = MMa1(5,5)*(region==RM1) + MMa2(5,5)*(region==RM2);
	//一阶单胞函数求解
	CellM1;	
	CellM2;	
	CellM3;	
	Cellpro11;	
	Cellpro22;	
	Cellpro33;	
	Cellpro12;	
	Cellpro23;	
	Cellpro31;	
	CellBeta;
	//求解插值节点上的的均匀化材料系数
	valhomoK11=int3d(plateCell)(material(aa,ab,ac,RHT)+material(aa,ab,ac,RHT)*dx(M1)/(R1+alpha3));
	valhomoK22=int3d(plateCell)(material(aa,ab,ac,RHT)+material(aa,ab,ac,RHT)*dy(M2)/(R2+alpha3));
	valhomoK33=int3d(plateCell)(material(aa,ab,ac,RHT)+material(aa,ab,ac,RHT)*dz(M3));
    valhomoC1111=int3d(plateCell)(kc11+Cstrain(u11,v11,w11,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66));
	valhomoC1122=int3d(plateCell)(kc12+Cstrain(u22,v22,w22,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66));
	valhomoC1133=int3d(plateCell)(kc13+Cstrain(u33,v33,w33,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66));
	valhomoC2222=int3d(plateCell)(kc22+Cstrain(u22,v22,w22,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66));
	valhomoC2233=int3d(plateCell)(kc23+Cstrain(u33,v33,w33,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66));
	valhomoC3333=int3d(plateCell)(kc33+Cstrain(u33,v33,w33,alpha3,R1,R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66));
    valhomoC1212=int3d(plateCell)(kc44+Cstrain(u12,v12,w12,alpha3,R1,R2)'*C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66));
	valhomoC2323=int3d(plateCell)(kc55+Cstrain(u23,v23,w23,alpha3,R1,R2)'*C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66));
	valhomoC3131=int3d(plateCell)(kc66+Cstrain(u31,v31,w31,alpha3,R1,R2)'*C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66));
    valhomobeta11=int3d(plateCell)(material(ba,bb,bc,RHT)+Cstrain(uP,vP,wP,alpha3,R1,R2)'*C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66));
	valhomobeta22=int3d(plateCell)(material(ba,bb,bc,RHT)+Cstrain(uP,vP,wP,alpha3,R1,R2)'*C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66));
	valhomobeta33=int3d(plateCell)(material(ba,bb,bc,RHT)+Cstrain(uP,vP,wP,alpha3,R1,R2)'*C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66));
	valhomorho=int3d(plateCell)(rho);
	valhomoS=int3d(plateCell)(material(pca,pcb,pcc,RHT)-material(da,db,dc,RHT)*(dx(uP)/(R1+alpha3)+dy(vP)/(R2+alpha3)+dz(wP)));
	//均匀化热传导方程双向耦合模量
	valhomodeta11=int3d(plateCell)(material(da,db,dc,RHT)+material(da,db,dc,RHT)*dx(u11)/(R1+alpha3)+material(da,db,dc,RHT)*dy(v11)/(R2+alpha3)+material(da,db,dc,RHT)*dz(w11)); 
	valhomodeta22=int3d(plateCell)(material(da,db,dc,RHT)+material(da,db,dc,RHT)*dx(u22)/(R1+alpha3)+material(da,db,dc,RHT)*dy(v22)/(R2+alpha3)+material(da,db,dc,RHT)*dz(w22)); 
    valhomodeta33=int3d(plateCell)(material(da,db,dc,RHT)+material(da,db,dc,RHT)*dx(u33)/(R1+alpha3)+material(da,db,dc,RHT)*dy(v33)/(R2+alpha3)+material(da,db,dc,RHT)*dz(w33));
	//一个alpha3插值点求一次单胞函数然后将二阶单胞函数节点上的值保存到数组中
    valhomoC2211=valhomoC1122;
    valhomoC3311=valhomoC1133;
	valhomoC3322=valhomoC2233;
	//二阶单胞函数求解
	dE1=material(Eb1,2*Ec1,0,RHT);
    dE2=material(Eb2,2*Ec2,0,RHT);
    dMMa1=HH(dE1,nu1);
    dMMa1=inverse(dMMa1);
    dMMa2=HH(dE2,nu2);
    dMMa2=inverse(dMMa2);
    func dk11 = dMMa1(0,0)*(region==RM1) + dMMa2(0,0)*(region==RM2);
    func dk12 = dMMa1(0,1)*(region==RM1) + dMMa2(0,1)*(region==RM2);
    func dk13 = dMMa1(0,2)*(region==RM1) + dMMa2(0,2)*(region==RM2);
    func dk21 = dMMa1(1,0)*(region==RM1) + dMMa2(1,0)*(region==RM2);
    func dk22 = dMMa1(1,1)*(region==RM1) + dMMa2(1,1)*(region==RM2);
    func dk23 = dMMa1(1,2)*(region==RM1) + dMMa2(1,2)*(region==RM2);
    func dk31 = dMMa1(2,0)*(region==RM1) + dMMa2(2,0)*(region==RM2);
    func dk32 = dMMa1(2,1)*(region==RM1) + dMMa2(2,1)*(region==RM2);
    func dk33 = dMMa1(2,2)*(region==RM1) + dMMa2(2,2)*(region==RM2);
    func dk44 = dMMa1(3,3)*(region==RM1) + dMMa2(3,3)*(region==RM2);
    func dk55 = dMMa1(4,4)*(region==RM1) + dMMa2(4,4)*(region==RM2);
    func dk66 = dMMa1(5,5)*(region==RM1) + dMMa2(5,5)*(region==RM2);
	//力学单胞函数
	Cellpro111;
	Cellpro122;
	Cellpro133;
	Cellpro112;
	Cellpro123;
	Cellpro131;
	Cellpro211;
	Cellpro222;
	Cellpro233;
	Cellpro212;
	Cellpro223;
	Cellpro231;
	Cellpro311;
	Cellpro322;
	Cellpro333;
	Cellpro312;
	Cellpro323;
	Cellpro331;
	CellH1;
	CellH2;
	CellH3;
	CellF1;
	CellF2;
	CellF3;
	CellX1;
	CellX2;
	CellX3;
	CellProW111;
	CellProW112;
	CellProW122;
	CellProW133;
	CellProW123;
	CellProW131;
	CellProW211;
	CellProW212;
	CellProW222;
	CellProW233;
	CellProW223;
	CellProW231;
	CellProW311;
	CellProW312;
	CellProW322;
	CellProW333;
	CellProW323;
	CellProW331;	
	CellproZW11;
	CellproZW22;
	CellproZW33;
	CellproZW12;
	CellproZW23;
	CellproZW31;
	CellZQ;
	//热学单胞函数
	CellM11;
	CellM22;
	CellM33;
	CellM12;
	CellM21;
	CellM23;
	CellM32;
	CellM31;
	CellM13;
	CellS;	
	CellG11;
	CellG22;
	CellG33;
	CellG12;
	CellG23;
	CellG31;
	CellB11;
	CellB12;
	CellB21;
	CellB22;
	CellB33;
	CellB23;
	CellB32;
	CellB13;
	CellB31;
	for(int j=0; j< Cellvh.ndof; j+=1)//一个温度求一次单胞函数然后将单胞函数节点上的值保存到数组中
	{
			//一阶单胞函数插值
			CM1(j,i)=M1[][j];CM2(j,i)=M2[][j];CM3(j,i)=M3[][j];
            Cu11(j,i)=u11[][j];Cv11(j,i)=v11[][j];Cw11(j,i)=w11[][j];
		    Cu12(j,i)=u12[][j];Cv12(j,i)=v12[][j];Cw12(j,i)=w12[][j];
		    Cu22(j,i)=u22[][j];Cv22(j,i)=v22[][j];Cw22(j,i)=w22[][j];
            Cu33(j,i)=u33[][j];Cv33(j,i)=v33[][j];Cw33(j,i)=w33[][j];
		    Cu23(j,i)=u23[][j];Cv23(j,i)=v23[][j];Cw23(j,i)=w23[][j];
		    Cu31(j,i)=u31[][j];Cv31(j,i)=v31[][j];Cw31(j,i)=w31[][j];
		    CuP(j,i)=uP[][j];CvP(j,i)=vP[][j];CwP(j,i)=wP[][j];//记录一阶单胞函数值
			
			//二阶单胞函数插值
		    CM11(j,i)=M11[][j];CM12(j,i)=M12[][j];CM21(j,i)=M21[][j];CM22(j,i)=M22[][j];
			CM33(j,i)=M33[][j];CM23(j,i)=M23[][j];CM32(j,i)=M32[][j];CM13(j,i)=M13[][j];CM31(j,i)=M31[][j];
			
			CS(j,i)=S[][j];
			
		    CG11(j,i)=G11[][j];CG12(j,i)=G12[][j];CG22(j,i)=G22[][j];CG33(j,i)=G33[][j];CG23(j,i)=G23[][j];CG31(j,i)=G31[][j];
			
			CB11(j,i)=B11[][j];CB12(j,i)=B12[][j];CB21(j,i)=B21[][j];CB22(j,i)=B22[][j];
			CB33(j,i)=B33[][j];CB23(j,i)=B23[][j];CB32(j,i)=B32[][j];CB13(j,i)=B13[][j];CB31(j,i)=B31[][j];
			
			CZQ1(j,i)=ZQ1[][j];CZQ2(j,i)=ZQ2[][j];CZQ3(j,i)=ZQ3[][j];
			
			CZRR1(j,i)=ZRR1[][j];CZRR2(j,i)=ZRR2[][j];CZRR3(j,i)=ZRR3[][j];		    		    

            CHu1(j,i)=Hu1[][j];CHv1(j,i)=Hv1[][j];CHw1(j,i)=Hw1[][j];
            CHu2(j,i)=Hu2[][j];CHv2(j,i)=Hv2[][j];CHw2(j,i)=Hw2[][j];
            CHu3(j,i)=Hu3[][j];CHv3(j,i)=Hv3[][j];CHw3(j,i)=Hw3[][j];
			
            CFu1(j,i)=Fu1[][j];CFv1(j,i)=Fv1[][j];CFw1(j,i)=Fw1[][j];
            CFu2(j,i)=Fu2[][j];CFv2(j,i)=Fv2[][j];CFw2(j,i)=Fw2[][j];
            CFu3(j,i)=Fu3[][j];CFv3(j,i)=Fv3[][j];CFw3(j,i)=Fw3[][j];
			
			Cu111(j,i)=u111[][j];Cu112(j,i)=u112[][j];Cu122(j,i)=u122[][j];Cu133(j,i)=u133[][j];Cu123(j,i)=u123[][j];Cu131(j,i)=u131[][j];
		    Cu211(j,i)=u211[][j];Cu212(j,i)=u212[][j];Cu222(j,i)=u222[][j];Cu233(j,i)=u233[][j];Cu223(j,i)=u223[][j];Cu231(j,i)=u231[][j];
		    Cu311(j,i)=u311[][j];Cu312(j,i)=u312[][j];Cu322(j,i)=u322[][j];Cu333(j,i)=u333[][j];Cu323(j,i)=u323[][j];Cu331(j,i)=u331[][j];
		   	Cv111(j,i)=v111[][j];Cv112(j,i)=v112[][j];Cv122(j,i)=v122[][j];Cv133(j,i)=v133[][j];Cv123(j,i)=v123[][j];Cv131(j,i)=v131[][j];
		    Cv211(j,i)=v211[][j];Cv212(j,i)=v212[][j];Cv222(j,i)=v222[][j];Cv233(j,i)=v233[][j];Cv223(j,i)=v223[][j];Cv231(j,i)=v231[][j];
		    Cv311(j,i)=v311[][j];Cv312(j,i)=v312[][j];Cv322(j,i)=v322[][j];Cv333(j,i)=v333[][j];Cv323(j,i)=v323[][j];Cv331(j,i)=v331[][j];
		    Cw111(j,i)=w111[][j];Cw112(j,i)=w112[][j];Cw122(j,i)=w122[][j];Cw133(j,i)=w133[][j];Cw123(j,i)=w123[][j];Cw131(j,i)=w131[][j];
		    Cw211(j,i)=w211[][j];Cw212(j,i)=w212[][j];Cw222(j,i)=w222[][j];Cw233(j,i)=w233[][j];Cw223(j,i)=w223[][j];Cw231(j,i)=w231[][j];
		    Cw311(j,i)=w311[][j];Cw312(j,i)=w312[][j];Cw322(j,i)=w322[][j];Cw333(j,i)=w333[][j];Cw323(j,i)=w323[][j];Cw331(j,i)=w331[][j];
		    
            CZWu11(j,i)=ZWu11[][j];CZWv11(j,i)=ZWv11[][j];CZWw11(j,i)=ZWw11[][j];
			CZWu12(j,i)=ZWu12[][j];CZWv12(j,i)=ZWv12[][j];CZWw12(j,i)=ZWw12[][j];
		    CZWu22(j,i)=ZWu22[][j];CZWv22(j,i)=ZWv22[][j];CZWw22(j,i)=ZWw22[][j];
            CZWu33(j,i)=ZWu33[][j];CZWv33(j,i)=ZWv33[][j];CZWw33(j,i)=ZWw33[][j];
		    CZWu23(j,i)=ZWu23[][j];CZWv23(j,i)=ZWv23[][j];CZWw23(j,i)=ZWw23[][j];
		    CZWu31(j,i)=ZWu31[][j];CZWv31(j,i)=ZWv31[][j];CZWw31(j,i)=ZWw31[][j];			
			
		    CX11(j,i)=X11[][j];CX21(j,i)=X21[][j];CX31(j,i)=X31[][j];
		    CX12(j,i)=X12[][j];CX22(j,i)=X22[][j];CX32(j,i)=X32[][j];
		    CX13(j,i)=X13[][j];CX23(j,i)=X23[][j];CX33(j,i)=X33[][j];
			
	}
    cout<<"We complete the evaluation of cell functions!"<<endl;	
}

//定义每个均匀化空间上自由度的宏观量
//Homovh aH=z;
//求解均匀化系数
//Homovh homoK11,homoK22,homoK33;//均匀化空间上自由度的热传导系数
//Homovh homoC1111,homoC1122,homoC1133;//均匀化空间上自由度的刚度系数
//Homovh homoC2222,homoC2233,homoC3333;//均匀化空间上自由度的刚度系数
//Homovh homoC1212,homoC2323,homoC3131;//利用刚度矩阵对称性减少计算量
//Homovh homobeta11,homobeta22,homobeta33;//均匀化空间上自由度的热模量系数
//Homovh homorho;
//Homovh homoS;//密度*热容系数
//4.定义三维弹性力学有限元变分问题
//定义广义热力耦合G-L模型有限元变分问题
func f=120000;//热源函数
//定义薄板所受三维体力
func f1=0.0;
func f2=0.0;
func f3=-150000.0;
//定义薄板上下表面的面力s代表上表面的力,x代表下表面的力
func s1=0.0;
func s2=0.0;
func s3=0.0;
func x1=0.0;
func x2=0.0;
func x3=0.0;
//注：当薄板所受体力和面力不为常数时，需要处理三个均匀化方程的右端项因为涉及积分、求导等运算

//5.均匀化三维弹性力学问题利用有限元求解
Homovh HU,HV,HW,HT; //实变量
Homovh vv1,vv2,vv3,vvT; //虚变量
Homovh HTp,HTpp,Hup,Hupp,Hvp,Hvpp,Hwp,Hwpp;  //时间方向递推时的中间变量
//热传导方程初值问题
HTpp=373.15;
HTp=373.15;
//波动方程初值问题,表示初始位移、速度均为0
Hupp=0.0;
Hup=0.0;
Hvpp=0.0;
Hvp=0.0;
Hwpp=0.0;
Hwp=0.0;
R1=pi;
R2=pi;
//热-力耦合问题时间步长
real dt = 0.02; //时间步长

//均匀化动态热-力耦合问题求解
//采用解耦的方法求解耦合系统
Homovh Hufu1,Hvfu1,Hwfu1;
Hufu1=0;
Hvfu1=0;
Hwfu1=0;//利用初始条件对第-1层的位移解进行预估,为了求解第1层的温度解

Homovh Hum1,Hvm1,Hwm1;
Homovh dHum1,dHvm1,dHwm1;
Homovh ddHum1,ddHvm1,ddHwm1;//Newmark差分格式中用到的上一层的位移解、速度解、加速度解

Homovh middHum1,middHvm1,middHwm1;

//计算该自由度上的均匀化系数的值
//均匀化弹性系数初始温度均为常数
real IhomoC1111, IhomoC1122, IhomoC1133; 
real IhomoC2211, IhomoC2222, IhomoC2233;
real IhomoC3311, IhomoC3322, IhomoC3333;//刚度系数
real IhomoC1212, IhomoC2323, IhomoC3131;//利用刚度矩阵对称性减少计算量
real Ihomobeta11, Ihomobeta22, Ihomobeta33; 
real Ihomorho;
{
    RHT=intiT;
    //基体和夹杂刚度参数计算
    E1=material(Ea1,Eb1,Ec1,RHT);
    E2=material(Ea2,Eb2,Ec2,RHT);
    MMa1=HH(E1,nu1);
    MMa1=inverse(MMa1);
    MMa2=HH(E2,nu2);
    MMa2=inverse(MMa2);
    //单胞函数刚度系数定义
    func kc11 = MMa1(0,0)*(region==RM1) + MMa2(0,0)*(region==RM2);
    func kc12 = MMa1(0,1)*(region==RM1) + MMa2(0,1)*(region==RM2);
    func kc13 = MMa1(0,2)*(region==RM1) + MMa2(0,2)*(region==RM2);
    func kc21 = MMa1(1,0)*(region==RM1) + MMa2(1,0)*(region==RM2);
    func kc22 = MMa1(1,1)*(region==RM1) + MMa2(1,1)*(region==RM2);
    func kc23 = MMa1(1,2)*(region==RM1) + MMa2(1,2)*(region==RM2);
    func kc31 = MMa1(2,0)*(region==RM1) + MMa2(2,0)*(region==RM2);
    func kc32 = MMa1(2,1)*(region==RM1) + MMa2(2,1)*(region==RM2);
    func kc33 = MMa1(2,2)*(region==RM1) + MMa2(2,2)*(region==RM2);
    func kc44 = MMa1(3,3)*(region==RM1) + MMa2(3,3)*(region==RM2);
    func kc55 = MMa1(4,4)*(region==RM1) + MMa2(4,4)*(region==RM2);
    func kc66 = MMa1(5,5)*(region==RM1) + MMa2(5,5)*(region==RM2);
    //一阶单胞函数求解
    Cellpro11;
    Cellpro12;
    Cellpro22;
    Cellpro33;
    Cellpro23;
    Cellpro31;
    CellBeta;	
	IhomoC1111=int3d(plateCell)(kc11+C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)'*Cstrain(u11, v11, w11, alpha3, R1, R2)); 
    IhomoC1122=int3d(plateCell)(kc12+C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)'*Cstrain(u22, v22, w22, alpha3, R1, R2));
    IhomoC1133=int3d(plateCell)(kc13+C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)'*Cstrain(u33, v33, w33, alpha3, R1, R2));	
    IhomoC2211=int3d(plateCell)(kc21+C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)'*Cstrain(u11, v11, w11, alpha3, R1, R2)); 
    IhomoC2222=int3d(plateCell)(kc22+C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)'*Cstrain(u22, v22, w22, alpha3, R1, R2));	  
    IhomoC2233=int3d(plateCell)(kc23+C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)'*Cstrain(u33, v33, w33, alpha3, R1, R2));		
    IhomoC3311=int3d(plateCell)(kc31+C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)'*Cstrain(u11, v11, w11, alpha3, R1, R2)); 
    IhomoC3322=int3d(plateCell)(kc32+C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)'*Cstrain(u22, v22, w22, alpha3, R1, R2));	  
    IhomoC3333=int3d(plateCell)(kc33+C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)'*Cstrain(u33, v33, w33, alpha3, R1, R2));		
    IhomoC1212=int3d(plateCell)(kc44+C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)'*Cstrain(u12, v12, w12, alpha3, R1, R2));
    IhomoC2323=int3d(plateCell)(kc55+C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)'*Cstrain(u23, v23, w23, alpha3, R1, R2));
    IhomoC3131=int3d(plateCell)(kc66+C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)'*Cstrain(u31, v31, w31, alpha3, R1, R2));
    //均匀化热弹性系数
    Ihomobeta11=int3d(plateCell)(material(ba,bb,bc,RHT)+C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)'*Cstrain(uP, vP, wP, alpha3, R1, R2)); 
    Ihomobeta22=int3d(plateCell)(material(ba,bb,bc,RHT)+C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)'*Cstrain(uP, vP, wP, alpha3, R1, R2)); 
    Ihomobeta33=int3d(plateCell)(material(ba,bb,bc,RHT)+C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)'*Cstrain(uP, vP, wP, alpha3, R1, R2));
	Ihomorho = int3d(plateCell)(rho);
}

//对第0层的加速度解进行计算
//对第0层的加速度解进行计算
Homovh HU0,HV0,HW0;
solve PrepMechHomo([HU0,HV0,HW0], [vv1,vv2,vv3],solver=GMRES,eps=1.0e-10)=
         int3d(HomoTh)(Ihomorho*HU0*vv1*(R1+z)*(R2+z))
	    +int3d(HomoTh)(Ihomorho*HV0*vv2*(R1+z)*(R2+z))
		+int3d(HomoTh)(Ihomorho*HW0*vv3*(R1+z)*(R2+z))
		+int3d(HomoTh)(strain(Hup,Hvp,Hwp,z,R1,R2)'*C(IhomoC1111,IhomoC1122,IhomoC1133,IhomoC1122,IhomoC2222,IhomoC2233,IhomoC1133,IhomoC2233,IhomoC3333,IhomoC1212,IhomoC2323,IhomoC3131)*strain(vv1,vv2,vv3,z,R1,R2)*(R1+z)*(R2+z))
        -int3d(HomoTh)((Ihomobeta11*(dx(vv1)+vv3)*(R2+z)+Ihomobeta22*(dy(vv2)+vv3)*(R1+z)+Ihomobeta33*dz(vv3)*(R1+z)*(R2+z))*HTp)
		+int3d(HomoTh)((Ihomobeta11*(dx(vv1)+vv3)*(R2+z)+Ihomobeta22*(dy(vv2)+vv3)*(R1+z)+Ihomobeta33*dz(vv3)*(R1+z)*(R2+z))*intiT)
        -int3d(HomoTh)(f1*vv1*(R1+z)*(R2+z))
        -int3d(HomoTh)(f2*vv2*(R1+z)*(R2+z))
		-int3d(HomoTh)(f3*vv3*(R1+z)*(R2+z))
		+on(1,2,3,4,HU0=0.0,HV0=0.0,HW0=0.0);

//Newmark差分格式中的常数gamma、beta
real gamma=0.6;
real beta=0.35;
real c0=1.0/(beta*dt^2.0);
real c1=gamma/(beta*dt);
real c2=1.0/(beta*dt);
real c3=1.0/(2.0*beta)-1.0;
real c4=gamma/beta-1.0;
real c5=dt*(gamma/(2.0*beta)-1.0);
real c6=dt*(1-gamma);
real c7=gamma*dt;

/* HT=HT1; */
Hum1=Hup;
Hvm1=Hvp;
Hwm1=Hwp;//第0层位移初始条件
dHum1=0;
dHvm1=0;
dHwm1=0;//第0层位移初始条件		
ddHum1=HU0;
ddHvm1=HV0;
ddHwm1=HW0;//第0层位移加速度		

Hupp=Hufu1;
Hvpp=Hvfu1;
Hwpp=Hwfu1;

problem DecoupHeatHomo(HT, vvT,solver=GMRES,eps=1.0e-10)=			 	
		 int3d(HomoTh)(homoS*HT*vvT/dt*(R1+z)*(R2+z))-int3d(HomoTh)(homoS*HTp*vvT/dt*(R1+z)*(R2+z))		
		+int3d(HomoTh)(homoK11*dx(HT)*dx(vvT)*(R2+z)/(R1+z)+homoK22*dy(HT)*dy(vvT)*(R1+z)/(R2+z)+homoK33*dz(HT)*dz(vvT)*(R1+z)*(R2+z))			
		+int3d(HomoTh)((homodeta11*(dx(Hup)+Hwp)*(R2+z)+homodeta22*(dy(Hvp)+Hwp)*(R1+z)+homodeta33*dz(Hwp)*(R1+z)*(R2+z))*vvT/dt*0.5)
		-int3d(HomoTh)((homodeta11*(dx(Hupp)+Hwpp)*(R2+z)+homodeta22*(dy(Hvpp)+Hwpp)*(R1+z)+homodeta33*dz(Hwpp)*(R1+z)*(R2+z))*vvT/dt*0.5)		
		-int3d(HomoTh)(f*vvT*(R1+z)*(R2+z))
		+on(5,HT=373.15);		

problem DecoupMechHomo([HU,HV,HW], [vv1,vv2,vv3],solver=GMRES,eps=1.0e-10)=
         int3d(HomoTh)(homorho*HU*vv1*c0*(R1+z)*(R2+z))
	    +int3d(HomoTh)(homorho*HV*vv2*c0*(R1+z)*(R2+z))
		+int3d(HomoTh)(homorho*HW*vv3*c0*(R1+z)*(R2+z))
		+int3d(HomoTh)(strain(HU,HV,HW,z,R1,R2)'*C(homoC1111,homoC1122,homoC1133,homoC1122,homoC2222,homoC2233,homoC1133,homoC2233,homoC3333,homoC1212,homoC2323,homoC3131)*strain(vv1,vv2,vv3,z,R1,R2)*(R1+z)*(R2+z))		
        -int3d(HomoTh)((homobeta11*(dx(vv1)+vv3)*(R2+z)+homobeta22*(dy(vv2)+vv3)*(R1+z)+homobeta33*dz(vv3)*(R1+z)*(R2+z))*HT)
		+int3d(HomoTh)((homobeta11*(dx(vv1)+vv3)*(R2+z)+homobeta22*(dy(vv2)+vv3)*(R1+z)+homobeta33*dz(vv3)*(R1+z)*(R2+z))*intiT)
		-int3d(HomoTh)(homorho*Hum1*vv1*c0*(R1+z)*(R2+z))
	    -int3d(HomoTh)(homorho*Hvm1*vv2*c0*(R1+z)*(R2+z))
		-int3d(HomoTh)(homorho*Hwm1*vv3*c0*(R1+z)*(R2+z))
		-int3d(HomoTh)(homorho*dHum1*vv1*c2*(R1+z)*(R2+z))
	    -int3d(HomoTh)(homorho*dHvm1*vv2*c2*(R1+z)*(R2+z))
		-int3d(HomoTh)(homorho*dHwm1*vv3*c2*(R1+z)*(R2+z))
		-int3d(HomoTh)(homorho*ddHum1*vv1*c3*(R1+z)*(R2+z))
	    -int3d(HomoTh)(homorho*ddHvm1*vv2*c3*(R1+z)*(R2+z))
		-int3d(HomoTh)(homorho*ddHwm1*vv3*c3*(R1+z)*(R2+z))
        -int3d(HomoTh)(f1*vv1*(R1+z)*(R2+z))
        -int3d(HomoTh)(f2*vv2*(R1+z)*(R2+z))
		-int3d(HomoTh)(f3*vv3*(R1+z)*(R2+z))
		+on(1,2,3,4,HU=0.0,HV=0.0,HW=0.0);
		
//对全局宏观节点按照不同单胞进行分类
//为了计算具有关于宏观位置求导数的二阶单胞函数
//单胞编号方式7***8***9单胞编号方式
//单胞编号方式4***5***6单胞编号方式
//单胞编号方式1***2***3单胞编号方式
//确定宏观网格节点所属单胞网格的单元
int[int] Tindex(mnode);	
real phi0,phi1,phi2,phi3;
for(int i=0; i< Macrovh.ndof; i++)//精细有限元细网格上二阶解组装按单个点来组装
{
	real cellX;
    real cellY;
    real cellZ;
	if(Tx[][i]>0)
	{
			cellX=Tx[][i]/epsilon-int(Tx[][i]/epsilon);
	}
	else
	{
			cellX=int(Tx[][i]/epsilon)-Tx[][i]/epsilon;
	}
	if(Ty[][i]>0)
	{
			cellY=Ty[][i]/epsilon-int(Ty[][i]/epsilon);
	}
	else
	{
			cellY=int(Ty[][i]/epsilon)-Ty[][i]/epsilon;
	}
	if(Tz>0)
	{
			cellZ=Tz/epsilon-int(Tz/epsilon);
	}
	else
	{
			cellZ=int(Tz/epsilon)-Tz/epsilon;
	}
	
	/* real cellX = Tx[][i]/epsilon-int(Tx[][i]/epsilon);
    real cellY = Ty[][i]/epsilon-int(Ty[][i]/epsilon);
    real cellZ = Tz/epsilon-int(Tz/epsilon); */
	for(int k=0; k<ntriangle; k++)//对单胞网格上所有三角形进行循环查找
    {
			//得到该四面体单元的四个节点编号
			int[int] Tri(4);
			for(int k1=0; k1<4; k1++)
			{
				Tri(k1)=plateCell[k][k1];
			}
			real xmin=CTx[][Tri(0)];
			real xmax=CTx[][Tri(0)];
			real ymin=CTy[][Tri(0)];
			real ymax=CTy[][Tri(0)];
			real zmin=CTz[][Tri(0)];
			real zmax=CTz[][Tri(0)];
			for(int k2=1; k2<4; k2++)
			{
				if(CTx[][Tri(k2)]<xmin)
				  xmin=CTx[][Tri(k2)];
			    if(CTx[][Tri(k2)]>xmax)
				  xmax=CTx[][Tri(k2)];
			    if(CTy[][Tri(k2)]<ymin)
				  ymin=CTy[][Tri(k2)];
			    if(CTy[][Tri(k2)]>ymax)
				  ymax=CTy[][Tri(k2)];
			    if(CTz[][Tri(k2)]<zmin)
				  zmin=CTz[][Tri(k2)];
			    if(CTz[][Tri(k2)]>zmax)
				  zmax=CTz[][Tri(k2)];
			}
			if((cellX>=xmin)&&(cellX<=xmax)&&(cellY>=ymin)&&(cellY<=ymax)&&(cellZ>=zmin)&&(cellZ<=zmax))
			{				
				real x0=CTx[][Tri(0)];
				real x1=CTx[][Tri(1)];
				real x2=CTx[][Tri(2)];
				real x3=CTx[][Tri(3)];
				real y0=CTy[][Tri(0)];
				real y1=CTy[][Tri(1)];
				real y2=CTy[][Tri(2)];
				real y3=CTy[][Tri(3)];
				real z0=CTz[][Tri(0)];
				real z1=CTz[][Tri(1)];
				real z2=CTz[][Tri(2)];
				real z3=CTz[][Tri(3)];
				
				real edgex1=x0-cellX;
				real edgex2=x1-cellX;
				real edgex3=x2-cellX;
				real edgey1=y0-cellY;
				real edgey2=y1-cellY;
				real edgey3=y2-cellY;
				real edgez1=z0-cellZ;
				real edgez2=z1-cellZ;
				real edgez3=z2-cellZ;				
				real S1=edgex1*edgey2*edgez3+edgex3*edgey1*edgez2+edgex2*edgey3*edgez1-edgex3*edgey2*edgez1-edgex2*edgey1*edgez3-edgex1*edgey3*edgez2;
				S1=abs(S1)/6;
				
				edgex1=x0-cellX;
				edgex2=x1-cellX;
				edgex3=x3-cellX;
				edgey1=y0-cellY;
				edgey2=y1-cellY;
				edgey3=y3-cellY;
				edgez1=z0-cellZ;
				edgez2=z1-cellZ;
				edgez3=z3-cellZ;	
				real S2=edgex1*edgey2*edgez3+edgex3*edgey1*edgez2+edgex2*edgey3*edgez1-edgex3*edgey2*edgez1-edgex2*edgey1*edgez3-edgex1*edgey3*edgez2;
				S2=abs(S2)/6;
				
				edgex1=x0-cellX;
				edgex2=x2-cellX;
				edgex3=x3-cellX;
				edgey1=y0-cellY;
				edgey2=y2-cellY;
				edgey3=y3-cellY;
				edgez1=z0-cellZ;
				edgez2=z2-cellZ;
				edgez3=z3-cellZ;	
				real S3=edgex1*edgey2*edgez3+edgex3*edgey1*edgez2+edgex2*edgey3*edgez1-edgex3*edgey2*edgez1-edgex2*edgey1*edgez3-edgex1*edgey3*edgez2;
				S3=abs(S3)/6;
				
				edgex1=x1-cellX;
				edgex2=x2-cellX;
				edgex3=x3-cellX;
				edgey1=y1-cellY;
				edgey2=y2-cellY;
				edgey3=y3-cellY;
				edgez1=z1-cellZ;
				edgez2=z2-cellZ;
				edgez3=z3-cellZ;
				real S4=edgex1*edgey2*edgez3+edgex3*edgey1*edgez2+edgex2*edgey3*edgez1-edgex3*edgey2*edgez1-edgex2*edgey1*edgez3-edgex1*edgey3*edgez2;
				S4=abs(S4)/6;
				
				edgex1=x1-x0;
				edgex2=x2-x0;
				edgex3=x3-x0;
				edgey1=y1-y0;
				edgey2=y2-y0;
				edgey3=y3-y0;
				edgez1=z1-z0;
				edgez2=z2-z0;
				edgez3=z3-z0;
				real S0=edgex1*edgey2*edgez3+edgex3*edgey1*edgez2+edgex2*edgey3*edgez1-edgex3*edgey2*edgez1-edgex2*edgey1*edgez3-edgex1*edgey3*edgez2;
				S0=abs(S0)/6;
                //cout<<S1<<"**"<<S2<<"**"<<S3<<"**"<<S4<<"**"<<S0<<endl;
				//real S0=CellTh[k];
                if(S0<0||S1<0||S2<0||S3<0||S4<0)
				{
					cout<<"The formula of tetrahedron volume is wrong!"<<endl;
				}
				if(abs(S0-S1-S2-S3-S4)<1.0e-15)
				{
				   Tindex(i)=k;
				   break;	
				}
			}
    }			
}
//********************利用插值减少计算量结束****************************************
//**********************************************************************************
//**********************************************************************************
//*****************************5.非线性迭代开始*************************************
Homovh IU0,IV0,IW0,IT0;        //非线性迭代时的中间变量
IU0=0.0;
IV0=0.0;
IW0=0.0;
IT0=HTp;
real err1,err2,err3,err4;//迭代误差限
int k;//每一时间层非线性迭代次数
real cellX,cellY,cellZ;//微观x,y,z坐标
Homovh Uerr,Verr,Werr,Terr;//均匀化解迭代误差函数
Macrovh FUerr,FVerr,FWerr,FTerr;//精细有限元解迭代误差函数
Macrovh MT0, MT1, MT2;
Macrovh MU0, MV0, MW0, MU1, MV1, MW1, MU2, MV2, MW2;//均匀化解、一阶解、二阶解
Macrovh IFEU=0.0;
Macrovh IFEV=0.0;
Macrovh IFEW=0.0;
Macrovh IFET=373.15;
real Time=1.0;
ofstream error("error.txt");
//real diff = 0.001;//有关宏观变量求导数时,使用中心差分时的两点距离
for (real t = dt; t <= Time; t+=dt)
{
	err1=0.1;
    err2=0.1;
    err3=0.1;
	err4=0.1;
	cout<<"**************************"<<endl;
	cout<<"1.The current time level: "<<t<<endl;
	cout<<"**************************"<<endl;
	k=0;
	while(err1>1.0e-15||err2>1.0e-15||err3>1.0e-15||err4>1.0e-15)//均匀化方程直接迭代误差限
	{
		for(int i = 0; i < Homovh.ndof; i++)//均匀化网格上的一阶单胞函数均匀化系数求解
		{			
	        //判断Z坐标所属区间
			alpha3=aH[][i];
	        R1=pi;
	        R2=pi;
	        int ki=int((alpha3-alphamin3)/delt1);
			if(ki>kk1-1)  error<<"The thickness of shell is out of the range!"<<endl;      //判断是否有温度超过Tmax的值
			//判断温度所属区间
			RHT=IT0[][i];//单胞函数参考宏观温度每个宏观点不一致
			int kj=int((RHT-Tmin)/delt2);
			if(kj>kk2-1)  error<<"The tempeture is out of the range!"<<endl;      //判断是否有温度超过Tmax的值
			//插值计算该自由度上的均匀化系数的值
	        //均匀化热传导系数
	        homoK11[][i] = K11(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+K11(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+K11(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+K11(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
			//homoK12[][i] = K12(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+K12(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+K12(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+K12(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
			homoK22[][i] = K22(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+K22(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+K22(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+K22(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
			homoK33[][i] = K33(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+K33(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+K33(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+K33(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
			//均匀化弹性系数	        
			homoC1111[][i] = C1111(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+C1111(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+C1111(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+C1111(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
			homoC1122[][i] = C1122(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+C1122(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+C1122(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+C1122(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
			homoC1133[][i] = C1133(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+C1133(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+C1133(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+C1133(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
			            
			homoC1212[][i] = C1212(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+C1212(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+C1212(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+C1212(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
			homoC2323[][i] = C2323(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+C2323(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+C2323(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+C2323(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
			homoC3131[][i] = C3131(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+C3131(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+C3131(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+C3131(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
					
			//homoC2211[][i] = C2211(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+C2211(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+C2211(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+C2211(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
			homoC2222[][i] = C2222(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+C2222(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+C2222(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+C2222(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
			homoC2233[][i] = C2233(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+C2233(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+C2233(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+C2233(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
			
			//homoC3311[][i] = C3311(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+C3311(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+C3311(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+C3311(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
			//homoC3322[][i] = C3322(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+C3322(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+C3322(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+C3322(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
			homoC3333[][i] = C3333(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+C3333(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+C3333(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+C3333(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
			//均匀化热弹性系数
			homobeta11[][i] = beta11(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+beta11(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+beta11(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+beta11(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
			//homobeta12[][i] = beta12(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+beta12(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+beta12(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+beta12(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
			homobeta22[][i] = beta22(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+beta22(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+beta22(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+beta22(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
			homobeta33[][i] = beta33(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+beta33(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+beta33(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+beta33(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
			  
			//均匀化热传导方程双向耦合模量
			homodeta11[][i] = deta11(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+deta11(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+deta11(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+deta11(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
		    //homodeta12[][i] = deta12(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+deta12(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+deta12(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+deta12(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
			homodeta22[][i] = deta22(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+deta22(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+deta22(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+deta22(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
			homodeta33[][i] = deta33(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+deta33(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+deta33(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+deta33(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
			//均匀化密度*热容系数
	        homoS[][i] = HS(ki,kj)*(alphamin3+ki*delt1+delt1-alpha3)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+HS(ki+1,kj)*(alpha3-alphamin3-ki*delt1)*(Tmin+kj*delt2+delt2-RHT)/(delt1*delt2)+HS(ki+1,kj+1)*(alpha3-alphamin3-ki*delt1)*(RHT-Tmin-kj*delt2)/(delt1*delt2)+HS(ki,kj+1)*(alphamin3+ki*delt1+delt1-alpha3)*(RHT-Tmin-kj*delt2)/(delt1*delt2);
		}
		DecoupHeatHomo;
		DecoupMechHomo;
		Uerr=HU-IU0;
		Verr=HV-IV0;
		Werr=HW-IW0;
		Terr=HT-IT0;
		err1=Uerr[].linfty;
		err2=Verr[].linfty;
		err3=Werr[].linfty;
		err4=Terr[].linfty;
		IU0=HU;
		IV0=HV;
		IW0=HW;
		IT0=HT;	
        k=k+1;    
	}
	//***************************均匀化解的高阶导数高阶插值求解**************************************
    //a.均匀化解一阶导数p1-p1方法
    //a.均匀化解一阶导数p1-p1方法
    Homovh dxHT=dx(HT);Homovh dyHT=dy(HT);Homovh dzHT=dz(HT);
    Homovh dxU0=dx(HU);Homovh dyU0=dy(HU);Homovh dzU0=dz(HU);
    Homovh dxV0=dx(HV);Homovh dyV0=dy(HV);Homovh dzV0=dz(HV);
    Homovh dxW0=dx(HW);Homovh dyW0=dy(HW);Homovh dzW0=dz(HW);
	
	Homovh dxUp=dx(Hup);Homovh dyUp=dy(Hup);Homovh dzUp=dz(Hup);
    Homovh dxVp=dx(Hvp);Homovh dyVp=dy(Hvp);Homovh dzVp=dz(Hvp);
    Homovh dxWp=dx(Hwp);Homovh dyWp=dy(Hwp);Homovh dzWp=dz(Hwp);
	
	Homovh dxUpp=dx(Hupp);Homovh dyUpp=dy(Hupp);Homovh dzUpp=dz(Hupp);
    Homovh dxVpp=dx(Hvpp);Homovh dyVpp=dy(Hvpp);Homovh dzVpp=dz(Hvpp);
    Homovh dxWpp=dx(Hwpp);Homovh dyWpp=dy(Hwpp);Homovh dzWpp=dz(Hwpp);

    //b.均匀化解二阶导数p1-p1方法
    Homovh dxxHT=dx(dxHT);Homovh dxyHT=dx(dyHT);Homovh dxzHT=dx(dzHT);
    Homovh dyxHT=dy(dxHT);Homovh dyyHT=dy(dyHT);Homovh dyzHT=dy(dzHT);
    Homovh dzxHT=dz(dxHT);Homovh dzyHT=dz(dyHT);Homovh dzzHT=dz(dzHT);

    Homovh dxxU0=dx(dxU0);Homovh dxyU0=dx(dyU0);Homovh dxzU0=dx(dzU0);
    Homovh dyxU0=dy(dxU0);Homovh dyyU0=dy(dyU0);Homovh dyzU0=dy(dzU0);
    Homovh dzxU0=dz(dxU0);Homovh dzyU0=dz(dyU0);Homovh dzzU0=dz(dzU0);

    Homovh dxxV0=dx(dxV0);Homovh dxyV0=dx(dyV0);Homovh dxzV0=dx(dzV0);
    Homovh dyxV0=dy(dxV0);Homovh dyyV0=dy(dyV0);Homovh dyzV0=dy(dzV0);
    Homovh dzxV0=dz(dxV0);Homovh dzyV0=dz(dyV0);Homovh dzzV0=dz(dzV0);

    Homovh dxxW0=dx(dxW0);Homovh dxyW0=dx(dyW0);Homovh dxzW0=dx(dzW0);
    Homovh dyxW0=dy(dxW0);Homovh dyyW0=dy(dyW0);Homovh dyzW0=dy(dzW0);
    Homovh dzxW0=dz(dxW0);Homovh dzyW0=dz(dyW0);Homovh dzzW0=dz(dzW0);
	
	//均匀化问题Newmark差分中间变量计算
	middHum1=ddHum1;
	middHvm1=ddHvm1;
	middHwm1=ddHwm1;
	ddHum1=c0*(HU-Hum1)-c2*dHum1-c3*ddHum1;
    ddHvm1=c0*(HV-Hvm1)-c2*dHvm1-c3*ddHvm1;
    ddHwm1=c0*(HW-Hwm1)-c2*dHwm1-c3*ddHwm1;//第0层位移初始条件		
    dHum1=dHum1+c6*middHum1+c7*ddHum1;
    dHvm1=dHvm1+c6*middHvm1+c7*ddHvm1;
    dHwm1=dHwm1+c6*middHwm1+c7*ddHwm1;//第0层位移加速度
	for(int i=0; i< Macrovh.ndof; i++)
    {
		real px=MacroTh(i).x;
	    real py=MacroTh(i).y;
	    //real pz=0.0-pi/72;//双曲扁壳中面高度值
		real pz=0.0+pi/216;;//双曲扁壳中面高度值
		//real pz=0.0;//双曲扁壳中面高度值
		real cellX,cellY,cellZ;
		if(px>0)
		{
			cellX=px/epsilon-int(px/epsilon);
		}
	    else
		{
			cellX=int(px/epsilon)-px/epsilon;
		}
		if(py>0)
		{
			cellY=py/epsilon-int(py/epsilon);
		}
	    else
		{
			cellY=int(py/epsilon)-py/epsilon;
		}
		if(pz>0)
		{
			cellZ=pz/epsilon-int(pz/epsilon);
		}
	    else
		{
			cellZ=int(pz/epsilon)-pz/epsilon;
		}
        //确定温度插值区间		
 	    RHT=HT(px, py, pz);//单胞函数参考宏观温度每个宏观点不一致
		int j=int((RHT-Tmin)/delt2);
		if(j>kk2-1)  error<<"The tempeture is out of the range!"<<endl;      //判断是否有温度超过Tmax的值
		//确定当前节点所属单胞网格上的三角形
		int[int] Tri(4);
		for(int k1=0; k1<4; k1++)
		{
		  Tri(k1)=plateCell[Tindex(i)][k1];
		}
		real x0=CTx[][Tri(0)];
		real x1=CTx[][Tri(1)];
		real x2=CTx[][Tri(2)];
		real x3=CTx[][Tri(3)];
		real y0=CTy[][Tri(0)];
		real y1=CTy[][Tri(1)];
		real y2=CTy[][Tri(2)];
		real y3=CTy[][Tri(3)];
		real z0=CTz[][Tri(0)];
		real z1=CTz[][Tri(1)];
		real z2=CTz[][Tri(2)];
		real z3=CTz[][Tri(3)];
		
		real edgex1=cellX-x1;
		real edgex2=x2-x1;
		real edgex3=x3-x1;
		real edgey1=cellY-y1;
		real edgey2=y2-y1;
		real edgey3=y3-y1;
		real edgez1=cellZ-z1;
		real edgez2=z2-z1;
		real edgez3=z3-z1;				
		real Supper=edgex1*edgey2*edgez3+edgex3*edgey1*edgez2+edgex2*edgey3*edgez1-edgex3*edgey2*edgez1-edgex2*edgey1*edgez3-edgex1*edgey3*edgez2;
		edgex1=x0-x1;
		edgex2=x2-x1;
		edgex3=x3-x1;
		edgey1=y0-y1;
		edgey2=y2-y1;
		edgey3=y3-y1;
		edgez1=z0-z1;
		edgez2=z2-z1;
		edgez3=z3-z1;	
		real Sdown=edgex1*edgey2*edgez3+edgex3*edgey1*edgez2+edgex2*edgey3*edgez1-edgex3*edgey2*edgez1-edgex2*edgey1*edgez3-edgex1*edgey3*edgez2;
		real phi0=Supper/Sdown;		
		
		edgex1=cellX-x0;
		edgex2=x2-x0;
		edgex3=x3-x0;
		edgey1=cellY-y0;
		edgey2=y2-y0;
		edgey3=y3-y0;
		edgez1=cellZ-z0;
		edgez2=z2-z0;
		edgez3=z3-z0;				
		Supper=edgex1*edgey2*edgez3+edgex3*edgey1*edgez2+edgex2*edgey3*edgez1-edgex3*edgey2*edgez1-edgex2*edgey1*edgez3-edgex1*edgey3*edgez2;
		edgex1=x1-x0;
		edgex2=x2-x0;
		edgex3=x3-x0;
		edgey1=y1-y0;
		edgey2=y2-y0;
		edgey3=y3-y0;
		edgez1=z1-z0;
		edgez2=z2-z0;
		edgez3=z3-z0;	
		Sdown=edgex1*edgey2*edgez3+edgex3*edgey1*edgez2+edgex2*edgey3*edgez1-edgex3*edgey2*edgez1-edgex2*edgey1*edgez3-edgex1*edgey3*edgez2;
		real phi1=Supper/Sdown;
			
		edgex1=cellX-x0;
		edgex2=x1-x0;
		edgex3=x3-x0;
		edgey1=cellY-y0;
		edgey2=y1-y0;
		edgey3=y3-y0;
		edgez1=cellZ-z0;
		edgez2=z1-z0;
		edgez3=z3-z0;				
		Supper=edgex1*edgey2*edgez3+edgex3*edgey1*edgez2+edgex2*edgey3*edgez1-edgex3*edgey2*edgez1-edgex2*edgey1*edgez3-edgex1*edgey3*edgez2;
		edgex1=x2-x0;
		edgex2=x1-x0;
		edgex3=x3-x0;
		edgey1=y2-y0;
		edgey2=y1-y0;
		edgey3=y3-y0;
		edgez1=z2-z0;
		edgez2=z1-z0;
		edgez3=z3-z0;	
		Sdown=edgex1*edgey2*edgez3+edgex3*edgey1*edgez2+edgex2*edgey3*edgez1-edgex3*edgey2*edgez1-edgex2*edgey1*edgez3-edgex1*edgey3*edgez2;
		real phi2=Supper/Sdown;
		
		edgex1=cellX-x0;
		edgex2=x1-x0;
		edgex3=x2-x0;
		edgey1=cellY-y0;
		edgey2=y1-y0;
		edgey3=y2-y0;
		edgez1=cellZ-z0;
		edgez2=z1-z0;
		edgez3=z2-z0;				
		Supper=edgex1*edgey2*edgez3+edgex3*edgey1*edgez2+edgex2*edgey3*edgez1-edgex3*edgey2*edgez1-edgex2*edgey1*edgez3-edgex1*edgey3*edgez2;
		edgex1=x3-x0;
		edgex2=x1-x0;
		edgex3=x2-x0;
		edgey1=y3-y0;
		edgey2=y1-y0;
		edgey3=y2-y0;
		edgez1=z3-z0;
		edgez2=z1-z0;
		edgez3=z2-z0;	
		Sdown=edgex1*edgey2*edgez3+edgex3*edgey1*edgez2+edgex2*edgey3*edgez1-edgex3*edgey2*edgez1-edgex2*edgey1*edgez3-edgex1*edgey3*edgez2;
		real phi3=Supper/Sdown;
		//将均匀化解投影到精细有限元网格上
		MU0[][i]=HU(px,py,pz);
		MV0[][i]=HV(px,py,pz);
		MW0[][i]=HW(px,py,pz);
		MT0[][i]=HT(px,py,pz);
		//组装二阶双尺度一阶解
		//******组装一阶双尺度解************************
		//******CM1(i,j)*(Tmin+j*delt2+delt2-RHT)/delt2+CM1(i,j+1)*(RHT-Tmin-j*delt2)/delt2模仿此插值方式		
		real valM1=(phi0*CM1(plateCell[Tindex(i)][0],j)+phi1*CM1(plateCell[Tindex(i)][1],j)+phi2*CM1(plateCell[Tindex(i)][2],j)+phi3*CM1(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CM1(plateCell[Tindex(i)][0],j+1)+phi1*CM1(plateCell[Tindex(i)][1],j+1)+phi2*CM1(plateCell[Tindex(i)][2],j+1)+phi3*CM1(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valM2=(phi0*CM2(plateCell[Tindex(i)][0],j)+phi1*CM2(plateCell[Tindex(i)][1],j)+phi2*CM2(plateCell[Tindex(i)][2],j)+phi3*CM2(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CM2(plateCell[Tindex(i)][0],j+1)+phi1*CM2(plateCell[Tindex(i)][1],j+1)+phi2*CM2(plateCell[Tindex(i)][2],j+1)+phi3*CM2(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valM3=(phi0*CM3(plateCell[Tindex(i)][0],j)+phi1*CM3(plateCell[Tindex(i)][1],j)+phi2*CM3(plateCell[Tindex(i)][2],j)+phi3*CM3(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CM3(plateCell[Tindex(i)][0],j+1)+phi1*CM3(plateCell[Tindex(i)][1],j+1)+phi2*CM3(plateCell[Tindex(i)][2],j+1)+phi3*CM3(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valu11=(phi0*Cu11(plateCell[Tindex(i)][0],j)+phi1*Cu11(plateCell[Tindex(i)][1],j)+phi2*Cu11(plateCell[Tindex(i)][2],j)+phi3*Cu11(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cu11(plateCell[Tindex(i)][0],j+1)+phi1*Cu11(plateCell[Tindex(i)][1],j+1)+phi2*Cu11(plateCell[Tindex(i)][2],j+1)+phi3*Cu11(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valu22=(phi0*Cu22(plateCell[Tindex(i)][0],j)+phi1*Cu22(plateCell[Tindex(i)][1],j)+phi2*Cu22(plateCell[Tindex(i)][2],j)+phi3*Cu22(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cu22(plateCell[Tindex(i)][0],j+1)+phi1*Cu22(plateCell[Tindex(i)][1],j+1)+phi2*Cu22(plateCell[Tindex(i)][2],j+1)+phi3*Cu22(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valu12=(phi0*Cu12(plateCell[Tindex(i)][0],j)+phi1*Cu12(plateCell[Tindex(i)][1],j)+phi2*Cu12(plateCell[Tindex(i)][2],j)+phi3*Cu12(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cu12(plateCell[Tindex(i)][0],j+1)+phi1*Cu12(plateCell[Tindex(i)][1],j+1)+phi2*Cu12(plateCell[Tindex(i)][2],j+1)+phi3*Cu12(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valu23=(phi0*Cu23(plateCell[Tindex(i)][0],j)+phi1*Cu23(plateCell[Tindex(i)][1],j)+phi2*Cu23(plateCell[Tindex(i)][2],j)+phi3*Cu23(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cu23(plateCell[Tindex(i)][0],j+1)+phi1*Cu23(plateCell[Tindex(i)][1],j+1)+phi2*Cu23(plateCell[Tindex(i)][2],j+1)+phi3*Cu23(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valu31=(phi0*Cu31(plateCell[Tindex(i)][0],j)+phi1*Cu31(plateCell[Tindex(i)][1],j)+phi2*Cu31(plateCell[Tindex(i)][2],j)+phi3*Cu31(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cu31(plateCell[Tindex(i)][0],j+1)+phi1*Cu31(plateCell[Tindex(i)][1],j+1)+phi2*Cu31(plateCell[Tindex(i)][2],j+1)+phi3*Cu31(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valu33=(phi0*Cu33(plateCell[Tindex(i)][0],j)+phi1*Cu33(plateCell[Tindex(i)][1],j)+phi2*Cu33(plateCell[Tindex(i)][2],j)+phi3*Cu33(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cu33(plateCell[Tindex(i)][0],j+1)+phi1*Cu33(plateCell[Tindex(i)][1],j+1)+phi2*Cu33(plateCell[Tindex(i)][2],j+1)+phi3*Cu33(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valuP=(phi0*CuP(plateCell[Tindex(i)][0],j)+phi1*CuP(plateCell[Tindex(i)][1],j)+phi2*CuP(plateCell[Tindex(i)][2],j)+phi3*CuP(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CuP(plateCell[Tindex(i)][0],j+1)+phi1*CuP(plateCell[Tindex(i)][1],j+1)+phi2*CuP(plateCell[Tindex(i)][2],j+1)+phi3*CuP(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valv11=(phi0*Cv11(plateCell[Tindex(i)][0],j)+phi1*Cv11(plateCell[Tindex(i)][1],j)+phi2*Cv11(plateCell[Tindex(i)][2],j)+phi3*Cv11(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cv11(plateCell[Tindex(i)][0],j+1)+phi1*Cv11(plateCell[Tindex(i)][1],j+1)+phi2*Cv11(plateCell[Tindex(i)][2],j+1)+phi3*Cv11(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valv22=(phi0*Cv22(plateCell[Tindex(i)][0],j)+phi1*Cv22(plateCell[Tindex(i)][1],j)+phi2*Cv22(plateCell[Tindex(i)][2],j)+phi3*Cv22(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cv22(plateCell[Tindex(i)][0],j+1)+phi1*Cv22(plateCell[Tindex(i)][1],j+1)+phi2*Cv22(plateCell[Tindex(i)][2],j+1)+phi3*Cv22(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valv12=(phi0*Cv12(plateCell[Tindex(i)][0],j)+phi1*Cv12(plateCell[Tindex(i)][1],j)+phi2*Cv12(plateCell[Tindex(i)][2],j)+phi3*Cv12(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cv12(plateCell[Tindex(i)][0],j+1)+phi1*Cv12(plateCell[Tindex(i)][1],j+1)+phi2*Cv12(plateCell[Tindex(i)][2],j+1)+phi3*Cv12(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valv23=(phi0*Cv23(plateCell[Tindex(i)][0],j)+phi1*Cv23(plateCell[Tindex(i)][1],j)+phi2*Cv23(plateCell[Tindex(i)][2],j)+phi3*Cv23(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cv23(plateCell[Tindex(i)][0],j+1)+phi1*Cv23(plateCell[Tindex(i)][1],j+1)+phi2*Cv23(plateCell[Tindex(i)][2],j+1)+phi3*Cv23(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valv31=(phi0*Cv31(plateCell[Tindex(i)][0],j)+phi1*Cv31(plateCell[Tindex(i)][1],j)+phi2*Cv31(plateCell[Tindex(i)][2],j)+phi3*Cv31(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cv31(plateCell[Tindex(i)][0],j+1)+phi1*Cv31(plateCell[Tindex(i)][1],j+1)+phi2*Cv31(plateCell[Tindex(i)][2],j+1)+phi3*Cv31(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valv33=(phi0*Cv33(plateCell[Tindex(i)][0],j)+phi1*Cv33(plateCell[Tindex(i)][1],j)+phi2*Cv33(plateCell[Tindex(i)][2],j)+phi3*Cv33(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cv33(plateCell[Tindex(i)][0],j+1)+phi1*Cv33(plateCell[Tindex(i)][1],j+1)+phi2*Cv33(plateCell[Tindex(i)][2],j+1)+phi3*Cv33(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valvP=(phi0*CvP(plateCell[Tindex(i)][0],j)+phi1*CvP(plateCell[Tindex(i)][1],j)+phi2*CvP(plateCell[Tindex(i)][2],j)+phi3*CvP(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CvP(plateCell[Tindex(i)][0],j+1)+phi1*CvP(plateCell[Tindex(i)][1],j+1)+phi2*CvP(plateCell[Tindex(i)][2],j+1)+phi3*CvP(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
	    
		real valw11=(phi0*Cw11(plateCell[Tindex(i)][0],j)+phi1*Cw11(plateCell[Tindex(i)][1],j)+phi2*Cw11(plateCell[Tindex(i)][2],j)+phi3*Cw11(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cw11(plateCell[Tindex(i)][0],j+1)+phi1*Cw11(plateCell[Tindex(i)][1],j+1)+phi2*Cw11(plateCell[Tindex(i)][2],j+1)+phi3*Cw11(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valw22=(phi0*Cw22(plateCell[Tindex(i)][0],j)+phi1*Cw22(plateCell[Tindex(i)][1],j)+phi2*Cw22(plateCell[Tindex(i)][2],j)+phi3*Cw22(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cw22(plateCell[Tindex(i)][0],j+1)+phi1*Cw22(plateCell[Tindex(i)][1],j+1)+phi2*Cw22(plateCell[Tindex(i)][2],j+1)+phi3*Cw22(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valw12=(phi0*Cw12(plateCell[Tindex(i)][0],j)+phi1*Cw12(plateCell[Tindex(i)][1],j)+phi2*Cw12(plateCell[Tindex(i)][2],j)+phi3*Cw12(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cw12(plateCell[Tindex(i)][0],j+1)+phi1*Cw12(plateCell[Tindex(i)][1],j+1)+phi2*Cw12(plateCell[Tindex(i)][2],j+1)+phi3*Cw12(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valw23=(phi0*Cw23(plateCell[Tindex(i)][0],j)+phi1*Cw23(plateCell[Tindex(i)][1],j)+phi2*Cw23(plateCell[Tindex(i)][2],j)+phi3*Cw23(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cw23(plateCell[Tindex(i)][0],j+1)+phi1*Cw23(plateCell[Tindex(i)][1],j+1)+phi2*Cw23(plateCell[Tindex(i)][2],j+1)+phi3*Cw23(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valw31=(phi0*Cw31(plateCell[Tindex(i)][0],j)+phi1*Cw31(plateCell[Tindex(i)][1],j)+phi2*Cw31(plateCell[Tindex(i)][2],j)+phi3*Cw31(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cw31(plateCell[Tindex(i)][0],j+1)+phi1*Cw31(plateCell[Tindex(i)][1],j+1)+phi2*Cw31(plateCell[Tindex(i)][2],j+1)+phi3*Cw31(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valw33=(phi0*Cw33(plateCell[Tindex(i)][0],j)+phi1*Cw33(plateCell[Tindex(i)][1],j)+phi2*Cw33(plateCell[Tindex(i)][2],j)+phi3*Cw33(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cw33(plateCell[Tindex(i)][0],j+1)+phi1*Cw33(plateCell[Tindex(i)][1],j+1)+phi2*Cw33(plateCell[Tindex(i)][2],j+1)+phi3*Cw33(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valwP=(phi0*CwP(plateCell[Tindex(i)][0],j)+phi1*CwP(plateCell[Tindex(i)][1],j)+phi2*CwP(plateCell[Tindex(i)][2],j)+phi3*CwP(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CwP(plateCell[Tindex(i)][0],j+1)+phi1*CwP(plateCell[Tindex(i)][1],j+1)+phi2*CwP(plateCell[Tindex(i)][2],j+1)+phi3*CwP(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
			
	    MU1[][i]=MU0[][i]+epsilon*(valu11*(dxU0(px,py,pz)/(R1+pz)+HW(px,py,pz)/(R1+pz))+valu22*(dyV0(px,py,pz)/(R2+pz)+HW(px,py,pz)/(R2+pz))+valu33*dzW0(px,py,pz)
		               +valu12*(dxV0(px,py,pz)/(R1+pz)+dyU0(px,py,pz)/(R2+pz))
					   +valu23*(dyW0(px,py,pz)/(R2+pz)+dzV0(px,py,pz)-HV(px,py,pz)/(R2+pz))
					   +valu31*(dxW0(px,py,pz)/(R1+pz)+dzU0(px,py,pz)-HU(px,py,pz)/(R1+pz))
					   -valuP*(HT(px,py,pz)-intiT));
		MV1[][i]=MV0[][i]+epsilon*(valv11*(dxU0(px,py,pz)/(R1+pz)+HW(px,py,pz)/(R1+pz))+valv22*(dyV0(px,py,pz)/(R2+pz)+HW(px,py,pz)/(R2+pz))+valv33*dzW0(px,py,pz)
		               +valv12*(dxV0(px,py,pz)/(R1+pz)+dyU0(px,py,pz)/(R2+pz))
					   +valv23*(dyW0(px,py,pz)/(R2+pz)+dzV0(px,py,pz)-HV(px,py,pz)/(R2+pz))
					   +valv31*(dxW0(px,py,pz)/(R1+pz)+dzU0(px,py,pz)-HU(px,py,pz)/(R1+pz))
					   -valvP*(HT(px,py,pz)-intiT));
		MW1[][i]=MW0[][i]+epsilon*(valw11*(dxU0(px,py,pz)/(R1+pz)+HW(px,py,pz)/(R1+pz))+valw22*(dyV0(px,py,pz)/(R2+pz)+HW(px,py,pz)/(R2+pz))+valw33*dzW0(px,py,pz)
		               +valw12*(dxV0(px,py,pz)/(R1+pz)+dyU0(px,py,pz)/(R2+pz))
					   +valw23*(dyW0(px,py,pz)/(R2+pz)+dzV0(px,py,pz)-HV(px,py,pz)/(R2+pz))
					   +valw31*(dxW0(px,py,pz)/(R1+pz)+dzU0(px,py,pz)-HU(px,py,pz)/(R1+pz))
					   -valwP*(HT(px,py,pz)-intiT));
		MT1[][i]=MT0[][i]+epsilon*(valM1*dxHT(px,py,pz)/(R1+pz)
		                 +valM2*dyHT(px,py,pz)/(R2+pz)
		                 +valM3*dzHT(px,py,pz));
						 
	    //组装二阶双尺度二阶解
		real valM11=(phi0*CM11(plateCell[Tindex(i)][0],j)+phi1*CM11(plateCell[Tindex(i)][1],j)+phi2*CM11(plateCell[Tindex(i)][2],j)+phi3*CM11(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CM11(plateCell[Tindex(i)][0],j+1)+phi1*CM11(plateCell[Tindex(i)][1],j+1)+phi2*CM11(plateCell[Tindex(i)][2],j+1)+phi3*CM11(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valM12=(phi0*CM12(plateCell[Tindex(i)][0],j)+phi1*CM12(plateCell[Tindex(i)][1],j)+phi2*CM12(plateCell[Tindex(i)][2],j)+phi3*CM12(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CM12(plateCell[Tindex(i)][0],j+1)+phi1*CM12(plateCell[Tindex(i)][1],j+1)+phi2*CM12(plateCell[Tindex(i)][2],j+1)+phi3*CM12(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valM21=(phi0*CM21(plateCell[Tindex(i)][0],j)+phi1*CM21(plateCell[Tindex(i)][1],j)+phi2*CM21(plateCell[Tindex(i)][2],j)+phi3*CM21(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CM21(plateCell[Tindex(i)][0],j+1)+phi1*CM21(plateCell[Tindex(i)][1],j+1)+phi2*CM21(plateCell[Tindex(i)][2],j+1)+phi3*CM21(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valM22=(phi0*CM22(plateCell[Tindex(i)][0],j)+phi1*CM22(plateCell[Tindex(i)][1],j)+phi2*CM22(plateCell[Tindex(i)][2],j)+phi3*CM22(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CM22(plateCell[Tindex(i)][0],j+1)+phi1*CM22(plateCell[Tindex(i)][1],j+1)+phi2*CM22(plateCell[Tindex(i)][2],j+1)+phi3*CM22(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valM33=(phi0*CM33(plateCell[Tindex(i)][0],j)+phi1*CM33(plateCell[Tindex(i)][1],j)+phi2*CM33(plateCell[Tindex(i)][2],j)+phi3*CM33(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CM33(plateCell[Tindex(i)][0],j+1)+phi1*CM33(plateCell[Tindex(i)][1],j+1)+phi2*CM33(plateCell[Tindex(i)][2],j+1)+phi3*CM33(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valM23=(phi0*CM23(plateCell[Tindex(i)][0],j)+phi1*CM23(plateCell[Tindex(i)][1],j)+phi2*CM23(plateCell[Tindex(i)][2],j)+phi3*CM23(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CM23(plateCell[Tindex(i)][0],j+1)+phi1*CM23(plateCell[Tindex(i)][1],j+1)+phi2*CM23(plateCell[Tindex(i)][2],j+1)+phi3*CM23(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valM32=(phi0*CM32(plateCell[Tindex(i)][0],j)+phi1*CM32(plateCell[Tindex(i)][1],j)+phi2*CM32(plateCell[Tindex(i)][2],j)+phi3*CM32(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CM32(plateCell[Tindex(i)][0],j+1)+phi1*CM32(plateCell[Tindex(i)][1],j+1)+phi2*CM32(plateCell[Tindex(i)][2],j+1)+phi3*CM32(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valM13=(phi0*CM13(plateCell[Tindex(i)][0],j)+phi1*CM13(plateCell[Tindex(i)][1],j)+phi2*CM13(plateCell[Tindex(i)][2],j)+phi3*CM13(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CM13(plateCell[Tindex(i)][0],j+1)+phi1*CM13(plateCell[Tindex(i)][1],j+1)+phi2*CM13(plateCell[Tindex(i)][2],j+1)+phi3*CM13(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valM31=(phi0*CM31(plateCell[Tindex(i)][0],j)+phi1*CM31(plateCell[Tindex(i)][1],j)+phi2*CM31(plateCell[Tindex(i)][2],j)+phi3*CM31(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CM31(plateCell[Tindex(i)][0],j+1)+phi1*CM31(plateCell[Tindex(i)][1],j+1)+phi2*CM31(plateCell[Tindex(i)][2],j+1)+phi3*CM31(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		
		real valZRR1=(phi0*CZRR1(plateCell[Tindex(i)][0],j)+phi1*CZRR1(plateCell[Tindex(i)][1],j)+phi2*CZRR1(plateCell[Tindex(i)][2],j)+phi3*CZRR1(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CZRR1(plateCell[Tindex(i)][0],j+1)+phi1*CZRR1(plateCell[Tindex(i)][1],j+1)+phi2*CZRR1(plateCell[Tindex(i)][2],j+1)+phi3*CZRR1(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valZRR2=(phi0*CZRR2(plateCell[Tindex(i)][0],j)+phi1*CZRR2(plateCell[Tindex(i)][1],j)+phi2*CZRR2(plateCell[Tindex(i)][2],j)+phi3*CZRR2(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CZRR2(plateCell[Tindex(i)][0],j+1)+phi1*CZRR2(plateCell[Tindex(i)][1],j+1)+phi2*CZRR2(plateCell[Tindex(i)][2],j+1)+phi3*CZRR2(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valZRR3=(phi0*CZRR3(plateCell[Tindex(i)][0],j)+phi1*CZRR3(plateCell[Tindex(i)][1],j)+phi2*CZRR3(plateCell[Tindex(i)][2],j)+phi3*CZRR3(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CZRR3(plateCell[Tindex(i)][0],j+1)+phi1*CZRR3(plateCell[Tindex(i)][1],j+1)+phi2*CZRR3(plateCell[Tindex(i)][2],j+1)+phi3*CZRR3(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		
		real valS=(phi0*CS(plateCell[Tindex(i)][0],j)+phi1*CS(plateCell[Tindex(i)][1],j)+phi2*CS(plateCell[Tindex(i)][2],j)+phi3*CS(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CS(plateCell[Tindex(i)][0],j+1)+phi1*CS(plateCell[Tindex(i)][1],j+1)+phi2*CS(plateCell[Tindex(i)][2],j+1)+phi3*CS(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		
		real valG11=(phi0*CG11(plateCell[Tindex(i)][0],j)+phi1*CG11(plateCell[Tindex(i)][1],j)+phi2*CG11(plateCell[Tindex(i)][2],j)+phi3*CG11(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CG11(plateCell[Tindex(i)][0],j+1)+phi1*CG11(plateCell[Tindex(i)][1],j+1)+phi2*CG11(plateCell[Tindex(i)][2],j+1)+phi3*CG11(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valG12=(phi0*CG12(plateCell[Tindex(i)][0],j)+phi1*CG12(plateCell[Tindex(i)][1],j)+phi2*CG12(plateCell[Tindex(i)][2],j)+phi3*CG12(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CG12(plateCell[Tindex(i)][0],j+1)+phi1*CG12(plateCell[Tindex(i)][1],j+1)+phi2*CG12(plateCell[Tindex(i)][2],j+1)+phi3*CG12(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valG22=(phi0*CG22(plateCell[Tindex(i)][0],j)+phi1*CG22(plateCell[Tindex(i)][1],j)+phi2*CG22(plateCell[Tindex(i)][2],j)+phi3*CG22(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CG22(plateCell[Tindex(i)][0],j+1)+phi1*CG22(plateCell[Tindex(i)][1],j+1)+phi2*CG22(plateCell[Tindex(i)][2],j+1)+phi3*CG22(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valG33=(phi0*CG33(plateCell[Tindex(i)][0],j)+phi1*CG33(plateCell[Tindex(i)][1],j)+phi2*CG33(plateCell[Tindex(i)][2],j)+phi3*CG33(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CG33(plateCell[Tindex(i)][0],j+1)+phi1*CG33(plateCell[Tindex(i)][1],j+1)+phi2*CG33(plateCell[Tindex(i)][2],j+1)+phi3*CG33(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valG23=(phi0*CG23(plateCell[Tindex(i)][0],j)+phi1*CG23(plateCell[Tindex(i)][1],j)+phi2*CG23(plateCell[Tindex(i)][2],j)+phi3*CG23(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CG23(plateCell[Tindex(i)][0],j+1)+phi1*CG23(plateCell[Tindex(i)][1],j+1)+phi2*CG23(plateCell[Tindex(i)][2],j+1)+phi3*CG23(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valG31=(phi0*CG31(plateCell[Tindex(i)][0],j)+phi1*CG31(plateCell[Tindex(i)][1],j)+phi2*CG31(plateCell[Tindex(i)][2],j)+phi3*CG31(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CG31(plateCell[Tindex(i)][0],j+1)+phi1*CG31(plateCell[Tindex(i)][1],j+1)+phi2*CG31(plateCell[Tindex(i)][2],j+1)+phi3*CG31(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		
		real valZQ1=(phi0*CZQ1(plateCell[Tindex(i)][0],j)+phi1*CZQ1(plateCell[Tindex(i)][1],j)+phi2*CZQ1(plateCell[Tindex(i)][2],j)+phi3*CZQ1(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CZQ1(plateCell[Tindex(i)][0],j+1)+phi1*CZQ1(plateCell[Tindex(i)][1],j+1)+phi2*CZQ1(plateCell[Tindex(i)][2],j+1)+phi3*CZQ1(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valZQ2=(phi0*CZQ2(plateCell[Tindex(i)][0],j)+phi1*CZQ2(plateCell[Tindex(i)][1],j)+phi2*CZQ2(plateCell[Tindex(i)][2],j)+phi3*CZQ2(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CZQ2(plateCell[Tindex(i)][0],j+1)+phi1*CZQ2(plateCell[Tindex(i)][1],j+1)+phi2*CZQ2(plateCell[Tindex(i)][2],j+1)+phi3*CZQ2(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valZQ3=(phi0*CZQ3(plateCell[Tindex(i)][0],j)+phi1*CZQ3(plateCell[Tindex(i)][1],j)+phi2*CZQ3(plateCell[Tindex(i)][2],j)+phi3*CZQ3(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CZQ3(plateCell[Tindex(i)][0],j+1)+phi1*CZQ3(plateCell[Tindex(i)][1],j+1)+phi2*CZQ3(plateCell[Tindex(i)][2],j+1)+phi3*CZQ3(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		
		real valB11=(phi0*CB11(plateCell[Tindex(i)][0],j)+phi1*CB11(plateCell[Tindex(i)][1],j)+phi2*CB11(plateCell[Tindex(i)][2],j)+phi3*CB11(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CB11(plateCell[Tindex(i)][0],j+1)+phi1*CB11(plateCell[Tindex(i)][1],j+1)+phi2*CB11(plateCell[Tindex(i)][2],j+1)+phi3*CB11(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valB12=(phi0*CB12(plateCell[Tindex(i)][0],j)+phi1*CB12(plateCell[Tindex(i)][1],j)+phi2*CB12(plateCell[Tindex(i)][2],j)+phi3*CB12(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CB12(plateCell[Tindex(i)][0],j+1)+phi1*CB12(plateCell[Tindex(i)][1],j+1)+phi2*CB12(plateCell[Tindex(i)][2],j+1)+phi3*CB12(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valB21=(phi0*CB21(plateCell[Tindex(i)][0],j)+phi1*CB21(plateCell[Tindex(i)][1],j)+phi2*CB21(plateCell[Tindex(i)][2],j)+phi3*CB21(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CB21(plateCell[Tindex(i)][0],j+1)+phi1*CB21(plateCell[Tindex(i)][1],j+1)+phi2*CB21(plateCell[Tindex(i)][2],j+1)+phi3*CB21(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valB22=(phi0*CB22(plateCell[Tindex(i)][0],j)+phi1*CB22(plateCell[Tindex(i)][1],j)+phi2*CB22(plateCell[Tindex(i)][2],j)+phi3*CB22(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CB22(plateCell[Tindex(i)][0],j+1)+phi1*CB22(plateCell[Tindex(i)][1],j+1)+phi2*CB22(plateCell[Tindex(i)][2],j+1)+phi3*CB22(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valB33=(phi0*CB33(plateCell[Tindex(i)][0],j)+phi1*CB33(plateCell[Tindex(i)][1],j)+phi2*CB33(plateCell[Tindex(i)][2],j)+phi3*CB33(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CB33(plateCell[Tindex(i)][0],j+1)+phi1*CB33(plateCell[Tindex(i)][1],j+1)+phi2*CB33(plateCell[Tindex(i)][2],j+1)+phi3*CB33(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valB23=(phi0*CB23(plateCell[Tindex(i)][0],j)+phi1*CB23(plateCell[Tindex(i)][1],j)+phi2*CB23(plateCell[Tindex(i)][2],j)+phi3*CB23(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CB23(plateCell[Tindex(i)][0],j+1)+phi1*CB23(plateCell[Tindex(i)][1],j+1)+phi2*CB23(plateCell[Tindex(i)][2],j+1)+phi3*CB23(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valB32=(phi0*CB32(plateCell[Tindex(i)][0],j)+phi1*CB32(plateCell[Tindex(i)][1],j)+phi2*CB32(plateCell[Tindex(i)][2],j)+phi3*CB32(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CB32(plateCell[Tindex(i)][0],j+1)+phi1*CB32(plateCell[Tindex(i)][1],j+1)+phi2*CB32(plateCell[Tindex(i)][2],j+1)+phi3*CB32(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valB13=(phi0*CB13(plateCell[Tindex(i)][0],j)+phi1*CB13(plateCell[Tindex(i)][1],j)+phi2*CB13(plateCell[Tindex(i)][2],j)+phi3*CB13(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CB13(plateCell[Tindex(i)][0],j+1)+phi1*CB13(plateCell[Tindex(i)][1],j+1)+phi2*CB13(plateCell[Tindex(i)][2],j+1)+phi3*CB13(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valB31=(phi0*CB31(plateCell[Tindex(i)][0],j)+phi1*CB31(plateCell[Tindex(i)][1],j)+phi2*CB31(plateCell[Tindex(i)][2],j)+phi3*CB31(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CB31(plateCell[Tindex(i)][0],j+1)+phi1*CB31(plateCell[Tindex(i)][1],j+1)+phi2*CB31(plateCell[Tindex(i)][2],j+1)+phi3*CB31(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		
		real valX11=(phi0*CX11(plateCell[Tindex(i)][0],j)+phi1*CX11(plateCell[Tindex(i)][1],j)+phi2*CX11(plateCell[Tindex(i)][2],j)+phi3*CX11(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CX11(plateCell[Tindex(i)][0],j+1)+phi1*CX11(plateCell[Tindex(i)][1],j+1)+phi2*CX11(plateCell[Tindex(i)][2],j+1)+phi3*CX11(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valX21=(phi0*CX21(plateCell[Tindex(i)][0],j)+phi1*CX21(plateCell[Tindex(i)][1],j)+phi2*CX21(plateCell[Tindex(i)][2],j)+phi3*CX21(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CX21(plateCell[Tindex(i)][0],j+1)+phi1*CX21(plateCell[Tindex(i)][1],j+1)+phi2*CX21(plateCell[Tindex(i)][2],j+1)+phi3*CX21(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valX31=(phi0*CX31(plateCell[Tindex(i)][0],j)+phi1*CX31(plateCell[Tindex(i)][1],j)+phi2*CX31(plateCell[Tindex(i)][2],j)+phi3*CX31(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CX31(plateCell[Tindex(i)][0],j+1)+phi1*CX31(plateCell[Tindex(i)][1],j+1)+phi2*CX31(plateCell[Tindex(i)][2],j+1)+phi3*CX31(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valX12=(phi0*CX12(plateCell[Tindex(i)][0],j)+phi1*CX12(plateCell[Tindex(i)][1],j)+phi2*CX12(plateCell[Tindex(i)][2],j)+phi3*CX12(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CX12(plateCell[Tindex(i)][0],j+1)+phi1*CX12(plateCell[Tindex(i)][1],j+1)+phi2*CX12(plateCell[Tindex(i)][2],j+1)+phi3*CX12(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valX22=(phi0*CX22(plateCell[Tindex(i)][0],j)+phi1*CX22(plateCell[Tindex(i)][1],j)+phi2*CX22(plateCell[Tindex(i)][2],j)+phi3*CX22(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CX22(plateCell[Tindex(i)][0],j+1)+phi1*CX22(plateCell[Tindex(i)][1],j+1)+phi2*CX22(plateCell[Tindex(i)][2],j+1)+phi3*CX22(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valX32=(phi0*CX32(plateCell[Tindex(i)][0],j)+phi1*CX32(plateCell[Tindex(i)][1],j)+phi2*CX32(plateCell[Tindex(i)][2],j)+phi3*CX32(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CX32(plateCell[Tindex(i)][0],j+1)+phi1*CX32(plateCell[Tindex(i)][1],j+1)+phi2*CX32(plateCell[Tindex(i)][2],j+1)+phi3*CX32(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valX13=(phi0*CX13(plateCell[Tindex(i)][0],j)+phi1*CX13(plateCell[Tindex(i)][1],j)+phi2*CX13(plateCell[Tindex(i)][2],j)+phi3*CX13(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CX13(plateCell[Tindex(i)][0],j+1)+phi1*CX13(plateCell[Tindex(i)][1],j+1)+phi2*CX13(plateCell[Tindex(i)][2],j+1)+phi3*CX13(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valX23=(phi0*CX23(plateCell[Tindex(i)][0],j)+phi1*CX23(plateCell[Tindex(i)][1],j)+phi2*CX23(plateCell[Tindex(i)][2],j)+phi3*CX23(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CX23(plateCell[Tindex(i)][0],j+1)+phi1*CX23(plateCell[Tindex(i)][1],j+1)+phi2*CX23(plateCell[Tindex(i)][2],j+1)+phi3*CX23(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valX33=(phi0*CX33(plateCell[Tindex(i)][0],j)+phi1*CX33(plateCell[Tindex(i)][1],j)+phi2*CX33(plateCell[Tindex(i)][2],j)+phi3*CX33(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CX33(plateCell[Tindex(i)][0],j+1)+phi1*CX33(plateCell[Tindex(i)][1],j+1)+phi2*CX33(plateCell[Tindex(i)][2],j+1)+phi3*CX33(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		
		real valFu1=(phi0*CFu1(plateCell[Tindex(i)][0],j)+phi1*CFu1(plateCell[Tindex(i)][1],j)+phi2*CFu1(plateCell[Tindex(i)][2],j)+phi3*CFu1(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CFu1(plateCell[Tindex(i)][0],j+1)+phi1*CFu1(plateCell[Tindex(i)][1],j+1)+phi2*CFu1(plateCell[Tindex(i)][2],j+1)+phi3*CFu1(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valFv1=(phi0*CFv1(plateCell[Tindex(i)][0],j)+phi1*CFv1(plateCell[Tindex(i)][1],j)+phi2*CFv1(plateCell[Tindex(i)][2],j)+phi3*CFv1(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CFv1(plateCell[Tindex(i)][0],j+1)+phi1*CFv1(plateCell[Tindex(i)][1],j+1)+phi2*CFv1(plateCell[Tindex(i)][2],j+1)+phi3*CFv1(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valFw1=(phi0*CFw1(plateCell[Tindex(i)][0],j)+phi1*CFw1(plateCell[Tindex(i)][1],j)+phi2*CFw1(plateCell[Tindex(i)][2],j)+phi3*CFw1(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CFw1(plateCell[Tindex(i)][0],j+1)+phi1*CFw1(plateCell[Tindex(i)][1],j+1)+phi2*CFw1(plateCell[Tindex(i)][2],j+1)+phi3*CFw1(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valFu2=(phi0*CFu2(plateCell[Tindex(i)][0],j)+phi1*CFu2(plateCell[Tindex(i)][1],j)+phi2*CFu2(plateCell[Tindex(i)][2],j)+phi3*CFu2(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CFu2(plateCell[Tindex(i)][0],j+1)+phi1*CFu2(plateCell[Tindex(i)][1],j+1)+phi2*CFu2(plateCell[Tindex(i)][2],j+1)+phi3*CFu2(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valFv2=(phi0*CFv2(plateCell[Tindex(i)][0],j)+phi1*CFv2(plateCell[Tindex(i)][1],j)+phi2*CFv2(plateCell[Tindex(i)][2],j)+phi3*CFv2(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CFv2(plateCell[Tindex(i)][0],j+1)+phi1*CFv2(plateCell[Tindex(i)][1],j+1)+phi2*CFv2(plateCell[Tindex(i)][2],j+1)+phi3*CFv2(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valFw2=(phi0*CFw2(plateCell[Tindex(i)][0],j)+phi1*CFw2(plateCell[Tindex(i)][1],j)+phi2*CFw2(plateCell[Tindex(i)][2],j)+phi3*CFw2(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CFw2(plateCell[Tindex(i)][0],j+1)+phi1*CFw2(plateCell[Tindex(i)][1],j+1)+phi2*CFw2(plateCell[Tindex(i)][2],j+1)+phi3*CFw2(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valFu3=(phi0*CFu3(plateCell[Tindex(i)][0],j)+phi1*CFu3(plateCell[Tindex(i)][1],j)+phi2*CFu3(plateCell[Tindex(i)][2],j)+phi3*CFu3(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CFu3(plateCell[Tindex(i)][0],j+1)+phi1*CFu3(plateCell[Tindex(i)][1],j+1)+phi2*CFu3(plateCell[Tindex(i)][2],j+1)+phi3*CFu3(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valFv3=(phi0*CFv3(plateCell[Tindex(i)][0],j)+phi1*CFv3(plateCell[Tindex(i)][1],j)+phi2*CFv3(plateCell[Tindex(i)][2],j)+phi3*CFv3(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CFv3(plateCell[Tindex(i)][0],j+1)+phi1*CFv3(plateCell[Tindex(i)][1],j+1)+phi2*CFv3(plateCell[Tindex(i)][2],j+1)+phi3*CFv3(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valFw3=(phi0*CFw3(plateCell[Tindex(i)][0],j)+phi1*CFw3(plateCell[Tindex(i)][1],j)+phi2*CFw3(plateCell[Tindex(i)][2],j)+phi3*CFw3(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CFw3(plateCell[Tindex(i)][0],j+1)+phi1*CFw3(plateCell[Tindex(i)][1],j+1)+phi2*CFw3(plateCell[Tindex(i)][2],j+1)+phi3*CFw3(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		
		real valHu1=(phi0*CHu1(plateCell[Tindex(i)][0],j)+phi1*CHu1(plateCell[Tindex(i)][1],j)+phi2*CHu1(plateCell[Tindex(i)][2],j)+phi3*CHu1(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CHu1(plateCell[Tindex(i)][0],j+1)+phi1*CHu1(plateCell[Tindex(i)][1],j+1)+phi2*CHu1(plateCell[Tindex(i)][2],j+1)+phi3*CHu1(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valHu2=(phi0*CHu2(plateCell[Tindex(i)][0],j)+phi1*CHu2(plateCell[Tindex(i)][1],j)+phi2*CHu2(plateCell[Tindex(i)][2],j)+phi3*CHu2(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CHu2(plateCell[Tindex(i)][0],j+1)+phi1*CHu2(plateCell[Tindex(i)][1],j+1)+phi2*CHu2(plateCell[Tindex(i)][2],j+1)+phi3*CHu2(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valHu3=(phi0*CHu3(plateCell[Tindex(i)][0],j)+phi1*CHu3(plateCell[Tindex(i)][1],j)+phi2*CHu3(plateCell[Tindex(i)][2],j)+phi3*CHu3(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CHu3(plateCell[Tindex(i)][0],j+1)+phi1*CHu3(plateCell[Tindex(i)][1],j+1)+phi2*CHu3(plateCell[Tindex(i)][2],j+1)+phi3*CHu3(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valHv1=(phi0*CHv1(plateCell[Tindex(i)][0],j)+phi1*CHv1(plateCell[Tindex(i)][1],j)+phi2*CHv1(plateCell[Tindex(i)][2],j)+phi3*CHv1(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CHv1(plateCell[Tindex(i)][0],j+1)+phi1*CHv1(plateCell[Tindex(i)][1],j+1)+phi2*CHv1(plateCell[Tindex(i)][2],j+1)+phi3*CHv1(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valHv2=(phi0*CHv2(plateCell[Tindex(i)][0],j)+phi1*CHv2(plateCell[Tindex(i)][1],j)+phi2*CHv2(plateCell[Tindex(i)][2],j)+phi3*CHv2(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CHv2(plateCell[Tindex(i)][0],j+1)+phi1*CHv2(plateCell[Tindex(i)][1],j+1)+phi2*CHv2(plateCell[Tindex(i)][2],j+1)+phi3*CHv2(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valHv3=(phi0*CHv3(plateCell[Tindex(i)][0],j)+phi1*CHv3(plateCell[Tindex(i)][1],j)+phi2*CHv3(plateCell[Tindex(i)][2],j)+phi3*CHv3(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CHv3(plateCell[Tindex(i)][0],j+1)+phi1*CHv3(plateCell[Tindex(i)][1],j+1)+phi2*CHv3(plateCell[Tindex(i)][2],j+1)+phi3*CHv3(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valHw1=(phi0*CHw1(plateCell[Tindex(i)][0],j)+phi1*CHw1(plateCell[Tindex(i)][1],j)+phi2*CHw1(plateCell[Tindex(i)][2],j)+phi3*CHw1(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CHw1(plateCell[Tindex(i)][0],j+1)+phi1*CHw1(plateCell[Tindex(i)][1],j+1)+phi2*CHw1(plateCell[Tindex(i)][2],j+1)+phi3*CHw1(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valHw2=(phi0*CHw2(plateCell[Tindex(i)][0],j)+phi1*CHw2(plateCell[Tindex(i)][1],j)+phi2*CHw2(plateCell[Tindex(i)][2],j)+phi3*CHw2(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CHw2(plateCell[Tindex(i)][0],j+1)+phi1*CHw2(plateCell[Tindex(i)][1],j+1)+phi2*CHw2(plateCell[Tindex(i)][2],j+1)+phi3*CHw2(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valHw3=(phi0*CHw3(plateCell[Tindex(i)][0],j)+phi1*CHw3(plateCell[Tindex(i)][1],j)+phi2*CHw3(plateCell[Tindex(i)][2],j)+phi3*CHw3(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CHw3(plateCell[Tindex(i)][0],j+1)+phi1*CHw3(plateCell[Tindex(i)][1],j+1)+phi2*CHw3(plateCell[Tindex(i)][2],j+1)+phi3*CHw3(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
				
		real valu111=(phi0*Cu111(plateCell[Tindex(i)][0],j)+phi1*Cu111(plateCell[Tindex(i)][1],j)+phi2*Cu111(plateCell[Tindex(i)][2],j)+phi3*Cu111(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cu111(plateCell[Tindex(i)][0],j+1)+phi1*Cu111(plateCell[Tindex(i)][1],j+1)+phi2*Cu111(plateCell[Tindex(i)][2],j+1)+phi3*Cu111(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valu112=(phi0*Cu112(plateCell[Tindex(i)][0],j)+phi1*Cu112(plateCell[Tindex(i)][1],j)+phi2*Cu112(plateCell[Tindex(i)][2],j)+phi3*Cu112(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cu112(plateCell[Tindex(i)][0],j+1)+phi1*Cu112(plateCell[Tindex(i)][1],j+1)+phi2*Cu112(plateCell[Tindex(i)][2],j+1)+phi3*Cu112(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valu122=(phi0*Cu122(plateCell[Tindex(i)][0],j)+phi1*Cu122(plateCell[Tindex(i)][1],j)+phi2*Cu122(plateCell[Tindex(i)][2],j)+phi3*Cu122(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cu122(plateCell[Tindex(i)][0],j+1)+phi1*Cu122(plateCell[Tindex(i)][1],j+1)+phi2*Cu122(plateCell[Tindex(i)][2],j+1)+phi3*Cu122(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valu133=(phi0*Cu133(plateCell[Tindex(i)][0],j)+phi1*Cu133(plateCell[Tindex(i)][1],j)+phi2*Cu133(plateCell[Tindex(i)][2],j)+phi3*Cu133(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cu133(plateCell[Tindex(i)][0],j+1)+phi1*Cu133(plateCell[Tindex(i)][1],j+1)+phi2*Cu133(plateCell[Tindex(i)][2],j+1)+phi3*Cu133(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valu123=(phi0*Cu123(plateCell[Tindex(i)][0],j)+phi1*Cu123(plateCell[Tindex(i)][1],j)+phi2*Cu123(plateCell[Tindex(i)][2],j)+phi3*Cu123(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cu123(plateCell[Tindex(i)][0],j+1)+phi1*Cu123(plateCell[Tindex(i)][1],j+1)+phi2*Cu123(plateCell[Tindex(i)][2],j+1)+phi3*Cu123(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valu131=(phi0*Cu131(plateCell[Tindex(i)][0],j)+phi1*Cu131(plateCell[Tindex(i)][1],j)+phi2*Cu131(plateCell[Tindex(i)][2],j)+phi3*Cu131(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cu131(plateCell[Tindex(i)][0],j+1)+phi1*Cu131(plateCell[Tindex(i)][1],j+1)+phi2*Cu131(plateCell[Tindex(i)][2],j+1)+phi3*Cu131(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valu211=(phi0*Cu211(plateCell[Tindex(i)][0],j)+phi1*Cu211(plateCell[Tindex(i)][1],j)+phi2*Cu211(plateCell[Tindex(i)][2],j)+phi3*Cu211(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cu211(plateCell[Tindex(i)][0],j+1)+phi1*Cu211(plateCell[Tindex(i)][1],j+1)+phi2*Cu211(plateCell[Tindex(i)][2],j+1)+phi3*Cu211(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valu212=(phi0*Cu212(plateCell[Tindex(i)][0],j)+phi1*Cu212(plateCell[Tindex(i)][1],j)+phi2*Cu212(plateCell[Tindex(i)][2],j)+phi3*Cu212(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cu212(plateCell[Tindex(i)][0],j+1)+phi1*Cu212(plateCell[Tindex(i)][1],j+1)+phi2*Cu212(plateCell[Tindex(i)][2],j+1)+phi3*Cu212(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valu222=(phi0*Cu222(plateCell[Tindex(i)][0],j)+phi1*Cu222(plateCell[Tindex(i)][1],j)+phi2*Cu222(plateCell[Tindex(i)][2],j)+phi3*Cu222(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cu222(plateCell[Tindex(i)][0],j+1)+phi1*Cu222(plateCell[Tindex(i)][1],j+1)+phi2*Cu222(plateCell[Tindex(i)][2],j+1)+phi3*Cu222(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;		
		real valu233=(phi0*Cu233(plateCell[Tindex(i)][0],j)+phi1*Cu233(plateCell[Tindex(i)][1],j)+phi2*Cu233(plateCell[Tindex(i)][2],j)+phi3*Cu233(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cu233(plateCell[Tindex(i)][0],j+1)+phi1*Cu233(plateCell[Tindex(i)][1],j+1)+phi2*Cu233(plateCell[Tindex(i)][2],j+1)+phi3*Cu233(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valu223=(phi0*Cu223(plateCell[Tindex(i)][0],j)+phi1*Cu223(plateCell[Tindex(i)][1],j)+phi2*Cu223(plateCell[Tindex(i)][2],j)+phi3*Cu223(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cu223(plateCell[Tindex(i)][0],j+1)+phi1*Cu223(plateCell[Tindex(i)][1],j+1)+phi2*Cu223(plateCell[Tindex(i)][2],j+1)+phi3*Cu223(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valu231=(phi0*Cu231(plateCell[Tindex(i)][0],j)+phi1*Cu231(plateCell[Tindex(i)][1],j)+phi2*Cu231(plateCell[Tindex(i)][2],j)+phi3*Cu231(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cu231(plateCell[Tindex(i)][0],j+1)+phi1*Cu231(plateCell[Tindex(i)][1],j+1)+phi2*Cu231(plateCell[Tindex(i)][2],j+1)+phi3*Cu231(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;		
		real valu311=(phi0*Cu311(plateCell[Tindex(i)][0],j)+phi1*Cu311(plateCell[Tindex(i)][1],j)+phi2*Cu311(plateCell[Tindex(i)][2],j)+phi3*Cu311(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cu311(plateCell[Tindex(i)][0],j+1)+phi1*Cu311(plateCell[Tindex(i)][1],j+1)+phi2*Cu311(plateCell[Tindex(i)][2],j+1)+phi3*Cu311(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valu312=(phi0*Cu312(plateCell[Tindex(i)][0],j)+phi1*Cu312(plateCell[Tindex(i)][1],j)+phi2*Cu312(plateCell[Tindex(i)][2],j)+phi3*Cu312(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cu312(plateCell[Tindex(i)][0],j+1)+phi1*Cu312(plateCell[Tindex(i)][1],j+1)+phi2*Cu312(plateCell[Tindex(i)][2],j+1)+phi3*Cu312(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valu322=(phi0*Cu322(plateCell[Tindex(i)][0],j)+phi1*Cu322(plateCell[Tindex(i)][1],j)+phi2*Cu322(plateCell[Tindex(i)][2],j)+phi3*Cu322(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cu322(plateCell[Tindex(i)][0],j+1)+phi1*Cu322(plateCell[Tindex(i)][1],j+1)+phi2*Cu322(plateCell[Tindex(i)][2],j+1)+phi3*Cu322(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;		
		real valu333=(phi0*Cu333(plateCell[Tindex(i)][0],j)+phi1*Cu333(plateCell[Tindex(i)][1],j)+phi2*Cu333(plateCell[Tindex(i)][2],j)+phi3*Cu333(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cu333(plateCell[Tindex(i)][0],j+1)+phi1*Cu333(plateCell[Tindex(i)][1],j+1)+phi2*Cu333(plateCell[Tindex(i)][2],j+1)+phi3*Cu333(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valu323=(phi0*Cu323(plateCell[Tindex(i)][0],j)+phi1*Cu323(plateCell[Tindex(i)][1],j)+phi2*Cu323(plateCell[Tindex(i)][2],j)+phi3*Cu323(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cu323(plateCell[Tindex(i)][0],j+1)+phi1*Cu323(plateCell[Tindex(i)][1],j+1)+phi2*Cu323(plateCell[Tindex(i)][2],j+1)+phi3*Cu323(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valu331=(phi0*Cu331(plateCell[Tindex(i)][0],j)+phi1*Cu331(plateCell[Tindex(i)][1],j)+phi2*Cu331(plateCell[Tindex(i)][2],j)+phi3*Cu331(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cu331(plateCell[Tindex(i)][0],j+1)+phi1*Cu331(plateCell[Tindex(i)][1],j+1)+phi2*Cu331(plateCell[Tindex(i)][2],j+1)+phi3*Cu331(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;		
		real valv111=(phi0*Cv111(plateCell[Tindex(i)][0],j)+phi1*Cv111(plateCell[Tindex(i)][1],j)+phi2*Cv111(plateCell[Tindex(i)][2],j)+phi3*Cv111(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cv111(plateCell[Tindex(i)][0],j+1)+phi1*Cv111(plateCell[Tindex(i)][1],j+1)+phi2*Cv111(plateCell[Tindex(i)][2],j+1)+phi3*Cv111(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valv112=(phi0*Cv112(plateCell[Tindex(i)][0],j)+phi1*Cv112(plateCell[Tindex(i)][1],j)+phi2*Cv112(plateCell[Tindex(i)][2],j)+phi3*Cv112(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cv112(plateCell[Tindex(i)][0],j+1)+phi1*Cv112(plateCell[Tindex(i)][1],j+1)+phi2*Cv112(plateCell[Tindex(i)][2],j+1)+phi3*Cv112(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valv122=(phi0*Cv122(plateCell[Tindex(i)][0],j)+phi1*Cv122(plateCell[Tindex(i)][1],j)+phi2*Cv122(plateCell[Tindex(i)][2],j)+phi3*Cv122(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cv122(plateCell[Tindex(i)][0],j+1)+phi1*Cv122(plateCell[Tindex(i)][1],j+1)+phi2*Cv122(plateCell[Tindex(i)][2],j+1)+phi3*Cv122(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valv133=(phi0*Cv133(plateCell[Tindex(i)][0],j)+phi1*Cv133(plateCell[Tindex(i)][1],j)+phi2*Cv133(plateCell[Tindex(i)][2],j)+phi3*Cv133(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cv133(plateCell[Tindex(i)][0],j+1)+phi1*Cv133(plateCell[Tindex(i)][1],j+1)+phi2*Cv133(plateCell[Tindex(i)][2],j+1)+phi3*Cv133(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valv123=(phi0*Cv123(plateCell[Tindex(i)][0],j)+phi1*Cv123(plateCell[Tindex(i)][1],j)+phi2*Cv123(plateCell[Tindex(i)][2],j)+phi3*Cv123(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cv123(plateCell[Tindex(i)][0],j+1)+phi1*Cv123(plateCell[Tindex(i)][1],j+1)+phi2*Cv123(plateCell[Tindex(i)][2],j+1)+phi3*Cv123(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valv131=(phi0*Cv131(plateCell[Tindex(i)][0],j)+phi1*Cv131(plateCell[Tindex(i)][1],j)+phi2*Cv131(plateCell[Tindex(i)][2],j)+phi3*Cv131(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cv131(plateCell[Tindex(i)][0],j+1)+phi1*Cv131(plateCell[Tindex(i)][1],j+1)+phi2*Cv131(plateCell[Tindex(i)][2],j+1)+phi3*Cv131(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valv211=(phi0*Cv211(plateCell[Tindex(i)][0],j)+phi1*Cv211(plateCell[Tindex(i)][1],j)+phi2*Cv211(plateCell[Tindex(i)][2],j)+phi3*Cv211(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cv211(plateCell[Tindex(i)][0],j+1)+phi1*Cv211(plateCell[Tindex(i)][1],j+1)+phi2*Cv211(plateCell[Tindex(i)][2],j+1)+phi3*Cv211(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valv212=(phi0*Cv212(plateCell[Tindex(i)][0],j)+phi1*Cv212(plateCell[Tindex(i)][1],j)+phi2*Cv212(plateCell[Tindex(i)][2],j)+phi3*Cv212(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cv212(plateCell[Tindex(i)][0],j+1)+phi1*Cv212(plateCell[Tindex(i)][1],j+1)+phi2*Cv212(plateCell[Tindex(i)][2],j+1)+phi3*Cv212(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valv222=(phi0*Cv222(plateCell[Tindex(i)][0],j)+phi1*Cv222(plateCell[Tindex(i)][1],j)+phi2*Cv222(plateCell[Tindex(i)][2],j)+phi3*Cv222(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cv222(plateCell[Tindex(i)][0],j+1)+phi1*Cv222(plateCell[Tindex(i)][1],j+1)+phi2*Cv222(plateCell[Tindex(i)][2],j+1)+phi3*Cv222(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;		
		real valv233=(phi0*Cv233(plateCell[Tindex(i)][0],j)+phi1*Cv233(plateCell[Tindex(i)][1],j)+phi2*Cv233(plateCell[Tindex(i)][2],j)+phi3*Cv233(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cv233(plateCell[Tindex(i)][0],j+1)+phi1*Cv233(plateCell[Tindex(i)][1],j+1)+phi2*Cv233(plateCell[Tindex(i)][2],j+1)+phi3*Cv233(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valv223=(phi0*Cv223(plateCell[Tindex(i)][0],j)+phi1*Cv223(plateCell[Tindex(i)][1],j)+phi2*Cv223(plateCell[Tindex(i)][2],j)+phi3*Cv223(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cv223(plateCell[Tindex(i)][0],j+1)+phi1*Cv223(plateCell[Tindex(i)][1],j+1)+phi2*Cv223(plateCell[Tindex(i)][2],j+1)+phi3*Cv223(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valv231=(phi0*Cv231(plateCell[Tindex(i)][0],j)+phi1*Cv231(plateCell[Tindex(i)][1],j)+phi2*Cv231(plateCell[Tindex(i)][2],j)+phi3*Cv231(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cv231(plateCell[Tindex(i)][0],j+1)+phi1*Cv231(plateCell[Tindex(i)][1],j+1)+phi2*Cv231(plateCell[Tindex(i)][2],j+1)+phi3*Cv231(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;		
		real valv311=(phi0*Cv311(plateCell[Tindex(i)][0],j)+phi1*Cv311(plateCell[Tindex(i)][1],j)+phi2*Cv311(plateCell[Tindex(i)][2],j)+phi3*Cv311(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cv311(plateCell[Tindex(i)][0],j+1)+phi1*Cv311(plateCell[Tindex(i)][1],j+1)+phi2*Cv311(plateCell[Tindex(i)][2],j+1)+phi3*Cv311(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valv312=(phi0*Cv312(plateCell[Tindex(i)][0],j)+phi1*Cv312(plateCell[Tindex(i)][1],j)+phi2*Cv312(plateCell[Tindex(i)][2],j)+phi3*Cv312(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cv312(plateCell[Tindex(i)][0],j+1)+phi1*Cv312(plateCell[Tindex(i)][1],j+1)+phi2*Cv312(plateCell[Tindex(i)][2],j+1)+phi3*Cv312(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valv322=(phi0*Cv322(plateCell[Tindex(i)][0],j)+phi1*Cv322(plateCell[Tindex(i)][1],j)+phi2*Cv322(plateCell[Tindex(i)][2],j)+phi3*Cv322(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cv322(plateCell[Tindex(i)][0],j+1)+phi1*Cv322(plateCell[Tindex(i)][1],j+1)+phi2*Cv322(plateCell[Tindex(i)][2],j+1)+phi3*Cv322(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;		
		real valv333=(phi0*Cv333(plateCell[Tindex(i)][0],j)+phi1*Cv333(plateCell[Tindex(i)][1],j)+phi2*Cv333(plateCell[Tindex(i)][2],j)+phi3*Cv333(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cv333(plateCell[Tindex(i)][0],j+1)+phi1*Cv333(plateCell[Tindex(i)][1],j+1)+phi2*Cv333(plateCell[Tindex(i)][2],j+1)+phi3*Cv333(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valv323=(phi0*Cv323(plateCell[Tindex(i)][0],j)+phi1*Cv323(plateCell[Tindex(i)][1],j)+phi2*Cv323(plateCell[Tindex(i)][2],j)+phi3*Cv323(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cv323(plateCell[Tindex(i)][0],j+1)+phi1*Cv323(plateCell[Tindex(i)][1],j+1)+phi2*Cv323(plateCell[Tindex(i)][2],j+1)+phi3*Cv323(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valv331=(phi0*Cv331(plateCell[Tindex(i)][0],j)+phi1*Cv331(plateCell[Tindex(i)][1],j)+phi2*Cv331(plateCell[Tindex(i)][2],j)+phi3*Cv331(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cv331(plateCell[Tindex(i)][0],j+1)+phi1*Cv331(plateCell[Tindex(i)][1],j+1)+phi2*Cv331(plateCell[Tindex(i)][2],j+1)+phi3*Cv331(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;		
		real valw111=(phi0*Cw111(plateCell[Tindex(i)][0],j)+phi1*Cw111(plateCell[Tindex(i)][1],j)+phi2*Cw111(plateCell[Tindex(i)][2],j)+phi3*Cw111(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cw111(plateCell[Tindex(i)][0],j+1)+phi1*Cw111(plateCell[Tindex(i)][1],j+1)+phi2*Cw111(plateCell[Tindex(i)][2],j+1)+phi3*Cw111(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valw112=(phi0*Cw112(plateCell[Tindex(i)][0],j)+phi1*Cw112(plateCell[Tindex(i)][1],j)+phi2*Cw112(plateCell[Tindex(i)][2],j)+phi3*Cw112(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cw112(plateCell[Tindex(i)][0],j+1)+phi1*Cw112(plateCell[Tindex(i)][1],j+1)+phi2*Cw112(plateCell[Tindex(i)][2],j+1)+phi3*Cw112(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valw122=(phi0*Cw122(plateCell[Tindex(i)][0],j)+phi1*Cw122(plateCell[Tindex(i)][1],j)+phi2*Cw122(plateCell[Tindex(i)][2],j)+phi3*Cw122(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cw122(plateCell[Tindex(i)][0],j+1)+phi1*Cw122(plateCell[Tindex(i)][1],j+1)+phi2*Cw122(plateCell[Tindex(i)][2],j+1)+phi3*Cw122(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valw133=(phi0*Cw133(plateCell[Tindex(i)][0],j)+phi1*Cw133(plateCell[Tindex(i)][1],j)+phi2*Cw133(plateCell[Tindex(i)][2],j)+phi3*Cw133(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cw133(plateCell[Tindex(i)][0],j+1)+phi1*Cw133(plateCell[Tindex(i)][1],j+1)+phi2*Cw133(plateCell[Tindex(i)][2],j+1)+phi3*Cw133(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valw123=(phi0*Cw123(plateCell[Tindex(i)][0],j)+phi1*Cw123(plateCell[Tindex(i)][1],j)+phi2*Cw123(plateCell[Tindex(i)][2],j)+phi3*Cw123(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cw123(plateCell[Tindex(i)][0],j+1)+phi1*Cw123(plateCell[Tindex(i)][1],j+1)+phi2*Cw123(plateCell[Tindex(i)][2],j+1)+phi3*Cw123(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valw131=(phi0*Cw131(plateCell[Tindex(i)][0],j)+phi1*Cw131(plateCell[Tindex(i)][1],j)+phi2*Cw131(plateCell[Tindex(i)][2],j)+phi3*Cw131(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cw131(plateCell[Tindex(i)][0],j+1)+phi1*Cw131(plateCell[Tindex(i)][1],j+1)+phi2*Cw131(plateCell[Tindex(i)][2],j+1)+phi3*Cw131(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valw211=(phi0*Cw211(plateCell[Tindex(i)][0],j)+phi1*Cw211(plateCell[Tindex(i)][1],j)+phi2*Cw211(plateCell[Tindex(i)][2],j)+phi3*Cw211(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cw211(plateCell[Tindex(i)][0],j+1)+phi1*Cw211(plateCell[Tindex(i)][1],j+1)+phi2*Cw211(plateCell[Tindex(i)][2],j+1)+phi3*Cw211(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valw212=(phi0*Cw212(plateCell[Tindex(i)][0],j)+phi1*Cw212(plateCell[Tindex(i)][1],j)+phi2*Cw212(plateCell[Tindex(i)][2],j)+phi3*Cw212(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cw212(plateCell[Tindex(i)][0],j+1)+phi1*Cw212(plateCell[Tindex(i)][1],j+1)+phi2*Cw212(plateCell[Tindex(i)][2],j+1)+phi3*Cw212(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valw222=(phi0*Cw222(plateCell[Tindex(i)][0],j)+phi1*Cw222(plateCell[Tindex(i)][1],j)+phi2*Cw222(plateCell[Tindex(i)][2],j)+phi3*Cw222(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cw222(plateCell[Tindex(i)][0],j+1)+phi1*Cw222(plateCell[Tindex(i)][1],j+1)+phi2*Cw222(plateCell[Tindex(i)][2],j+1)+phi3*Cw222(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;		
		real valw233=(phi0*Cw233(plateCell[Tindex(i)][0],j)+phi1*Cw233(plateCell[Tindex(i)][1],j)+phi2*Cw233(plateCell[Tindex(i)][2],j)+phi3*Cw233(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cw233(plateCell[Tindex(i)][0],j+1)+phi1*Cw233(plateCell[Tindex(i)][1],j+1)+phi2*Cw233(plateCell[Tindex(i)][2],j+1)+phi3*Cw233(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valw223=(phi0*Cw223(plateCell[Tindex(i)][0],j)+phi1*Cw223(plateCell[Tindex(i)][1],j)+phi2*Cw223(plateCell[Tindex(i)][2],j)+phi3*Cw223(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cw223(plateCell[Tindex(i)][0],j+1)+phi1*Cw223(plateCell[Tindex(i)][1],j+1)+phi2*Cw223(plateCell[Tindex(i)][2],j+1)+phi3*Cw223(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valw231=(phi0*Cw231(plateCell[Tindex(i)][0],j)+phi1*Cw231(plateCell[Tindex(i)][1],j)+phi2*Cw231(plateCell[Tindex(i)][2],j)+phi3*Cw231(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cw231(plateCell[Tindex(i)][0],j+1)+phi1*Cw231(plateCell[Tindex(i)][1],j+1)+phi2*Cw231(plateCell[Tindex(i)][2],j+1)+phi3*Cw231(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;		
		real valw311=(phi0*Cw311(plateCell[Tindex(i)][0],j)+phi1*Cw311(plateCell[Tindex(i)][1],j)+phi2*Cw311(plateCell[Tindex(i)][2],j)+phi3*Cw311(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cw311(plateCell[Tindex(i)][0],j+1)+phi1*Cw311(plateCell[Tindex(i)][1],j+1)+phi2*Cw311(plateCell[Tindex(i)][2],j+1)+phi3*Cw311(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valw312=(phi0*Cw312(plateCell[Tindex(i)][0],j)+phi1*Cw312(plateCell[Tindex(i)][1],j)+phi2*Cw312(plateCell[Tindex(i)][2],j)+phi3*Cw312(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cw312(plateCell[Tindex(i)][0],j+1)+phi1*Cw312(plateCell[Tindex(i)][1],j+1)+phi2*Cw312(plateCell[Tindex(i)][2],j+1)+phi3*Cw312(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valw322=(phi0*Cw322(plateCell[Tindex(i)][0],j)+phi1*Cw322(plateCell[Tindex(i)][1],j)+phi2*Cw322(plateCell[Tindex(i)][2],j)+phi3*Cw322(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cw322(plateCell[Tindex(i)][0],j+1)+phi1*Cw322(plateCell[Tindex(i)][1],j+1)+phi2*Cw322(plateCell[Tindex(i)][2],j+1)+phi3*Cw322(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;		
		real valw333=(phi0*Cw333(plateCell[Tindex(i)][0],j)+phi1*Cw333(plateCell[Tindex(i)][1],j)+phi2*Cw333(plateCell[Tindex(i)][2],j)+phi3*Cw333(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cw333(plateCell[Tindex(i)][0],j+1)+phi1*Cw333(plateCell[Tindex(i)][1],j+1)+phi2*Cw333(plateCell[Tindex(i)][2],j+1)+phi3*Cw333(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valw323=(phi0*Cw323(plateCell[Tindex(i)][0],j)+phi1*Cw323(plateCell[Tindex(i)][1],j)+phi2*Cw323(plateCell[Tindex(i)][2],j)+phi3*Cw323(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cw323(plateCell[Tindex(i)][0],j+1)+phi1*Cw323(plateCell[Tindex(i)][1],j+1)+phi2*Cw323(plateCell[Tindex(i)][2],j+1)+phi3*Cw323(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valw331=(phi0*Cw331(plateCell[Tindex(i)][0],j)+phi1*Cw331(plateCell[Tindex(i)][1],j)+phi2*Cw331(plateCell[Tindex(i)][2],j)+phi3*Cw331(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*Cw331(plateCell[Tindex(i)][0],j+1)+phi1*Cw331(plateCell[Tindex(i)][1],j+1)+phi2*Cw331(plateCell[Tindex(i)][2],j+1)+phi3*Cw331(plateCell[Tindex(i)][3],j+1))*(RHT-Tmin-j*delt2)/delt2;
		
		real valZWu11=(phi0*CZWu11(plateCell[Tindex(i)][0],j)+phi1*CZWu11(plateCell[Tindex(i)][1],j)+phi2*CZWu11(plateCell[Tindex(i)][2],j)+phi3*CZWu11(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CZWu11(plateCell[Tindex(i)][0],j+1)+phi1*CZWu11(plateCell[Tindex(i)][1],j+1)+phi2*CZWu11(plateCell[Tindex(i)][2],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valZWu12=(phi0*CZWu12(plateCell[Tindex(i)][0],j)+phi1*CZWu12(plateCell[Tindex(i)][1],j)+phi2*CZWu12(plateCell[Tindex(i)][2],j)+phi3*CZWu12(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CZWu12(plateCell[Tindex(i)][0],j+1)+phi1*CZWu12(plateCell[Tindex(i)][1],j+1)+phi2*CZWu12(plateCell[Tindex(i)][2],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valZWu22=(phi0*CZWu22(plateCell[Tindex(i)][0],j)+phi1*CZWu22(plateCell[Tindex(i)][1],j)+phi2*CZWu22(plateCell[Tindex(i)][2],j)+phi3*CZWu22(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CZWu22(plateCell[Tindex(i)][0],j+1)+phi1*CZWu22(plateCell[Tindex(i)][1],j+1)+phi2*CZWu22(plateCell[Tindex(i)][2],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valZWu33=(phi0*CZWu33(plateCell[Tindex(i)][0],j)+phi1*CZWu33(plateCell[Tindex(i)][1],j)+phi2*CZWu33(plateCell[Tindex(i)][2],j)+phi3*CZWu33(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CZWu33(plateCell[Tindex(i)][0],j+1)+phi1*CZWu33(plateCell[Tindex(i)][1],j+1)+phi2*CZWu33(plateCell[Tindex(i)][2],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valZWu23=(phi0*CZWu23(plateCell[Tindex(i)][0],j)+phi1*CZWu23(plateCell[Tindex(i)][1],j)+phi2*CZWu23(plateCell[Tindex(i)][2],j)+phi3*CZWu23(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CZWu23(plateCell[Tindex(i)][0],j+1)+phi1*CZWu23(plateCell[Tindex(i)][1],j+1)+phi2*CZWu23(plateCell[Tindex(i)][2],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valZWu31=(phi0*CZWu31(plateCell[Tindex(i)][0],j)+phi1*CZWu31(plateCell[Tindex(i)][1],j)+phi2*CZWu31(plateCell[Tindex(i)][2],j)+phi3*CZWu31(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CZWu31(plateCell[Tindex(i)][0],j+1)+phi1*CZWu31(plateCell[Tindex(i)][1],j+1)+phi2*CZWu31(plateCell[Tindex(i)][2],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valZWv11=(phi0*CZWv11(plateCell[Tindex(i)][0],j)+phi1*CZWv11(plateCell[Tindex(i)][1],j)+phi2*CZWv11(plateCell[Tindex(i)][2],j)+phi3*CZWv11(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CZWv11(plateCell[Tindex(i)][0],j+1)+phi1*CZWv11(plateCell[Tindex(i)][1],j+1)+phi2*CZWv11(plateCell[Tindex(i)][2],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valZWv12=(phi0*CZWv12(plateCell[Tindex(i)][0],j)+phi1*CZWv12(plateCell[Tindex(i)][1],j)+phi2*CZWv12(plateCell[Tindex(i)][2],j)+phi3*CZWv12(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CZWv12(plateCell[Tindex(i)][0],j+1)+phi1*CZWv12(plateCell[Tindex(i)][1],j+1)+phi2*CZWv12(plateCell[Tindex(i)][2],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valZWv22=(phi0*CZWv22(plateCell[Tindex(i)][0],j)+phi1*CZWv22(plateCell[Tindex(i)][1],j)+phi2*CZWv22(plateCell[Tindex(i)][2],j)+phi3*CZWv22(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CZWv22(plateCell[Tindex(i)][0],j+1)+phi1*CZWv22(plateCell[Tindex(i)][1],j+1)+phi2*CZWv22(plateCell[Tindex(i)][2],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valZWv33=(phi0*CZWv33(plateCell[Tindex(i)][0],j)+phi1*CZWv33(plateCell[Tindex(i)][1],j)+phi2*CZWv33(plateCell[Tindex(i)][2],j)+phi3*CZWv33(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CZWv33(plateCell[Tindex(i)][0],j+1)+phi1*CZWv33(plateCell[Tindex(i)][1],j+1)+phi2*CZWv33(plateCell[Tindex(i)][2],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valZWv23=(phi0*CZWv23(plateCell[Tindex(i)][0],j)+phi1*CZWv23(plateCell[Tindex(i)][1],j)+phi2*CZWv23(plateCell[Tindex(i)][2],j)+phi3*CZWv23(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CZWv23(plateCell[Tindex(i)][0],j+1)+phi1*CZWv23(plateCell[Tindex(i)][1],j+1)+phi2*CZWv23(plateCell[Tindex(i)][2],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valZWv31=(phi0*CZWv31(plateCell[Tindex(i)][0],j)+phi1*CZWv31(plateCell[Tindex(i)][1],j)+phi2*CZWv31(plateCell[Tindex(i)][2],j)+phi3*CZWv31(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CZWv31(plateCell[Tindex(i)][0],j+1)+phi1*CZWv31(plateCell[Tindex(i)][1],j+1)+phi2*CZWv31(plateCell[Tindex(i)][2],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valZWw11=(phi0*CZWw11(plateCell[Tindex(i)][0],j)+phi1*CZWw11(plateCell[Tindex(i)][1],j)+phi2*CZWw11(plateCell[Tindex(i)][2],j)+phi3*CZWw11(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CZWw11(plateCell[Tindex(i)][0],j+1)+phi1*CZWw11(plateCell[Tindex(i)][1],j+1)+phi2*CZWw11(plateCell[Tindex(i)][2],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valZWw12=(phi0*CZWw12(plateCell[Tindex(i)][0],j)+phi1*CZWw12(plateCell[Tindex(i)][1],j)+phi2*CZWw12(plateCell[Tindex(i)][2],j)+phi3*CZWw12(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CZWw12(plateCell[Tindex(i)][0],j+1)+phi1*CZWw12(plateCell[Tindex(i)][1],j+1)+phi2*CZWw12(plateCell[Tindex(i)][2],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valZWw22=(phi0*CZWw22(plateCell[Tindex(i)][0],j)+phi1*CZWw22(plateCell[Tindex(i)][1],j)+phi2*CZWw22(plateCell[Tindex(i)][2],j)+phi3*CZWw22(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CZWw22(plateCell[Tindex(i)][0],j+1)+phi1*CZWw22(plateCell[Tindex(i)][1],j+1)+phi2*CZWw22(plateCell[Tindex(i)][2],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valZWw33=(phi0*CZWw33(plateCell[Tindex(i)][0],j)+phi1*CZWw33(plateCell[Tindex(i)][1],j)+phi2*CZWw33(plateCell[Tindex(i)][2],j)+phi3*CZWw33(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CZWw33(plateCell[Tindex(i)][0],j+1)+phi1*CZWw33(plateCell[Tindex(i)][1],j+1)+phi2*CZWw33(plateCell[Tindex(i)][2],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valZWw23=(phi0*CZWw23(plateCell[Tindex(i)][0],j)+phi1*CZWw23(plateCell[Tindex(i)][1],j)+phi2*CZWw23(plateCell[Tindex(i)][2],j)+phi3*CZWw23(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CZWw23(plateCell[Tindex(i)][0],j+1)+phi1*CZWw23(plateCell[Tindex(i)][1],j+1)+phi2*CZWw23(plateCell[Tindex(i)][2],j+1))*(RHT-Tmin-j*delt2)/delt2;
		real valZWw31=(phi0*CZWw31(plateCell[Tindex(i)][0],j)+phi1*CZWw31(plateCell[Tindex(i)][1],j)+phi2*CZWw31(plateCell[Tindex(i)][2],j)+phi3*CZWw31(plateCell[Tindex(i)][3],j))*(Tmin+j*delt2+delt2-RHT)/delt2+(phi0*CZWw31(plateCell[Tindex(i)][0],j+1)+phi1*CZWw31(plateCell[Tindex(i)][1],j+1)+phi2*CZWw31(plateCell[Tindex(i)][2],j+1))*(RHT-Tmin-j*delt2)/delt2;
		
        		
		MU2[][i]=MU1[][i]+epsilon^2*(valu111*(dxxU0(px,py,pz)/(R1+pz)/(R1+pz)+dxW0(px,py,pz)/(R1+pz)/(R1+pz))+valu122*(dxyV0(px,py,pz)/(R1+pz)/(R2+pz)+dxW0(px,py,pz)/(R1+pz)/(R2+pz))+valu133*dxzW0(px,py,pz)/(R1+pz)//alpha1,m,alpha2
					   +valu112*(dxyU0(px,py,pz)/(R1+pz)/(R2+pz)+dxxV0(px,py,pz)/(R1+pz)/(R1+pz))
					   +valu123*(dxzV0(px,py,pz)/(R1+pz)+dxyW0(px,py,pz)/(R1+pz)/(R2+pz)-dxV0(px,py,pz)/(R1+pz)/(R2+pz))
					   +valu131*(dxxW0(px,py,pz)/(R1+pz)/(R1+pz)+dxzU0(px,py,pz)/(R1+pz)-dxU0(px,py,pz)/(R1+pz)/(R1+pz))
					   +valu211*(dyxU0(px,py,pz)/(R1+pz)/(R2+pz)+dyW0(px,py,pz)/(R1+pz)/(R2+pz))+valu222*(dyyV0(px,py,pz)/(R2+pz)/(R2+pz)+dyW0(px,py,pz)/(R2+pz)/(R2+pz))+valu233*dyzW0(px,py,pz)/(R2+pz)
					   +valu212*(dyyU0(px,py,pz)/(R2+pz)/(R2+pz)+dyxV0(px,py,pz)/(R1+pz)/(R2+pz))
					   +valu223*(dyzV0(px,py,pz)/(R2+pz)+dyyW0(px,py,pz)/(R2+pz)/(R2+pz)-dyV0(px,py,pz)/(R2+pz)/(R2+pz))
					   +valu231*(dyxW0(px,py,pz)/(R1+pz)/(R2+pz)+dyzU0(px,py,pz)/(R2+pz)-dyU0(px,py,pz)/(R1+pz)/(R2+pz))
					   +valu311*(dzxU0(px,py,pz)/(R1+pz)-dxU0(px,py,pz)/(R1+pz)/(R1+pz)+dzW0(px,py,pz)/(R1+pz)-HW(px,py,pz)/(R1+pz)/(R1+pz))+valu322*(dzyV0(px,py,pz)/(R2+pz)-dyV0(px,py,pz)/(R2+pz)/(R2+pz)+dzW0(px,py,pz)/(R2+pz)-HW(px,py,pz)/(R2+pz)/(R2+pz))+valu333*dzzW0(px,py,pz)
					   +valu312*(dzyU0(px,py,pz)/(R2+pz)+dzxV0(px,py,pz)/(R1+pz)-dyU0(px,py,pz)/(R2+pz)/(R2+pz)-dxV0(px,py,pz)/(R1+pz)/(R1+pz))
					   +valu323*(dzzV0(px,py,pz)+dzyW0(px,py,pz)/(R2+pz)+HV(px,py,pz)/(R2+pz)/(R2+pz)-dyW0(px,py,pz)/(R2+pz)/(R2+pz)-dzV0(px,py,pz)/(R2+pz))
					   +valu331*(dzxW0(px,py,pz)/(R1+pz)+dzzU0(px,py,pz)+HU(px,py,pz)/(R1+pz)/(R1+pz)-dxW0(px,py,pz)/(R1+pz)/(R1+pz)-dzU0(px,py,pz)/(R1+pz))
					   +valHu1*dxHT(px,py,pz)/(R1+pz)+valHu2*dyHT(px,py,pz)/(R2+pz)+valHu3*dzHT(px,py,pz)
					   +valZQ1*(HT(px,py,pz)-intiT)
					   +valZWu11*(dxU0(px,py,pz)/(R1+pz)+HW(px,py,pz)/(R1+pz))+valZWu22*(dyV0(px,py,pz)/(R2+pz)+HW(px,py,pz)/(R2+pz))+valZWu33*dzW0(px,py,pz)
		               +valZWu12*(dxV0(px,py,pz)/(R1+pz)+dyU0(px,py,pz)/(R2+pz))
					   +valZWu23*(dyW0(px,py,pz)/(R2+pz)+dzV0(px,py,pz)-HV(px,py,pz)/(R2+pz))
					   +valZWu31*(dxW0(px,py,pz)/(R1+pz)+dzU0(px,py,pz)-HU(px,py,pz)/(R1+pz))
					   +valFu1*ddHum1(px,py,pz)
					   +valFu2*ddHvm1(px,py,pz)
					   +valFu3*ddHwm1(px,py,pz)
					   +valX11*dxHT(px,py,pz)/(R1+pz)*(HT(px,py,pz)-intiT)
					   +valX21*dyHT(px,py,pz)/(R2+pz)*(HT(px,py,pz)-intiT)
					   +valX31*dzHT(px,py,pz)*(HT(px,py,pz)-intiT));
					   
		MV2[][i]=MV1[][i]+epsilon^2*(valv111*(dxxU0(px,py,pz)/(R1+pz)/(R1+pz)+dxW0(px,py,pz)/(R1+pz)/(R1+pz))+valv122*(dxyV0(px,py,pz)/(R1+pz)/(R2+pz)+dxW0(px,py,pz)/(R1+pz)/(R2+pz))+valv133*dxzW0(px,py,pz)/(R1+pz)//alpha1,m,alpha2
					   +valv112*(dxyU0(px,py,pz)/(R1+pz)/(R2+pz)+dxxV0(px,py,pz)/(R1+pz)/(R1+pz))
					   +valv123*(dxzV0(px,py,pz)/(R1+pz)+dxyW0(px,py,pz)/(R1+pz)/(R2+pz)-dxV0(px,py,pz)/(R1+pz)/(R2+pz))
					   +valv131*(dxxW0(px,py,pz)/(R1+pz)/(R1+pz)+dxzU0(px,py,pz)/(R1+pz)-dxU0(px,py,pz)/(R1+pz)/(R1+pz))
					   +valv211*(dyxU0(px,py,pz)/(R1+pz)/(R2+pz)+dyW0(px,py,pz)/(R1+pz)/(R2+pz))+valv222*(dyyV0(px,py,pz)/(R2+pz)/(R2+pz)+dyW0(px,py,pz)/(R2+pz)/(R2+pz))+valv233*dyzW0(px,py,pz)/(R2+pz)
					   +valv212*(dyyU0(px,py,pz)/(R2+pz)/(R2+pz)+dyxV0(px,py,pz)/(R1+pz)/(R2+pz))
					   +valv223*(dyzV0(px,py,pz)/(R2+pz)+dyyW0(px,py,pz)/(R2+pz)/(R2+pz)-dyV0(px,py,pz)/(R2+pz)/(R2+pz))
					   +valv231*(dyxW0(px,py,pz)/(R1+pz)/(R2+pz)+dyzU0(px,py,pz)/(R2+pz)-dyU0(px,py,pz)/(R1+pz)/(R2+pz))
					   +valv311*(dzxU0(px,py,pz)/(R1+pz)-dxU0(px,py,pz)/(R1+pz)/(R1+pz)+dzW0(px,py,pz)/(R1+pz)-HW(px,py,pz)/(R1+pz)/(R1+pz))+valv322*(dzyV0(px,py,pz)/(R2+pz)-dyV0(px,py,pz)/(R2+pz)/(R2+pz)+dzW0(px,py,pz)/(R2+pz)-HW(px,py,pz)/(R2+pz)/(R2+pz))+valv333*dzzW0(px,py,pz)
					   +valv312*(dzyU0(px,py,pz)/(R2+pz)+dzxV0(px,py,pz)/(R1+pz)-dyU0(px,py,pz)/(R2+pz)/(R2+pz)-dxV0(px,py,pz)/(R1+pz)/(R1+pz))
					   +valv323*(dzzV0(px,py,pz)+dzyW0(px,py,pz)/(R2+pz)+HV(px,py,pz)/(R2+pz)/(R2+pz)-dyW0(px,py,pz)/(R2+pz)/(R2+pz)-dzV0(px,py,pz)/(R2+pz))
					   +valv331*(dzxW0(px,py,pz)/(R1+pz)+dzzU0(px,py,pz)+HU(px,py,pz)/(R1+pz)/(R1+pz)-dxW0(px,py,pz)/(R1+pz)/(R1+pz)-dzU0(px,py,pz)/(R1+pz))
					   +valHv1*dxHT(px,py,pz)/(R1+pz)+valHv2*dyHT(px,py,pz)/(R2+pz)+valHv3*dzHT(px,py,pz)
					   +valZQ2*(HT(px,py,pz)-intiT)
					   +valZWv11*(dxU0(px,py,pz)/(R1+pz)+HW(px,py,pz)/(R1+pz))+valZWv22*(dyV0(px,py,pz)/(R2+pz)+HW(px,py,pz)/(R2+pz))+valZWv33*dzW0(px,py,pz)
		               +valZWv12*(dxV0(px,py,pz)/(R1+pz)+dyU0(px,py,pz)/(R2+pz))
					   +valZWv23*(dyW0(px,py,pz)/(R2+pz)+dzV0(px,py,pz)-HV(px,py,pz)/(R2+pz))
					   +valZWv31*(dxW0(px,py,pz)/(R1+pz)+dzU0(px,py,pz)-HU(px,py,pz)/(R1+pz))
					   +valFv1*ddHum1(px,py,pz)
					   +valFv2*ddHvm1(px,py,pz)
					   +valFv3*ddHwm1(px,py,pz)
					   +valX12*dxHT(px,py,pz)/(R1+pz)*(HT(px,py,pz)-intiT)
					   +valX22*dyHT(px,py,pz)/(R2+pz)*(HT(px,py,pz)-intiT)
					   +valX32*dzHT(px,py,pz)*(HT(px,py,pz)-intiT));	
					   
		MW2[][i]=MW1[][i]+epsilon^2*(valw111*(dxxU0(px,py,pz)/(R1+pz)/(R1+pz)+dxW0(px,py,pz)/(R1+pz)/(R1+pz))+valw122*(dxyV0(px,py,pz)/(R1+pz)/(R2+pz)+dxW0(px,py,pz)/(R1+pz)/(R2+pz))+valw133*dxzW0(px,py,pz)/(R1+pz)//alpha1,m,alpha2
					   +valw112*(dxyU0(px,py,pz)/(R1+pz)/(R2+pz)+dxxV0(px,py,pz)/(R1+pz)/(R1+pz))
					   +valw123*(dxzV0(px,py,pz)/(R1+pz)+dxyW0(px,py,pz)/(R1+pz)/(R2+pz)-dxV0(px,py,pz)/(R1+pz)/(R2+pz))
					   +valw131*(dxxW0(px,py,pz)/(R1+pz)/(R1+pz)+dxzU0(px,py,pz)/(R1+pz)-dxU0(px,py,pz)/(R1+pz)/(R1+pz))
					   +valw211*(dyxU0(px,py,pz)/(R1+pz)/(R2+pz)+dyW0(px,py,pz)/(R1+pz)/(R2+pz))+valw222*(dyyV0(px,py,pz)/(R2+pz)/(R2+pz)+dyW0(px,py,pz)/(R2+pz)/(R2+pz))+valw233*dyzW0(px,py,pz)/(R2+pz)
					   +valw212*(dyyU0(px,py,pz)/(R2+pz)/(R2+pz)+dyxV0(px,py,pz)/(R1+pz)/(R2+pz))
					   +valw223*(dyzV0(px,py,pz)/(R2+pz)+dyyW0(px,py,pz)/(R2+pz)/(R2+pz)-dyV0(px,py,pz)/(R2+pz)/(R2+pz))
					   +valw231*(dyxW0(px,py,pz)/(R1+pz)/(R2+pz)+dyzU0(px,py,pz)/(R2+pz)-dyU0(px,py,pz)/(R1+pz)/(R2+pz))
					   +valw311*(dzxU0(px,py,pz)/(R1+pz)-dxU0(px,py,pz)/(R1+pz)/(R1+pz)+dzW0(px,py,pz)/(R1+pz)-HW(px,py,pz)/(R1+pz)/(R1+pz))+valw322*(dzyV0(px,py,pz)/(R2+pz)-dyV0(px,py,pz)/(R2+pz)/(R2+pz)+dzW0(px,py,pz)/(R2+pz)-HW(px,py,pz)/(R2+pz)/(R2+pz))+valw333*dzzW0(px,py,pz)
					   +valw312*(dzyU0(px,py,pz)/(R2+pz)+dzxV0(px,py,pz)/(R1+pz)-dyU0(px,py,pz)/(R2+pz)/(R2+pz)-dxV0(px,py,pz)/(R1+pz)/(R1+pz))
					   +valw323*(dzzV0(px,py,pz)+dzyW0(px,py,pz)/(R2+pz)+HV(px,py,pz)/(R2+pz)/(R2+pz)-dyW0(px,py,pz)/(R2+pz)/(R2+pz)-dzV0(px,py,pz)/(R2+pz))
					   +valw331*(dzxW0(px,py,pz)/(R1+pz)+dzzU0(px,py,pz)+HU(px,py,pz)/(R1+pz)/(R1+pz)-dxW0(px,py,pz)/(R1+pz)/(R1+pz)-dzU0(px,py,pz)/(R1+pz))
					   +valHw1*dxHT(px,py,pz)/(R1+pz)+valHw2*dyHT(px,py,pz)/(R2+pz)+valHw3*dzHT(px,py,pz)
					   +valZQ3*(HT(px,py,pz)-intiT)
					   +valZWw11*(dxU0(px,py,pz)/(R1+pz)+HW(px,py,pz)/(R1+pz))+valZWw22*(dyV0(px,py,pz)/(R2+pz)+HW(px,py,pz)/(R2+pz))+valZWw33*dzW0(px,py,pz)
		               +valZWw12*(dxV0(px,py,pz)/(R1+pz)+dyU0(px,py,pz)/(R2+pz))
					   +valZWw23*(dyW0(px,py,pz)/(R2+pz)+dzV0(px,py,pz)-HV(px,py,pz)/(R2+pz))
					   +valZWw31*(dxW0(px,py,pz)/(R1+pz)+dzU0(px,py,pz)-HU(px,py,pz)/(R1+pz))
					   +valFw1*ddHum1(px,py,pz)
					   +valFw2*ddHvm1(px,py,pz)
					   +valFw3*ddHwm1(px,py,pz)					   
					   +valX13*dxHT(px,py,pz)/(R1+pz)*(HT(px,py,pz)-intiT)
					   +valX23*dyHT(px,py,pz)/(R2+pz)*(HT(px,py,pz)-intiT)
					   +valX33*dzHT(px,py,pz)*(HT(px,py,pz)-intiT));		
					   
		MT2[][i]=MT1[][i]+epsilon^2*(valM11*dxxHT(px,py,pz)/(R1+pz)/(R1+pz)+valM22*dyyHT(px,py,pz)/(R2+pz)/(R2+pz)+valM33*dzzHT(px,py,pz)
						 +valM12*dxyHT(px,py,pz)/(R1+pz)/(R2+pz)+M21*dyxHT(px,py,pz)/(R1+pz)/(R2+pz)
						 +valM23*dyzHT(px,py,pz)/(R2+pz)+M32*(dzyHT(px,py,pz)/(R2+pz)-dyHT(px,py,pz)/(R2+pz)/(R2+pz))
						 +valM31*dzxHT(px,py,pz)/(R1+pz)+M13*(dxzHT(px,py,pz)/(R1+pz)-dxHT(px,py,pz)/(R1+pz)/(R1+pz))
						 +valZRR1*dxHT(px,py,pz)/(R1+pz)+valZRR2*dyHT(px,py,pz)/(R2+pz)+valZRR3*dzHT(px,py,pz)
						 +valS*(3*HT(px,py,pz)-4*HTp(px,py,pz)+HTpp(px,py,pz))/(2*dt)
						 //[1.0/(R1+alpha3)*dx(u1)+u3/(R1+alpha3),  1.0/(R2+alpha3)*dy(u2)+u3/(R2+alpha3),  dz(u3),  1.0/(R1+alpha3)*dx(u2)+1.0/(R2+alpha3)*dy(u1),  1.0/(R2+alpha3)*dy(u3)+dz(u2)-u2/(R2+alpha3),  1.0/(R1+alpha3)*dx(u3)+dz(u1)-u1/(R1+alpha3)]
						 -valG11*(3*dxU0(px,py,pz)/(R1+pz)-4*dxUp(px,py,pz)/(R1+pz)+dxUpp(px,py,pz)/(R1+pz))/(2*dt)-valG11*(3*HW(px,py,pz)/(R1+pz)-4*Hwp(px,py,pz)/(R1+pz)+Hwpp(px,py,pz)/(R1+pz))/(2*dt)
						 -valG22*(3*dyV0(px,py,pz)/(R2+pz)-4*dyVp(px,py,pz)/(R2+pz)+dyVpp(px,py,pz)/(R2+pz))/(2*dt)-valG22*(3*HW(px,py,pz)/(R2+pz)-4*Hwp(px,py,pz)/(R2+pz)+Hwpp(px,py,pz)/(R2+pz))/(2*dt)
						 -valG33*(3*dzW0(px,py,pz)-4*dzWp(px,py,pz)+dzWpp(px,py,pz))/(2*dt)
						 -valG12*(3*dxV0(px,py,pz)/(R1+pz)-4*dxVp(px,py,pz)/(R1+pz)+dxVpp(px,py,pz)/(R1+pz)+3*dyU0(px,py,pz)/(R2+pz)-4*dyUp(px,py,pz)/(R2+pz)+dyUpp(px,py,pz)/(R2+pz))/(2*dt)
						 -valG23*(3*dyW0(px,py,pz)/(R2+pz)-4*dyWp(px,py,pz)/(R2+pz)+dyWpp(px,py,pz)/(R2+pz)+3*dzV0(px,py,pz)-4*dzVp(px,py,pz)+dzVpp(px,py,pz))/(2*dt)+valG23*(3*HV(px,py,pz)/(R2+pz)-4*Hvp(px,py,pz)/(R2+pz)+Hvpp(px,py,pz)/(R2+pz))/(2*dt)
						 -valG31*(3*dxW0(px,py,pz)/(R1+pz)-4*dxWp(px,py,pz)/(R1+pz)+dxWpp(px,py,pz)/(R1+pz)+3*dzU0(px,py,pz)-4*dzUp(px,py,pz)+dzUpp(px,py,pz))/(2*dt)+valG31*(3*HU(px,py,pz)/(R1+pz)-4*Hup(px,py,pz)/(R1+pz)+Hupp(px,py,pz)/(R1+pz))/(2*dt)
						 +valB11*dxHT(px,py,pz)/(R1+pz)*dxHT(px,py,pz)/(R1+pz)
					     +valB12*dxHT(px,py,pz)/(R1+pz)*dyHT(px,py,pz)/(R2+pz)
					     +valB21*dyHT(px,py,pz)/(R2+pz)*dxHT(px,py,pz)/(R1+pz)
					     +valB22*dyHT(px,py,pz)/(R2+pz)*dyHT(px,py,pz)/(R2+pz)
					     +valB33*dzHT(px,py,pz)*dzHT(px,py,pz)
					     +valB23*dyHT(px,py,pz)/(R2+pz)*dzHT(px,py,pz)
					     +valB32*dzHT(px,py,pz)*dyHT(px,py,pz)/(R2+pz)
					     +valB13*dxHT(px,py,pz)/(R1+pz)*dzHT(px,py,pz)
					     +valB31*dzHT(px,py,pz)*dxHT(px,py,pz)/(R1+pz));
		
		/* MU2[][i]=MU1[][i]+epsilon^2*(valu111*dxxU0(px,py,pz)+valu122*(dxyV0(px,py,pz)/(R2+pz)+dxW0(px,py,pz)/(R2+pz))+valu133*dxzW0(px,py,pz)//alpha1,m,alpha2
					   +valu112*(dxyU0(px,py,pz)/(R2+pz)+dxxV0(px,py,pz))
					   +valu123*(dxzV0(px,py,pz)+dxyW0(px,py,pz)/(R2+pz)-dxV0(px,py,pz)/(R2+pz))
					   +valu131*(dxxW0(px,py,pz)+dxzU0(px,py,pz))
					   +valu211*dyxU0(px,py,pz)/(R2+pz)+valu222*(dyyV0(px,py,pz)/(R2+pz)/(R2+pz)+dyW0(px,py,pz)/(R2+pz)/(R2+pz))+valu233*dyzW0(px,py,pz)/(R2+pz)
					   +valu212*(dyyU0(px,py,pz)/(R2+pz)/(R2+pz)+dyxV0(px,py,pz)/(R2+pz))
					   +valu223*(dyzV0(px,py,pz)/(R2+pz)+dyyW0(px,py,pz)/(R2+pz)/(R2+pz)-dyV0(px,py,pz)/(R2+pz)/(R2+pz))
					   +valu231*(dyxW0(px,py,pz)/(R2+pz)+dyzU0(px,py,pz)/(R2+pz))
					   +valu311*dzxU0(px,py,pz)+valu322*(dzyV0(px,py,pz)/(R2+pz)-dyV0(px,py,pz)/(R2+pz)/(R2+pz)+dzW0(px,py,pz)/(R2+pz)-HW(px,py,pz)/(R2+pz)/(R2+pz))+valu333*dzzW0(px,py,pz)
					   +valu312*(dzyU0(px,py,pz)/(R2+pz)+dzxV0(px,py,pz)-dyU0(px,py,pz)/(R2+pz)/(R2+pz))
					   +valu323*(dzzV0(px,py,pz)+dzyW0(px,py,pz)/(R2+pz)+HV(px,py,pz)/(R2+pz)/(R2+pz)-dyW0(px,py,pz)/(R2+pz)/(R2+pz)-dzV0(px,py,pz)/(R2+pz))
					   +valu331*(dzxW0(px,py,pz)+dzzU0(px,py,pz))
					   +valHu1*dxHT(px,py,pz)/(R1+pz)+valHu2*dyHT(px,py,pz)/(R2+pz)+valHu3*dzHT(px,py,pz)
					   +valZQ1*(HT(px,py,pz)-intiT)
					   +valZWu11*dxU0(px,py,pz)+valZWu22*(dyV0(px,py,pz)/(R2+pz)+HW(px,py,pz)/(R2+pz))+valZWu33*dzW0(px,py,pz)
		               +valZWu12*(dxV0(px,py,pz)+dyU0(px,py,pz)/(R2+pz))
					   +valZWu23*(dyW0(px,py,pz)/(R2+pz)+dzV0(px,py,pz)-HV(px,py,pz)/(R2+pz))
					   +valZWu31*(dxW0(px,py,pz)+dzU0(px,py,pz))
					   +valFu1*ddHum1(px,py,pz)
					   +valFu2*ddHvm1(px,py,pz)
					   +valFu3*ddHwm1(px,py,pz)
					   +valX11*dxHT(px,py,pz)*(HT(px,py,pz)-intiT)
					   +valX21*dyHT(px,py,pz)/(R2+pz)*(HT(px,py,pz)-intiT)
					   +valX31*dzHT(px,py,pz)*(HT(px,py,pz)-intiT));
					   
		MV2[][i]=MV1[][i]+epsilon^2*(valv111*dxxU0(px,py,pz)+valv122*(dxyV0(px,py,pz)/(R2+pz)+dxW0(px,py,pz)/(R2+pz))+valv133*dxzW0(px,py,pz)//alpha1,m,alpha2
					   +valv112*(dxyU0(px,py,pz)/(R2+pz)+dxxV0(px,py,pz))
					   +valv123*(dxzV0(px,py,pz)+dxyW0(px,py,pz)/(R2+pz)-dxV0(px,py,pz)/(R2+pz))
					   +valv131*(dxxW0(px,py,pz)+dxzU0(px,py,pz))
					   +valv211*dyxU0(px,py,pz)/(R2+pz)+valv222*(dyyV0(px,py,pz)/(R2+pz)/(R2+pz)+dyW0(px,py,pz)/(R2+pz)/(R2+pz))+valv233*dyzW0(px,py,pz)/(R2+pz)
					   +valv212*(dyyU0(px,py,pz)/(R2+pz)/(R2+pz)+dyxV0(px,py,pz)/(R2+pz))
					   +valv223*(dyzV0(px,py,pz)/(R2+pz)+dyyW0(px,py,pz)/(R2+pz)/(R2+pz)-dyV0(px,py,pz)/(R2+pz)/(R2+pz))
					   +valv231*(dyxW0(px,py,pz)/(R2+pz)+dyzU0(px,py,pz)/(R2+pz))
					   +valv311*dzxU0(px,py,pz)+valv322*(dzyV0(px,py,pz)/(R2+pz)-dyV0(px,py,pz)/(R2+pz)/(R2+pz)+dzW0(px,py,pz)/(R2+pz)-HW(px,py,pz)/(R2+pz)/(R2+pz))+valv333*dzzW0(px,py,pz)
					   +valv312*(dzyU0(px,py,pz)/(R2+pz)+dzxV0(px,py,pz)-dyU0(px,py,pz)/(R2+pz)/(R2+pz))
					   +valv323*(dzzV0(px,py,pz)+dzyW0(px,py,pz)/(R2+pz)+HV(px,py,pz)/(R2+pz)/(R2+pz)-dyW0(px,py,pz)/(R2+pz)/(R2+pz)-dzV0(px,py,pz)/(R2+pz))
					   +valv331*(dzxW0(px,py,pz)+dzzU0(px,py,pz))
					   +valHv1*dxHT(px,py,pz)+valHv2*dyHT(px,py,pz)/(R2+pz)+valHv3*dzHT(px,py,pz)
					   +valZQ2*(HT(px,py,pz)-intiT)
					   +valZWv11*dxU0(px,py,pz)+valZWv22*(dyV0(px,py,pz)/(R2+pz)+HW(px,py,pz)/(R2+pz))+valZWv33*dzW0(px,py,pz)
		               +valZWv12*(dxV0(px,py,pz)+dyU0(px,py,pz)/(R2+pz))
					   +valZWv23*(dyW0(px,py,pz)/(R2+pz)+dzV0(px,py,pz)-HV(px,py,pz)/(R2+pz))
					   +valZWv31*(dxW0(px,py,pz)+dzU0(px,py,pz))
					   +valFv1*ddHum1(px,py,pz)
					   +valFv2*ddHvm1(px,py,pz)
					   +valFv3*ddHwm1(px,py,pz)
					   +valX12*dxHT(px,py,pz)*(HT(px,py,pz)-intiT)
					   +valX22*dyHT(px,py,pz)/(R2+pz)*(HT(px,py,pz)-intiT)
					   +valX32*dzHT(px,py,pz)*(HT(px,py,pz)-intiT));		  
					   
		MW2[][i]=MW1[][i]+epsilon^2*(valw111*dxxU0(px,py,pz)+valw122*(dxyV0(px,py,pz)/(R2+pz)+dxW0(px,py,pz)/(R2+pz))+valw133*dxzW0(px,py,pz)//alpha1,m,alpha2
					   +valw112*(dxyU0(px,py,pz)/(R2+pz)+dxxV0(px,py,pz))
					   +valw123*(dxzV0(px,py,pz)+dxyW0(px,py,pz)/(R2+pz)-dxV0(px,py,pz)/(R2+pz))
					   +valw131*(dxxW0(px,py,pz)+dxzU0(px,py,pz))
					   +valw211*dyxU0(px,py,pz)/(R2+pz)+valw222*(dyyV0(px,py,pz)/(R2+pz)/(R2+pz)+dyW0(px,py,pz)/(R2+pz)/(R2+pz))+valw233*dyzW0(px,py,pz)/(R2+pz)
					   +valw212*(dyyU0(px,py,pz)/(R2+pz)/(R2+pz)+dyxV0(px,py,pz)/(R2+pz))
					   +valw223*(dyzV0(px,py,pz)/(R2+pz)+dyyW0(px,py,pz)/(R2+pz)/(R2+pz)-dyV0(px,py,pz)/(R2+pz)/(R2+pz))
					   +valw231*(dyxW0(px,py,pz)/(R2+pz)+dyzU0(px,py,pz)/(R2+pz))
					   +valw311*dzxU0(px,py,pz)+valw322*(dzyV0(px,py,pz)/(R2+pz)-dyV0(px,py,pz)/(R2+pz)/(R2+pz)+dzW0(px,py,pz)/(R2+pz)-HW(px,py,pz)/(R2+pz)/(R2+pz))+valw333*dzzW0(px,py,pz)
					   +valw312*(dzyU0(px,py,pz)/(R2+pz)+dzxV0(px,py,pz)-dyU0(px,py,pz)/(R2+pz)/(R2+pz))
					   +valw323*(dzzV0(px,py,pz)+dzyW0(px,py,pz)/(R2+pz)+HV(px,py,pz)/(R2+pz)/(R2+pz)-dyW0(px,py,pz)/(R2+pz)/(R2+pz)-dzV0(px,py,pz)/(R2+pz))
					   +valw331*(dzxW0(px,py,pz)+dzzU0(px,py,pz))
					   +valHw1*dxHT(px,py,pz)+valHw2*dyHT(px,py,pz)/(R2+pz)+valHw3*dzHT(px,py,pz)
					   +valZQ3*(HT(px,py,pz)-intiT)
					   +valZWw11*dxU0(px,py,pz)+valZWw22*(dyV0(px,py,pz)/(R2+pz)+HW(px,py,pz)/(R2+pz))+valZWw33*dzW0(px,py,pz)
		               +valZWw12*(dxV0(px,py,pz)+dyU0(px,py,pz)/(R2+pz))
					   +valZWw23*(dyW0(px,py,pz)/(R2+pz)+dzV0(px,py,pz)-HV(px,py,pz)/(R2+pz))
					   +valZWw31*(dxW0(px,py,pz)+dzU0(px,py,pz))
					   +valFw1*ddHum1(px,py,pz)
					   +valFw2*ddHvm1(px,py,pz)
					   +valFw3*ddHwm1(px,py,pz)
					   +valX13*dxHT(px,py,pz)*(HT(px,py,pz)-intiT)
					   +valX23*dyHT(px,py,pz)/(R2+pz)*(HT(px,py,pz)-intiT)
					   +valX33*dzHT(px,py,pz)*(HT(px,py,pz)-intiT));					   
					   
		MT2[][i]=MT1[][i]+epsilon^2*(valM11*dxxHT(px,py,pz)+valM22*dyyHT(px,py,pz)/(R2+pz)/(R2+pz)+valM33*dzzHT(px,py,pz)
						 +valM12*dxyHT(px,py,pz)/(R2+pz)+valM21*dyxHT(px,py,pz)/(R2+pz)
						 +valM23*dyzHT(px,py,pz)/(R2+pz)+valM32*(dzyHT(px,py,pz)/(R2+pz)-dyHT(px,py,pz)/(R2+pz)/(R2+pz))
						 +valM31*dzxHT(px,py,pz)+valM13*dxzHT(px,py,pz)
						 +valZRR1*dxHT(px,py,pz)+valZRR2*dyHT(px,py,pz)/(R2+pz)+valZRR3*dzHT(px,py,pz)
						 +valS*(3*HT(px,py,pz)-4*HTp(px,py,pz)+HTpp(px,py,pz))/(2*dt)
						 -valG11*(3*dxU0(px,py,pz)-4*dxUp(px,py,pz)+dxUpp(px,py,pz))/(2*dt)
						 -valG22*(3*dyV0(px,py,pz)/(R2+pz)-4*dyVp(px,py,pz)/(R2+pz)+dyVpp(px,py,pz)/(R2+pz))/(2*dt)-valG22*(3*HW(px,py,pz)/(R2+pz)-4*Hwp(px,py,pz)/(R2+pz)+Hwpp(px,py,pz)/(R2+pz))/(2*dt)
						 -valG33*(3*dzW0(px,py,pz)-4*dzWp(px,py,pz)+dzWpp(px,py,pz))/(2*dt)
						 -valG12*(3*dxV0(px,py,pz)-4*dxVp(px,py,pz)+dxVpp(px,py,pz)+3*dyU0(px,py,pz)/(R2+pz)-4*dyUp(px,py,pz)/(R2+pz)+dyUpp(px,py,pz)/(R2+pz))/(2*dt)
						 -valG23*(3*dyW0(px,py,pz)/(R2+pz)-4*dyWp(px,py,pz)/(R2+pz)+dyWpp(px,py,pz)/(R2+pz)+3*dzV0(px,py,pz)-4*dzVp(px,py,pz)+dzVpp(px,py,pz))/(2*dt)+valG23*(3*HV(px,py,pz)/(R2+pz)-4*Hvp(px,py,pz)/(R2+pz)+Hvpp(px,py,pz)/(R2+pz))/(2*dt)
						 -valG31*(3*dxW0(px,py,pz)-4*dxWp(px,py,pz)+dxWpp(px,py,pz)+3*dzU0(px,py,pz)-4*dzUp(px,py,pz)+dzUpp(px,py,pz))/(2*dt)
						 +valB11*dxHT(px,py,pz)*dxHT(px,py,pz)
					     +valB12*dxHT(px,py,pz)*dyHT(px,py,pz)/(R2+pz)
					     +valB21*dyHT(px,py,pz)/(R2+pz)*dxHT(px,py,pz)
					     +valB22*dyHT(px,py,pz)/(R2+pz)*dyHT(px,py,pz)/(R2+pz)
					     +valB33*dzHT(px,py,pz)*dzHT(px,py,pz)
					     +valB23*dyHT(px,py,pz)/(R2+pz)*dzHT(px,py,pz)
					     +valB32*dzHT(px,py,pz)*dyHT(px,py,pz)/(R2+pz)
					     +valB13*dxHT(px,py,pz)*dzHT(px,py,pz)
					     +valB31*dzHT(px,py,pz)*dxHT(px,py,pz)); */
    }
    //均匀化问题时间层向前推进时的迭代部分	
   	Hupp=Hup;
    Hvpp=Hvp;
    Hwpp=Hwp;	
    Hup=HU;
    Hvp=HV;
    Hwp=HW;
	HTpp=HTp;
	HTp=HT;	
	Hum1=HU;
    Hvm1=HV;
    Hwm1=HW;//第0层位移初始条件
	
	if(abs(t-0.10) < 1.0e-6)
    {
	  	//1.tecplot图形化显示数据结果
        //显示中面上的数据
        real nv=MacroTh.nv;
        real nt=MacroTh.nt;
        cout<<nv<<" "<<nt<<endl;
        ofstream os2("2DHomo-cs4.dat");
        ofstream os3("2DForder-cs4.dat");
        ofstream os4("2DSorder-cs4.dat");
        //2.转化为tecplot文件
        real m1,m2,m3,m4,m5,m6,m7;
        int a2,b2,cc2,d2;
        //3.转化为tecplot文件
        os2<<"TITLE = tetrahedron_mesh_in_many_spheres"<<endl;
        os2<<"VARIABLES = X, Y, homo1, homo2, homo3, homo4"<<endl;
        os2<<"ZONE N="<<nv<<",E="<<nt<<",F=FEPOINT,ET=triangle"<<endl;
        for (int i=0;i<nv;i++)
        {
          m1=MacroTh(i).x;
          m2=MacroTh(i).y;
          m4=MU0(m1,m2);
          m5=MV0(m1,m2);
          m6=MW0(m1,m2);
          m7=MT0(m1,m2);
          os2<<m1<<" "<<m2<<" "<<m4<<" "<<m5<<" "<<m6<<" "<<m7<<endl;
        }
        os2<<"\n\n\n\n"<<endl;
        for (int i=0;i<nt;i++)
        {
          a2=MacroTh[i][0]+1;
          b2=MacroTh[i][1]+1;
          cc2=MacroTh[i][2]+1;
          os2<<a2<<" "<<b2<<" "<<cc2<<endl;
        }
        //4.转化为tecplot文件
        os3<<"TITLE = tetrahedron_mesh_in_many_spheres"<<endl;
        os3<<"VARIABLES = X, Y, forder1, forder2, forder3, forder4"<<endl;
        os3<<"ZONE N="<<nv<<",E="<<nt<<",F=FEPOINT,ET=triangle"<<endl;
        for (int i=0;i<nv;i++)
        {
          m1=MacroTh(i).x;
          m2=MacroTh(i).y;
          m4=MU1(m1,m2);
          m5=MV1(m1,m2);
          m6=MW1(m1,m2);
          m7=MT1(m1,m2);
          os3<<m1<<" "<<m2<<" "<<m4<<" "<<m5<<" "<<m6<<" "<<m7<<endl;
        }
        os3<<"\n\n\n\n"<<endl;
        for (int i=0;i<nt;i++)
        {
          a2=MacroTh[i][0]+1;
          b2=MacroTh[i][1]+1;
          cc2=MacroTh[i][2]+1;
          os3<<a2<<" "<<b2<<" "<<cc2<<endl;
        }
        //5.转化为tecplot文件
        os4<<"TITLE = tetrahedron_mesh_in_many_spheres"<<endl;
        os4<<"VARIABLES = X, Y, sorder1, sorder2, sorder3, sorder4"<<endl;
        os4<<"ZONE N="<<nv<<",E="<<nt<<",F=FEPOINT,ET=triangle"<<endl;
        for (int i=0;i<nv;i++)
        {
          m1=MacroTh(i).x;
          m2=MacroTh(i).y;
          m4=MU2(m1,m2);
          m5=MV2(m1,m2);
          m6=MW2(m1,m2);
          m7=MT2(m1,m2);
          os4<<m1<<" "<<m2<<" "<<m4<<" "<<m5<<" "<<m6<<" "<<m7<<endl;
        }
        os4<<"\n\n\n\n"<<endl;
        for (int i=0;i<nt;i++)
        {
          a2=MacroTh[i][0]+1;
          b2=MacroTh[i][1]+1;
          cc2=MacroTh[i][2]+1;
          os4<<a2<<" "<<b2<<" "<<cc2<<endl; 
        }	
	}
	
	
	if(abs(t-0.20) < 1.0e-6)
    {
	  	//1.tecplot图形化显示数据结果
        //显示中面上的数据
        real nv=MacroTh.nv;
        real nt=MacroTh.nt;
        cout<<nv<<" "<<nt<<endl;
        ofstream os2("2DHomo-cs2.dat");
        ofstream os3("2DForder-cs2.dat");
        ofstream os4("2DSorder-cs2.dat");
        //2.转化为tecplot文件
        real m1,m2,m3,m4,m5,m6,m7;
        int a2,b2,cc2,d2;
        //3.转化为tecplot文件
        os2<<"TITLE = tetrahedron_mesh_in_many_spheres"<<endl;
        os2<<"VARIABLES = X, Y, homo1, homo2, homo3, homo4"<<endl;
        os2<<"ZONE N="<<nv<<",E="<<nt<<",F=FEPOINT,ET=triangle"<<endl;
        for (int i=0;i<nv;i++)
        {
          m1=MacroTh(i).x;
          m2=MacroTh(i).y;
          m4=MU0(m1,m2);
          m5=MV0(m1,m2);
          m6=MW0(m1,m2);
          m7=MT0(m1,m2);
          os2<<m1<<" "<<m2<<" "<<m4<<" "<<m5<<" "<<m6<<" "<<m7<<endl;
        }
        os2<<"\n\n\n\n"<<endl;
        for (int i=0;i<nt;i++)
        {
          a2=MacroTh[i][0]+1;
          b2=MacroTh[i][1]+1;
          cc2=MacroTh[i][2]+1;
          os2<<a2<<" "<<b2<<" "<<cc2<<endl;
        }
        //4.转化为tecplot文件
        os3<<"TITLE = tetrahedron_mesh_in_many_spheres"<<endl;
        os3<<"VARIABLES = X, Y, forder1, forder2, forder3, forder4"<<endl;
        os3<<"ZONE N="<<nv<<",E="<<nt<<",F=FEPOINT,ET=triangle"<<endl;
        for (int i=0;i<nv;i++)
        {
          m1=MacroTh(i).x;
          m2=MacroTh(i).y;
          m4=MU1(m1,m2);
          m5=MV1(m1,m2);
          m6=MW1(m1,m2);
          m7=MT1(m1,m2);
          os3<<m1<<" "<<m2<<" "<<m4<<" "<<m5<<" "<<m6<<" "<<m7<<endl;
        }
        os3<<"\n\n\n\n"<<endl;
        for (int i=0;i<nt;i++)
        {
          a2=MacroTh[i][0]+1;
          b2=MacroTh[i][1]+1;
          cc2=MacroTh[i][2]+1;
          os3<<a2<<" "<<b2<<" "<<cc2<<endl;
        }
        //5.转化为tecplot文件
        os4<<"TITLE = tetrahedron_mesh_in_many_spheres"<<endl;
        os4<<"VARIABLES = X, Y, sorder1, sorder2, sorder3, sorder4"<<endl;
        os4<<"ZONE N="<<nv<<",E="<<nt<<",F=FEPOINT,ET=triangle"<<endl;
        for (int i=0;i<nv;i++)
        {
          m1=MacroTh(i).x;
          m2=MacroTh(i).y;
          m4=MU2(m1,m2);
          m5=MV2(m1,m2);
          m6=MW2(m1,m2);
          m7=MT2(m1,m2);
          os4<<m1<<" "<<m2<<" "<<m4<<" "<<m5<<" "<<m6<<" "<<m7<<endl;
        }
        os4<<"\n\n\n\n"<<endl;
        for (int i=0;i<nt;i++)
        {
          a2=MacroTh[i][0]+1;
          b2=MacroTh[i][1]+1;
          cc2=MacroTh[i][2]+1;
          os4<<a2<<" "<<b2<<" "<<cc2<<endl; 
        }	
	}
	
	
	if(abs(t-0.98) < 1.0e-6)
    {
		//1.tecplot图形化显示数据结果
        //显示中面上的数据
        real nv=MacroTh.nv;
        real nt=MacroTh.nt;
        cout<<nv<<" "<<nt<<endl;
        ofstream os2("2DHomo-cs3.dat");
        ofstream os3("2DForder-cs3.dat");
        ofstream os4("2DSorder-cs3.dat");
        //2.转化为tecplot文件
        real m1,m2,m3,m4,m5,m6,m7;
        int a2,b2,cc2,d2;
        //3.转化为tecplot文件
        os2<<"TITLE = tetrahedron_mesh_in_many_spheres"<<endl;
        os2<<"VARIABLES = X, Y, homo1, homo2, homo3, homo4"<<endl;
        os2<<"ZONE N="<<nv<<",E="<<nt<<",F=FEPOINT,ET=triangle"<<endl;
        for (int i=0;i<nv;i++)
        {
          m1=MacroTh(i).x;
          m2=MacroTh(i).y;
          m4=MU0(m1,m2);
          m5=MV0(m1,m2);
          m6=MW0(m1,m2);
          m7=MT0(m1,m2);
          os2<<m1<<" "<<m2<<" "<<m4<<" "<<m5<<" "<<m6<<" "<<m7<<endl;
        }
        os2<<"\n\n\n\n"<<endl;
        for (int i=0;i<nt;i++)
        {
          a2=MacroTh[i][0]+1;
          b2=MacroTh[i][1]+1;
          cc2=MacroTh[i][2]+1;
          os2<<a2<<" "<<b2<<" "<<cc2<<endl;
        }
        //4.转化为tecplot文件
        os3<<"TITLE = tetrahedron_mesh_in_many_spheres"<<endl;
        os3<<"VARIABLES = X, Y, forder1, forder2, forder3, forder4"<<endl;
        os3<<"ZONE N="<<nv<<",E="<<nt<<",F=FEPOINT,ET=triangle"<<endl;
        for (int i=0;i<nv;i++)
        {
          m1=MacroTh(i).x;
          m2=MacroTh(i).y;
          m4=MU1(m1,m2);
          m5=MV1(m1,m2);
          m6=MW1(m1,m2);
          m7=MT1(m1,m2);
          os3<<m1<<" "<<m2<<" "<<m4<<" "<<m5<<" "<<m6<<" "<<m7<<endl;
        }
        os3<<"\n\n\n\n"<<endl;
        for (int i=0;i<nt;i++)
        {
          a2=MacroTh[i][0]+1;
          b2=MacroTh[i][1]+1;
          cc2=MacroTh[i][2]+1;
          os3<<a2<<" "<<b2<<" "<<cc2<<endl;
        }
        //5.转化为tecplot文件
        os4<<"TITLE = tetrahedron_mesh_in_many_spheres"<<endl;
        os4<<"VARIABLES = X, Y, sorder1, sorder2, sorder3, sorder4"<<endl;
        os4<<"ZONE N="<<nv<<",E="<<nt<<",F=FEPOINT,ET=triangle"<<endl;
        for (int i=0;i<nv;i++)
        {
          m1=MacroTh(i).x;
          m2=MacroTh(i).y;
          m4=MU2(m1,m2);
          m5=MV2(m1,m2);
          m6=MW2(m1,m2);
          m7=MT2(m1,m2);
          os4<<m1<<" "<<m2<<" "<<m4<<" "<<m5<<" "<<m6<<" "<<m7<<endl;
        }
        os4<<"\n\n\n\n"<<endl;
        for (int i=0;i<nt;i++)
        {
          a2=MacroTh[i][0]+1;
          b2=MacroTh[i][1]+1;
          cc2=MacroTh[i][2]+1;
          os4<<a2<<" "<<b2<<" "<<cc2<<endl; 
        }	
	}
}

//***********************************************************************************************
//***********************************************************************************************