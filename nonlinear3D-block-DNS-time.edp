load "msh3"
load "Morley"
load "UMFPACK64"
load "medit"
include "cube.idp" 
include "../Nonlinear-material-structure/MeshFile/MeshFunc3D.edp"
include "../Nonlinear-material-structure/MeshFile/MeshFunc2D.edp"
//材料系数与温度呈二次函数增长关系
//从线性增长关系的Ma、Mb增加到Ma、Mb、Mc,其中Mc为二次关系中的系数
//****************************************************²1.非线性材料参数(start)***********************************
//参考初始温度
real intiT=373.15;
//材料系数与温度呈二次函数增长关系
//从线性增长关系的Ma、Mb增加到Ma、Mb、Mc,其中Mc为二次关系中的系数
/* real Ma1=250.0e-2, Ma2=8.0e-2, Mb1=0.21e-5*16.1988, Mb2=0.017e-2*7.2727, Mc1=0.116e-8*16.1988, Mc2=0.0*7.2727;                //M:热传导系数
real Ea1 = 350.0e5, nu1=0.25, Eb1 =-50.3e2*2.6475, Ec1=-8.1e-1*2.6475;                         //E,nu杨氏模量和泊松比
real Ea2 = 220.0e5, nu2=0.20, Eb2 =-5.65e2*1.7930, Ec2=0.0*1.7930;  //其中a代表线性增长关系的常数项,b表示线性关系中的一次项系数,c代表二次关系中的二次项系数
real lambda1 = Ea1*nu1/(1-nu1^2), lambdb1 = Eb1*nu1/(1-nu1^2), lambdc1 = Ec1*nu1/(1-nu1^2); //lambda,mu两个拉梅常数 
real mua1 = Ea1/(2*(1+nu1)), mub1 = Eb1/(2*(1+nu1)), muc1 = Ec1/(2*(1+nu1));
real lambda2 = Ea2*nu2/(1-nu2^2), lambdb2 = Eb2*nu2/(1-nu2^2), lambdc2 = Ec2*nu2/(1-nu2^2);
real mua2 = Ea2/(2*(1+nu2)), mub2 = Eb2/(2*(1+nu2)), muc2 = Ec2/(2*(1+nu2));
real beta1=147.00, beta2=113.67, betb1=-7.4864e-1*0.2788, betb2=1.6166e-1*0.5262, betc1=5.0306e-4*0.2788, betc2=-0.7821e-4*0.5262;         //热模量
real deta1=147.00*intiT, deta2=113.67*intiT, detb1=-7.4864e-1*intiT*0.2788, detb2=1.6166e-1*intiT*0.5262, detc1=5.0306e-4*intiT*0.2788, detc2=-0.7821e-4*intiT*0.5262;         //双向耦合模量
real pca1=2.1186, pca2=1.2496, pcb1=2.9073e-3*2.1144, pcb2=3.8808e-3*0.8078, pcc1=-2.2637e-6*2.1144, pcc2=-4.3051e-6*0.8078;              //pc:两种材料的密度和比热乘积rho*c,热传导方程需要                
real rho1=3.21e-3, rho2=1.76e-3;  */
real Ma1=250.0e-2, Ma2=8.0e-2, Mb1=0.02728e-2, Mb2=0.02535e-2, Mc1=0.0, Mc2=0.0;                //M:热传导系数
real Ea1 = 350.0e5, nu1=0.25, Eb1 =-3.0435e3, Ec1=0.0;                         //E,nu杨氏模量和泊松比
real Ea2 = 220.0e5, nu2=0.20, Eb2 =-1.1018e1, Ec2=0.0;  //其中a代表线性增长关系的常数项,b表示线性关系中的一次项系数,c代表二次关系中的二次项系数
real lambda1 = Ea1*nu1/(1-nu1^2), lambdb1 = Eb1*nu1/(1-nu1^2), lambdc1 = Ec1*nu1/(1-nu1^2); //lambda,mu两个拉梅常数 
real mua1 = Ea1/(2*(1+nu1)), mub1 = Eb1/(2*(1+nu1)), muc1 = Ec1/(2*(1+nu1));
real lambda2 = Ea2*nu2/(1-nu2^2), lambdb2 = Eb2*nu2/(1-nu2^2), lambdc2 = Ec2*nu2/(1-nu2^2);
real mua2 = Ea2/(2*(1+nu2)), mub2 = Eb2/(2*(1+nu2)), muc2 = Ec2/(2*(1+nu2));
//real beta1=147.00, beta2=113.67, betb1=1.2460, betb2=-57.53e-4, betc1=-10.8808e-4, betc2=0.0817e-4;         //热模量
//real deta1=147.00*intiT, deta2=113.67*intiT, detb1=1.2460*intiT, detb2=-57.53e-4*intiT, detc1=-10.8808e-4*intiT, detc2=0.0817e-4*intiT;         //双向耦合模量
real beta1=3.5e-4, beta2=0.9273, betb1=0.0, betb2=-57.53e-4, betc1=0.0, betc2=0.0817e-4;         //热模量
real deta1=beta1*intiT, deta2=beta2*intiT, detb1=betb1*intiT, detb2=betb2*intiT, detc1=betc1*intiT, detc2=betc2*intiT;
//real beta1=-127.93, beta2=0.9273, betb1=1.2460, betb2=-57.53e-4, betc1=-10.8808e-4, betc2=0.0817e-4;         //热模量
//real deta1=-127.93*intiT, deta2=0.9273*intiT, detb1=1.2460*intiT, detb2=-57.53e-4*intiT, detc1=-10.8808e-4*intiT, detc2=0.0817e-4*intiT;
real pca1=2.1186, pca2=1.2496, pcb1=2.9073e-3*2.1144, pcb2=3.8808e-3*0.8078, pcc1=-2.2637e-6*2.1144, pcc2=-4.3051e-6*0.8078;              //pc:两种材料的密度和比热乘积rho*c,热传导方程需要                
real rho1=3.21e-3, rho2=1.76e-3;
//********二次函数材料系数宏*********
macro material(a,b,c,RET) (a+b*RET+c*RET*RET)//
//********线性材料系数宏
//应变宏
macro strain(u1,u2,u3) [dx(u1),dy(u2),dz(u3),dy(u1)+dx(u2),dz(u2)+dy(u3),dx(u3)+dz(u1)]//
//各向异性材料柔度矩阵
macro H(Ee11,Ee22,Ee33,v12,v23,v13,Gg12,Gg23,Gg31)[[1.0/Ee11, (-1.0)*v12/Ee11, (-1.0)*v13/Ee11, 0.0, 0.0, 0.0],
                                                      [(-1.0)*v12/Ee11, 1.0/Ee22, (-1.0)*v23/Ee22, 0.0, 0.0, 0.0],
                                                        [(-1.0)*v13/Ee11, (-1.0)*v23/Ee22, 1.0/Ee33, 0.0, 0.0, 0.0],
					                                       [0.0, 0.0, 0.0, 1.0/Gg12, 0.0, 0.0],
								                              [0.0, 0.0, 0.0, 0.0, 1.0/Gg23, 0.0],
                                                                [0.0, 0.0, 0.0, 0.0, 0.0, 1.0/Gg31]]//
//对于各向同性材料有E=E11=E22=E33,v=Nu12=Nu23=Nu31,G=G12=G23=G31=E/2(1+v);
macro HH(E,V)[[1.0/E, (-1.0)*V/E, (-1.0)*V/E , 0, 0, 0],
                                                      [(-1.0)*V/E, 1.0/E ,(-1.0)*V/E, 0.0 ,0.0 ,0.0],
                                                        [(-1.0)*V/E ,(-1.0)*V/E, 1.0/E ,0.0, 0.0 ,0.0],
					                                       [0.0, 0.0, 0.0, 2.0*(1+V)/E, 0.0, 0.0],
								                              [0.0, 0.0, 0.0, 0.0, 2.0*(1+V)/E, 0.0],
                                                                [0.0, 0.0, 0.0, 0.0, 0.0, 2.0*(1+V)/E]]//
//刚度矩阵宏
macro C(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)
[[kc11,kc12,kc13,0.0,0.0,0.0],
   [kc21,kc22,kc23,0.0,0.0,0.0],
       [kc31,kc32,kc33,0.0,0.0,0.0],
            [0.0,0.0,0.0,kc44,0.0,0.0],
               [0.0,0.0,0.0,0.0,kc55,0.0],
                  [0.0,0.0,0.0,0.0,0.0,kc66]]//
//生成刚度矩阵每一行的宏命令
//各向异性材料和各向同性材料为相同的宏命令
macro C1(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)
[kc11,kc12,kc13,0.0,0.0,0.0]//
macro C2(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)
[kc21,kc22,kc23,0.0,0.0,0.0]//
macro C3(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)
[kc31,kc32,kc33,0.0,0.0,0.0]//
macro C4(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)
[0.0,0.0,0.0,kc44,0.0,0.0]//
macro C5(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)
[0.0,0.0,0.0,0.0,kc55,0.0]//
macro C6(kc11,kc12,kc13,kc21,kc22,kc23,kc31,kc32,kc33,kc44,kc55,kc66)
[0.0,0.0,0.0,0.0,0.0,kc66]//

/* //应变宏
macro strain(u1, u2) [dx(u1), dy(u2), dy(u1) + dx(u2)]   //EOM
//刚度矩阵宏
macro C(E1,E2,E3,nu,RET) [[material(E1,E2,E3,RET)/(1-nu^2),    material(E1,E2,E3,RET)*nu/(1-nu^2), 0],
                          [material(E1,E2,E3,RET)*nu/(1-nu^2), material(E1,E2,E3,RET)/(1-nu^2),    0],
                                         [0,             0,             material(E1,E2,E3,RET)/(2*(1+nu))]] //EOM
macro Con11(E1,E2,E3,nu,RET) [material(E1,E2,E3,RET)/(1-nu^2), material(E1,E2,E3,RET)*nu/(1-nu^2), 0] //EOM
macro Con12(E1,E2,E3,nu,RET) [0         , 0            , material(E1,E2,E3,RET)/(2*(1+nu))] //EOM
macro Con21(E1,E2,E3,nu,RET) [0         , 0            , material(E1,E2,E3,RET)/(2*(1+nu))] //EOM
macro Con22(E1,E2,E3,nu,RET) [material(E1,E2,E3,RET)*nu/(1-nu^2), material(E1,E2,E3,RET)/(1-nu^2), 0] //EOM */
/* real[int, int] MMa1 = C(Ea1, Eb1, nu1, intiT);
cout << "Constitute Matrix M1: " << endl;
cout << MMa1 << endl;
real[int, int] MMa2 = C(Ea2, Eb2, nu2, intiT);
cout << "Constitute Matrix M2: " << endl;
cout << MMa2 << endl; */
//2.将柔度矩阵通过矩阵求逆转化为刚度矩阵
//矩阵求逆函数
func real[int,int] inverse(real[int,int] &vec)
{
	
	//vec为已生成的柔度矩阵为对称正定矩阵
    //利用已有算法求逆矩阵
	int stRank = 6;
	real[int] b(6);
	for(int k=0; k<stRank; k++)
	{
		real w= vec(0,0);
		int m = stRank - k -1;
		for(int i=1; i<stRank; i++)
		{
			real g = vec(i,0);
			b[i] = g / w;
			if (i<=m)
			{
				b(i) = -b(i);
			}
			for(int j=1; j<=i; j++)
			{
				vec(i-1,j-1)= vec(i,j) + g * b(j);
			}
		}
		vec(stRank-1,stRank-1) = 1.0 / w;
		for(int i= 1; i<stRank; i++)
		{
			vec(stRank-1,i-1) =  b(i);
		}
	}
	for(int i=0; i<stRank-1; i++)
	{
		for(int j = i+1; j<stRank; j++)
		{
			vec(i,j) = vec(j,i);
		}
	}

	real[int,int] cmatrix = vec;
	return cmatrix;
}
//****************************************************²非线性材料参数(end)************************************

//****************************************************2.前处理(begin)*************************************
//include "../cicpnonlinear3/MeshFile/MeshFunc2D.edp"
//load "lapack"
//load "fflapack"
//单胞网格及几何形状定义
real r=0.35;
//1.单胞几何模型及网格生成程序段
//球形夹杂单胞
//mesh3 platecell=CBall(0.5, 0.5, 0.5, r, 8, 0);//这个单胞划分函数对球的划分很密集
//mesh3 CellTh= MBall(1, 1, 1, 0.5, 0.5, 0.5, r, 35);//这个单胞函数对球的划分不是很密
//int RM1 = CellTh(0.01, 0.01, 0.01).region;
//int RM2 = CellTh(0.5, 0.5, 0.5).region;
//2.均匀化区域网格
int n =5;                  //单胞数目5*5*5 
real epsilon = 1./n;        //单胞大小
int[int] NN=[25,25,25];
real [int,int] BB=[[0,5],[0,5],[0,5]];
int [int,int] L=[[1,2],[3,4],[5,6]];
//mesh3 HomoTh1=Cube(NN,BB,L);
//mesh3 HomoTh=movemesh3(HomoTh1,transfo=[x*epsilon,y*epsilon,z*epsilon]);
//HomoTh = movemesh(HomoTh, [0.5*x,y]);
//HomoTh = movemesh(HomoTh, [x+1, y]);
//宏观精细有限元网格及几何形状定义
//mesh MacroTh = MacroMeshRectangle(n, 20, 0.25, 0.25, 0.5, 0.5, 0);
//1.宏观区域几何模型及网格生成程序段
//a代表x方向的单胞数，b代表y方向的单胞数，c代表z方向的单胞数
int an1=5;
int bn1=5;
int cn1=5;
mesh3 MacroTh1 = MBall(an1, bn1, cn1, 0.5, 0.5, 0.5, r, 35);
mesh3 MacroTh=movemesh3(MacroTh1,transfo=[x*epsilon,y*epsilon,z*epsilon]);
int RMM1 = MacroTh(0.01, 0.01, 0.01).region;
int RMM2 = MacroTh(0.5, 0.5, 0.5).region;
//MacroTh = movemesh(MacroTh, [x+1, y]);
plot(MacroTh);
mesh3 Exter=trunc(MacroTh,region==RMM1);
plot(Exter);
mesh3 Inter=trunc(MacroTh,region==RMM2);
plot(Inter);
fespace MacroVh(MacroTh, P1);
fespace MacroVh0(MacroTh, P0);
//宏观区域上线性常数部分参数
MacroVh0 rhoM= rho1*(region==RMM1) + rho2*(region==RMM2);//密度不依赖于温度
MacroVh0 nuM = nu1*(region==RMM1) + nu2*(region==RMM2);//温度对泊松比影响很小
MacroVh0 aaM = Ma1*(region==RMM1) + Ma2*(region==RMM2);
MacroVh0 EaM = Ea1*(region==RMM1) + Ea2*(region==RMM2);
MacroVh0 baM = beta1*(region==RMM1) + beta2*(region==RMM2);
MacroVh0 daM = deta1*(region==RMM1) + deta2*(region==RMM2);
MacroVh0 pcaM= pca1*(region==RMM1) + pca2*(region==RMM2);
//宏观区域上线性一次项部分参数
MacroVh0 abM = Mb1*(region==RMM1) + Mb2*(region==RMM2);
MacroVh0 EbM = Eb1*(region==RMM1) + Eb2*(region==RMM2);
MacroVh0 bbM = betb1*(region==RMM1) + betb2*(region==RMM2);
MacroVh0 dbM = detb1*(region==RMM1) + detb2*(region==RMM2);
MacroVh0 pcbM= pcb1*(region==RMM1) + pcb2*(region==RMM2);
//宏观区域上非线性二次项部分参数
MacroVh0 acM = Mc1*(region==RMM1) + Mc2*(region==RMM2);
MacroVh0 EcM = Ec1*(region==RMM1) + Ec2*(region==RMM2);
MacroVh0 bcM = betc1*(region==RMM1) + betc2*(region==RMM2);
MacroVh0 dcM = detc1*(region==RMM1) + detc2*(region==RMM2);
MacroVh0 pccM= pcc1*(region==RMM1) + pcc2*(region==RMM2);

real E1=material(Ea1,Eb1,Ec1,intiT);
real E2=material(Ea2,Eb2,Ec2,intiT);
real[int,int] MMa1=HH(E1,nu1);
MMa1=inverse(MMa1);
cout << "1.Based material Constitute Matrix M1: " << endl;
cout << MMa1 << endl;
real[int,int] MMa2=HH(E2,nu2);
MMa2=inverse(MMa2);
cout << "2.Reinforced material Constitute Matrix M2: " << endl;
cout << MMa2 << endl;

real dE1=material(Eb1,2*Ec1,0,intiT);
real dE2=material(Eb2,2*Ec2,0,intiT);
real[int,int] dMMa1=HH(dE1,nu1);
dMMa1=inverse(dMMa1);
cout << "1.Based material Constitute Matrix M1: " << endl;
cout << dMMa1 << endl;
real[int,int] dMMa2=HH(dE2,nu2);
dMMa2=inverse(dMMa2);
cout << "2.Reinforced material Constitute Matrix M2: " << endl;
cout << dMMa2 << endl;

//宏观问题刚度系数定义
MacroVh kM11;
MacroVh kM12;
MacroVh kM13;
MacroVh kM21;
MacroVh kM22;
MacroVh kM23;
MacroVh kM31;
MacroVh kM32;
MacroVh kM33;
MacroVh kM44;
MacroVh kM55;
MacroVh kM66;

//方程未知函数
//func f=15000;//热源函数
func f=5000;//热源函数
func f1=0.0;//x方向体力
func f2=0.0;//y方向体力
func f3=-10000;//z方向体力
real dt = 0.01; //时间步长

real Time=1.0;
//****************************************************前处理(end)*************************************

//*********************************3.精细有限元求解定义(begin)*******************************
//Newmark差分格式中的常数gamma、beta
real gamma=0.6;
real beta=0.35;
real c0=1.0/(beta*dt^2.0);
real c1=gamma/(beta*dt);
real c2=1.0/(beta*dt);
real c3=1.0/(2.0*beta)-1.0;
real c4=gamma/beta-1.0;
real c5=dt*(gamma/(2.0*beta)-1.0);
real c6=dt*(1-gamma);
real c7=gamma*dt;
real RHT; //定义单胞函数中的宏观变量均匀化温度T0
//插值求解所有一阶单胞函数部分二阶单胞函数
MacroVh Tx = x;//宏观x坐标
MacroVh Ty = y;//宏观y坐标
MacroVh Tz = z;//宏观y坐标
//对第0层的加速度解进行计算
MacroVh FEU,FEV,FEW,FET;           //实变量
MacroVh v1,v2,v3,vT;              //虚变量
MacroVh Tp,Tpp,up1,upp1,up2,upp2,up3,upp3;  //时间方向递推时的中间变量
MacroVh IFEU,IFEV,IFEW,IFET;        //非线性迭代时的中间变量
//热传导方程初值问题
Tpp=373.15;
Tp=373.15;
//IFET=373.15;
//波动方程初值问题,表示初始位移、速度均为0
upp1=0.0;
up1=0.0;
upp2=0.0;
up2=0.0;
upp3=0.0;
up3=0.0;

for(int i=0; i< MacroVh.ndof; i++)//精细有限元细网格上二阶解组装按单个点来组装
{		
		   RHT=intiT;//单胞函数参考宏观温度每个宏观点不一致
	       int RMlab=MacroTh(Tx[][i], Ty[][i], Tz[][i]).region;
	       //cout<<RMlab<<endl;
	       if(RMlab==RMM1) 
		   {
			   E1=material(Ea1,Eb1,Ec1,RHT);
               MMa1=HH(E1,nu1);
               MMa1=inverse(MMa1);
			   kM11[][i] = MMa1(0,0);
               kM12[][i] = MMa1(0,1);
               kM13[][i] = MMa1(0,2);
               kM21[][i] = MMa1(1,0);
               kM22[][i] = MMa1(1,1);
               kM23[][i] = MMa1(1,2);
               kM31[][i] = MMa1(2,0);
               kM32[][i] = MMa1(2,1);
               kM33[][i] = MMa1(2,2);
               kM44[][i] = MMa1(3,3);
               kM55[][i] = MMa1(4,4);
               kM66[][i] = MMa1(5,5);
		   }
	       else 
		   {
			   E2=material(Ea2,Eb2,Ec2,RHT);
               MMa2=HH(E2,nu2);
               MMa2=inverse(MMa2);
			   kM11[][i] = MMa2(0,0);
               kM12[][i] = MMa2(0,1);
               kM13[][i] = MMa2(0,2);
               kM21[][i] = MMa2(1,0);
               kM22[][i] = MMa2(1,1);
               kM23[][i] = MMa2(1,2);
               kM31[][i] = MMa2(2,0);
               kM32[][i] = MMa2(2,1);
               kM33[][i] = MMa2(2,2);
               kM44[][i] = MMa2(3,3);
               kM55[][i] = MMa2(4,4);
               kM66[][i] = MMa2(5,5);
		   }		   
}

MacroVh MMU0,MMV0,MMW0;
solve PrepMech([MMU0,MMV0,MMW0], [v1,v2,v3], solver=GMRES, eps=1.0e-10)=
         int3d(MacroTh)(rhoM*MMU0*v1)
	    +int3d(MacroTh)(rhoM*MMV0*v2)
		+int3d(MacroTh)(rhoM*MMW0*v3)
		+int3d(MacroTh)(strain(up1,up2,up3)'*C(kM11,kM12,kM13,kM21,kM22,kM23,kM31,kM32,kM33,kM44,kM55,kM66)*strain(v1,v2,v3))
        -int3d(MacroTh)((material(baM,bbM,bcM,intiT)*dx(v1)+material(baM,bbM,bcM,intiT)*dy(v2)+material(baM,bbM,bcM,intiT)*dz(v3))*Tp)
		+int3d(MacroTh)((material(baM,bbM,bcM,intiT)*dx(v1)+material(baM,bbM,bcM,intiT)*dy(v2)+material(baM,bbM,bcM,intiT)*dz(v3))*intiT)
        -int3d(MacroTh)(f1*v1)
        -int3d(MacroTh)(f2*v2)
		-int3d(MacroTh)(f3*v3)
		+on(1,2,3,4,MMU0=0.0,MMV0=0.0,MMW0=0.0);
		
//复合材料动态热-力耦合问题
//采用解耦的方法求解耦合系统
MacroVh ufu1,vfu1,wfu1;
ufu1=0;
vfu1=0;
wfu1=0;//利用初始条件对第-1层的位移解进行预估,为了求解第1层的温度解

MacroVh um1,vm1,wm1;
MacroVh dum1,dvm1,dwm1;
MacroVh ddum1,ddvm1,ddwm1;//Newmark差分格式中用到的上一层的位移解、速度解、加速度解
MacroVh middum1,middvm1,middwm1;

um1=up1;
vm1=up2;
wm1=up3;//第0层位移初始条件
dum1=0;
dvm1=0;
dwm1=0;//第0层位移速度初始条件		
ddum1=MMU0;
ddvm1=MMV0;
ddwm1=MMW0;//第0层位移加速度
up1=ufu1;
up2=vfu1;
up3=wfu1;

//热力耦合问题的变分问题
problem DecoupThermo(FET,vT,solver=GMRES,eps=1.0e-10)=
         int3d(MacroTh)(material(pcaM,pcbM,pccM,IFET)*FET*vT/dt)-int3d(MacroTh)(material(pcaM,pcbM,pccM,IFET)*Tp*vT/dt)		
		+int3d(MacroTh)(material(aaM,abM,acM,IFET)*dx(FET)*dx(vT)+material(aaM,abM,acM,IFET)*dy(FET)*dy(vT)+material(aaM,abM,acM,IFET)*dz(FET)*dz(vT))		
		+int3d(MacroTh)(material(daM,dbM,dcM,IFET)*(dx(up1)+dy(up2)+dz(up3))*vT/dt*0.5)
		-int3d(MacroTh)(material(daM,dbM,dcM,IFET)*(dx(upp1)+dy(upp2)+dz(upp3))*vT/dt*0.5)		
		-int3d(MacroTh)(f*vT)
		+on(5,FET=373.15)
		+on(6,FET=773.15);

problem DecoupMechan([FEU,FEV,FEW],[v1,v2,v3],solver=GMRES,eps=1.0e-10)=
         int3d(MacroTh)(rhoM*FEU*v1*c0)
		+int3d(MacroTh)(rhoM*FEV*v2*c0)
		+int3d(MacroTh)(rhoM*FEW*v3*c0)		
		+int3d(MacroTh)(strain(FEU,FEV,FEW)'*C(kM11,kM12,kM13,kM21,kM22,kM23,kM31,kM32,kM33,kM44,kM55,kM66)*strain(v1,v2,v3))		
		-int3d(MacroTh)(material(baM,bbM,bcM,IFET)*(dx(v1)+dy(v2)+dz(v3))*FET)
        +int3d(MacroTh)(material(baM,bbM,bcM,IFET)*(dx(v1)+dy(v2)+dz(v3))*intiT)
		-int3d(MacroTh)(rhoM*um1*v1*c0)
	    -int3d(MacroTh)(rhoM*vm1*v2*c0)
		-int3d(MacroTh)(rhoM*wm1*v3*c0)
		-int3d(MacroTh)(rhoM*dum1*v1*c2)
	    -int3d(MacroTh)(rhoM*dvm1*v2*c2)
		-int3d(MacroTh)(rhoM*dwm1*v3*c2)
		-int3d(MacroTh)(rhoM*ddum1*v1*c3)
	    -int3d(MacroTh)(rhoM*ddvm1*v2*c3)
		-int3d(MacroTh)(rhoM*ddwm1*v3*c3)	
		-int3d(MacroTh)(f1*v1+f2*v2+f3*v3)	
        +on(1,2,3,4, FEU=0, FEV=0, FEW=0);
//**********************************精细有限元求解定义(end)*******************************

//**********************************************************************************
//*****************************5.非线性迭代开始*************************************
real err1,err2,err3,err4;//迭代误差限
int k;//每一时间层非线性迭代次数
MacroVh FUerr,FVerr,FWerr,FTerr;//精细有限元解迭代误差函数
MacroVh MT0, MT1, MT2;
MacroVh MU0, MV0, MW0, MU1, MV1, MW1, MU2, MV2, MW2;//均匀化解、一阶解、二阶解
IFEU=0.0;
IFEV=0.0;
IFEW=0.0;
IFET=Tp;
real diff = 0.001;//有关宏观变量求导数时,使用中心差分时的两点距离

ofstream time("time.txt");
//L2相对误差
ofstream TL20("TLHomo0.txt");
ofstream TL21("TLHomo1.txt");
ofstream TL22("TLHomo2.txt");
ofstream UL20("ULHomo0.txt");
ofstream UL21("ULHomo1.txt");
ofstream UL22("ULHomo2.txt");
ofstream VL20("VLHomo0.txt");
ofstream VL21("VLHomo1.txt");
ofstream VL22("VLHomo2.txt");
ofstream WL20("WLHomo0.txt");
ofstream WL21("WLHomo1.txt");
ofstream WL22("WLHomo2.txt");
ofstream UVWL0("UVWL0.txt");
ofstream UVWL1("UVWL1.txt");
ofstream UVWL2("UVWL2.txt");
//H1相对误差
ofstream TH10("THHomo0.txt");
ofstream TH11("THHomo1.txt");
ofstream TH12("THHomo2.txt");
ofstream UH10("UHHomo0.txt");
ofstream UH11("UHHomo1.txt");
ofstream UH12("UHHomo2.txt");
ofstream VH10("VHHomo0.txt");
ofstream VH11("VHHomo1.txt");
ofstream VH12("VHHomo2.txt");
ofstream WH10("WHHomo0.txt");
ofstream WH11("WHHomo1.txt");
ofstream WH12("WHHomo2.txt");
ofstream UVWH0("UVWH0.txt");
ofstream UVWH1("UVWH1.txt");
ofstream UVWH2("UVWH2.txt");
ofstream error("error.txt");

//开始沿时间方向进行二阶双尺度解求解、精细有限元求解、误差分析
for (real t = dt; t <= Time; t+=dt){
		
	//精细有限元迭代求解为了计算最终误差
	cout<<"5.time t=:"<<t<<endl;
	//非线性方程组内迭代算法采用直接迭代
	//IFEU=up1;
	//IFEV=up2;
	//IFET=Tp;
	k=0;
    err1=0.1;
    err2=0.1;
    err3=0.1;
	err4=0.1;
	while(err1>1.0e-15||err2>1.0e-15||err3>1.0e-15||err4>1.0e-15)//直接迭代误差限
	{	
		for(int i=0; i< MacroVh.ndof; i++)//精细有限元细网格上二阶解组装按单个点来组装
	    {		
		   RHT=IFET(Tx[][i], Ty[][i], Tz[][i]);//单胞函数参考宏观温度每个宏观点不一致
	       int RMlab=MacroTh(Tx[][i], Ty[][i], Tz[][i]).region;
	       //cout<<RMlab<<endl;
	       if(RMlab==RMM1) 
		   {
			   E1=material(Ea1,Eb1,Ec1,RHT);
               MMa1=HH(E1,nu1);
               MMa1=inverse(MMa1);
			   kM11[][i] = MMa1(0,0);
               kM12[][i] = MMa1(0,1);
               kM13[][i] = MMa1(0,2);
               kM21[][i] = MMa1(1,0);
               kM22[][i] = MMa1(1,1);
               kM23[][i] = MMa1(1,2);
               kM31[][i] = MMa1(2,0);
               kM32[][i] = MMa1(2,1);
               kM33[][i] = MMa1(2,2);
               kM44[][i] = MMa1(3,3);
               kM55[][i] = MMa1(4,4);
               kM66[][i] = MMa1(5,5);
		   }
	       else 
		   {
			   E2=material(Ea2,Eb2,Ec2,RHT);
               MMa2=HH(E2,nu2);
               MMa2=inverse(MMa2);
			   kM11[][i] = MMa2(0,0);
               kM12[][i] = MMa2(0,1);
               kM13[][i] = MMa2(0,2);
               kM21[][i] = MMa2(1,0);
               kM22[][i] = MMa2(1,1);
               kM23[][i] = MMa2(1,2);
               kM31[][i] = MMa2(2,0);
               kM32[][i] = MMa2(2,1);
               kM33[][i] = MMa2(2,2);
               kM44[][i] = MMa2(3,3);
               kM55[][i] = MMa2(4,4);
               kM66[][i] = MMa2(5,5);
		   }		   
	    }
		k=k+1;
		DecoupThermo;
		DecoupMechan;
		FUerr=FEU-IFEU;
		FVerr=FEV-IFEV;
		FWerr=FEW-IFEW;
		FTerr=FET-IFET;
		err1=FUerr[].linfty;
		err2=FVerr[].linfty;
		err3=FWerr[].linfty;
		err4=FTerr[].linfty;
		IFEU=FEU;
		IFEV=FEV;
		IFEW=FEW;
		IFET=FET;
		//if(k>1000) break;//非线性迭代次数误差限
	}	
	cout<<"6.Fine Fem iteration number:"<<k<<endl;
	middum1=ddum1;
	middvm1=ddvm1;
	middwm1=ddwm1;
	ddum1=c0*(FEU-um1)-c2*dum1-c3*ddum1;
    ddvm1=c0*(FEV-vm1)-c2*dvm1-c3*ddvm1;
    ddwm1=c0*(FEW-wm1)-c2*dwm1-c3*ddwm1;//第0层位移初始条件		
    dum1=dum1+c6*middum1+c7*ddum1;
    dvm1=dvm1+c6*middvm1+c7*ddvm1;
    dwm1=dwm1+c6*middwm1+c7*ddwm1;//第0层位移加速度
    //为了进一步迭代进行赋值
   	upp1=up1;
	up1=FEU;
	upp2=up2;
	up2=FEV;
	upp3=up3;
	up3=FEW;
	Tp=FET;
	um1=FEU;
	vm1=FEV;
	wm1=FEW;	
}
//**********************************************************************************************
//***********************************有限元后处理***********************************************
/* //tecplot图形化显示数据结果
real nv=MacroTh.nv;
real nt=MacroTh.nt;
cout<<nv<<" "<<nt<<endl;
ofstream os("sots.dat");
//转化为tecplot文件
real m1,m2,m3,m4,m5,m6,m7,m8,m9,m10,m11,m12,m13,m14,m15,m16,m17,m18,m19;
os<<"TITLE = tetrahedron_mesh_in_many_spheres"<<endl;
os<<"VARIABLES = X, Y, Z, FEU, FEV, FEW, FET"<<endl;
os<<"ZONE N="<<nv<<",E="<<nt<<",F=FEPOINT, ET= tetrahedron"<<endl;
for (int i=0;i<nv;i++)
{
 m1=MacroTh(i).x;
 m2=MacroTh(i).y;
 m3=MacroTh(i).z;
 m4=FEU(m1,m2,m3);
 m5=FEV(m1,m2,m3);
 m6=FEW(m1,m2,m3);
 m7=FET(m1,m2,m3);
 os<<m1<<" "<<m2<<" "<<m3<<" "<<m4<<" "<<m5<<" "<<m6<<" "<<m7<<endl;
}
os<<"\n\n\n\n"<<endl;
int at2,bt2,ct2,dt2;//定义bt2是因为材料系数有一项b2
for (int i=0;i<nt;i++)
{
at2=MacroTh[i][0]+1;
bt2=MacroTh[i][1]+1;
ct2=MacroTh[i][2]+1;
dt2=MacroTh[i][3]+1;
os<<at2<<" "<<bt2<<" "<<ct2<<" "<<dt2<<endl;
} */